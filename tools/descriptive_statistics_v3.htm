<html lang="zh-Hant-HK">
<head>
<title>分布描述 Descriptive Statistics</title>
<style type="text/css">
div.pop{line-height: 100%;}
div.info{line-height: 150%;}
body
{
	background-color: #FFFFFF;
	color: #000000;
}
p
{
	line-height: 100%;
}
a
{
	text-decoration: none;
}
thead tr th
{
	position: sticky;
	top: 0;
}
th
{
	background-color: white;
}
</style>
</head>
<body>
<script src="math.js"></script>
<script>

var pop = [] , poplist = [] ; // data set , data set 表格

var size , sum , mean , mean_geo , mean_har , dev2sum , vari , sd , md , mode , cv , se;
// 樣本數,加總,期望值,幾何平均數,調和平均數,差方和,變異數,標準差,平均差,眾數,變異係數,標準誤
var mean_fix , dev2sum_fix , sd_fix , se_fix ; // 約數
var fix_d = 6 ; // 約數小數位

var median , q1 , q3 ; // 四分位數
var mid_hinge , mean_mri ; // 中樞紐 , 三均值
var mean_iq ; // 四分平均數

var min , max , mid_range , range_half=[] , range , range_c , range_b , iqr , qd  ;
// 最小值,最大值,中程數,半距,全距,全距係數,平均間距,四分位距,四分位差

// 單次機率估計
var firstHit_mean , firstHit_median , firstHit_mode , firstHit_mean_geo , firstHit_mean_har ;
// 算術平均比例 , 中位數比例 , 眾數比例 , 幾何平均比例 , 調和平均比例

// 說明
var help_cenTen ; // 集中趨勢
var help_firstHit ; // 單次機率估計
var help_disper ; // 分散程度
var help_samDist ; // 抽樣分布
var help_exportData ; // 導出數據

// 置信區間(z)
var sd_est = -1 , se_est = -1 ; // 用作估計的標準差 , 標準誤 (母體)
var z_99_2 , z_99_2_mean = [] ;
var z_99_1 , z_99_1_mean = [] ;
var z_95_2 , z_95_2_mean = [] ;
var z_95_1 , z_95_1_mean = [] ;
var z_90_2 , z_90_2_mean = [] ;
var z_90_1 , z_90_1_mean = [] ;

// 置信區間(t)
var t_99_2_table = [63.656741,9.924843,5.840909,4.604095,4.032143,3.707428,3.499483,3.355387,3.249836,3.169273,3.105807,3.05454,3.012276,2.976843,2.946713,2.920782,2.898231,2.87844,2.860935,2.84534,2.83136,2.818756,2.807336,2.79694,2.787436,2.778715,2.770683,2.763262,2.756386,2.749996,2.744042,2.738481,2.733277,2.728394,2.723806,2.719485,2.715409,2.711558,2.707913,2.704459,2.701181,2.698066,2.695102,2.692278,2.689585,2.687013,2.684556,2.682204,2.679952,2.677793,2.675722,2.673734,2.671823,2.669985,2.668216,2.666512,2.66487,2.663287,2.661759,2.660283,2.658857,2.657479,2.656145,2.654854,2.653604,2.652394,2.65122,2.650081,2.648977,2.647905,2.646863,2.645852,2.644869,2.643913,2.642983,2.642078,2.641198,2.64034,2.639505,2.638691,2.637897,2.637123,2.636369,2.635632,2.634914,2.634212,2.633527,2.632858,2.632204,2.631565,2.63094,2.63033,2.629732,2.629148,2.628576,2.628016,2.627468,2.626931,2.626405,2.625891,2.625386,2.624891,2.624407,2.623932,2.623465,2.623008,2.62256,2.62212,2.621688,2.621265,2.620849,2.62044,2.620039,2.619645,2.619258,2.618878,2.618504,2.618137,2.617776,2.617421,2.617072,2.616729,2.616392,2.61606,2.615733,2.615412,2.615096,2.614785,2.614479,2.614177,2.61388,2.613588,2.6133,2.613017,2.612738,2.612463,2.612192,2.611925,2.611662,2.611403,2.611147,2.610895,2.610647,2.610402,2.610161,2.609923,2.609688,2.609456,2.609228,2.609003,2.60878,2.608561,2.608344,2.608131,2.60792,2.607712,2.607506,2.607304,2.607103,2.606906,2.606711,2.606518,2.606328,2.60614,2.605954,2.60577,2.605589,2.60541,2.605233,2.605058,2.604886,2.604715,2.604546,2.604379,2.604215,2.604052,2.603891,2.603731,2.603574,2.603418,2.603264,2.603112,2.602961,2.602813,2.602665,2.60252,2.602376,2.602233,2.602092,2.601952,2.601814,2.601678,2.601543,2.601409,2.601276,2.601145,2.601016,2.600887,2.60076,2.600634,2.60051,2.600387,2.600265,2.600144,2.600024,2.599906,2.599788,2.599672,2.599557,2.599443,2.59933,2.599218,2.599108,2.598998,2.598889,2.598782,2.598675,2.598569,2.598465,2.598361,2.598258,2.598156,2.598055,2.597955,2.597856,2.597758,2.597661,2.597564,2.597468,2.597374,2.59728,2.597186,2.597094,2.597002,2.596912,2.596822,2.596732,2.596644,2.596556,2.596469,2.596383,2.596297,2.596212,2.596128,2.596045,2.595962,2.59588,2.595799,2.595718,2.595638,2.595558,2.595479,2.595401,2.595323,2.595246,2.59517,2.595094,2.595019,2.594945,2.59487,2.594797,2.594724,2.594652,2.59458,2.594509,2.594438,2.594368,2.594298,2.594229,2.594161,2.594092,2.594025,2.593958,2.593891,2.593825,2.593759,2.593694,2.59363,2.593565,2.593502,2.593438,2.593376,2.593313,2.593251,2.59319,2.593129,2.593068,2.593008,2.592948,2.592888,2.592829,2.592771,2.592713,2.592655,2.592598,2.592541,2.592484,2.592428,2.592372,2.592316] , t_99_2 , t_99_2_mean = [] ;
var t_99_1_table = [31.820516,6.964557,4.540703,3.746947,3.364930,3.142668,2.997952,2.896459,2.821438,2.763769,2.718079,2.680998,2.650309,2.624494,2.602480,2.583487,2.566934,2.552380,2.539483,2.527977,2.517648,2.508325,2.499867,2.492159,2.485107,2.478630,2.472660,2.467140,2.462021,2.457262,2.452824,2.448678,2.444794,2.441150,2.437723,2.434494,2.431447,2.428568,2.425841,2.423257,2.420803,2.418470,2.416250,2.414134,2.412116,2.410188,2.408345,2.406581,2.404892,2.403272,2.401718,2.400225,2.398790,2.397410,2.396081,2.394801,2.393568,2.392377,2.391229,2.390119,2.389047,2.388011,2.387008,2.386037,2.385097,2.384186,2.383302,2.382446,2.381615,2.380807,2.380024,2.379262,2.378522,2.377802,2.377102,2.376420,2.375757,2.375111,2.374482,2.373868,2.373270,2.372687,2.372119,2.371564,2.371022,2.370493,2.369977,2.369472,2.368979,2.368497,2.368026,2.367566,2.367115,2.366674,2.366243,2.365821,2.365407,2.365002,2.364606,2.364217,2.363837,2.363464,2.363098,2.362739,2.362388,2.362043,2.361704,2.361372,2.361046,2.360726,2.360412,2.360104,2.359801,2.359504,2.359212,2.358924,2.358642,2.358365,2.358093,2.357825,2.357561,2.357302,2.357047,2.356797,2.356550,2.356307,2.356069,2.355834,2.355602,2.355375,2.355150,2.354930,2.354712,2.354498,2.354287,2.354079,2.353875,2.353673,2.353474,2.353278,2.353085,2.352895,2.352707,2.352522,2.352340,2.352160,2.351983,2.351808,2.351635,2.351465,2.351297,2.351131,2.350967,2.350806,2.350646,2.350489,2.350334,2.350180,2.350029,2.349880,2.349732,2.349586,2.349442,2.349300,2.349160,2.349021,2.348884,2.348749,2.348615,2.348483,2.348352,2.348223,2.348096,2.347970,2.347845,2.347722,2.347600,2.347479,2.347360,2.347243,2.347126,2.347011,2.346897,2.346785,2.346673,2.346563,2.346454,2.346346,2.346240,2.346134,2.346030,2.345926,2.345824,2.345723,2.345623,2.345524,2.345425,2.345328,2.345232,2.345137,2.345043,2.344950,2.344857,2.344766,2.344675,2.344586,2.344497,2.344409,2.344322,2.344236,2.344150,2.344066,2.343982,2.343899,2.343817,2.343735,2.343655,2.343575,2.343496,2.343417,2.343339,2.343262,2.343186,2.343110,2.343035,2.342961,2.342887,2.342814,2.342742,2.342670,2.342599,2.342528,2.342458,2.342389,2.342320,2.342252,2.342185,2.342118,2.342051,2.341985,2.341920,2.341855,2.341791,2.341728,2.341664,2.341602,2.341540,2.341478,2.341417,2.341356,2.341296,2.341236,2.341177,2.341118,2.341060,2.341002,2.340945,2.340888,2.340831,2.340775,2.340720,2.340665,2.340610,2.340556,2.340502,2.340448,2.340395,2.340342,2.340290,2.340238,2.340187,2.340135,2.340085,2.340034,2.339984,2.339934,2.339885,2.339836,2.339788,2.339739,2.339691,2.339644,2.339597,2.339550,2.339503,2.339457,2.339411,2.339365,2.339320,2.339275,2.339230,2.339186,2.339142,2.339098,2.339055,2.339012,2.338969,2.338926,2.338884,2.338842] , t_99_1 , t_99_1_mean = [] ;
var t_95_2_table = [12.706205,4.302653,3.182446,2.776445,2.570582,2.446912,2.364624,2.306004,2.262157,2.228139,2.200985,2.178813,2.160369,2.144787,2.131450,2.119905,2.109816,2.100922,2.093024,2.085963,2.079614,2.073873,2.068658,2.063899,2.059539,2.055529,2.051831,2.048407,2.045230,2.042272,2.039513,2.036933,2.034515,2.032245,2.030108,2.028094,2.026192,2.024394,2.022691,2.021075,2.019541,2.018082,2.016692,2.015368,2.014103,2.012896,2.011741,2.010635,2.009575,2.008559,2.007584,2.006647,2.005746,2.004879,2.004045,2.003241,2.002465,2.001717,2.000995,2.000298,1.999624,1.998972,1.998341,1.997730,1.997138,1.996564,1.996008,1.995469,1.994945,1.994437,1.993943,1.993464,1.992997,1.992543,1.992102,1.991673,1.991254,1.990847,1.990450,1.990063,1.989686,1.989319,1.988960,1.988610,1.988268,1.987934,1.987608,1.987290,1.986979,1.986675,1.986377,1.986086,1.985802,1.985523,1.985251,1.984984,1.984723,1.984467,1.984217,1.983972,1.983731,1.983495,1.983264,1.983038,1.982815,1.982597,1.982383,1.982173,1.981967,1.981765,1.981567,1.981372,1.981180,1.980992,1.980808,1.980626,1.980448,1.980272,1.980100,1.979930,1.979764,1.979600,1.979439,1.979280,1.979124,1.978971,1.978820,1.978671,1.978524,1.978380,1.978239,1.978099,1.977961,1.977826,1.977692,1.977561,1.977431,1.977304,1.977178,1.977054,1.976931,1.976811,1.976692,1.976575,1.976460,1.976346,1.976233,1.976122,1.976013,1.975905,1.975799,1.975694,1.975590,1.975488,1.975387,1.975288,1.975189,1.975092,1.974996,1.974902,1.974808,1.974716,1.974625,1.974535,1.974446,1.974358,1.974271,1.974185,1.974100,1.974017,1.973934,1.973852,1.973771,1.973691,1.973612,1.973534,1.973457,1.973381,1.973305,1.973231,1.973157,1.973084,1.973012,1.972941,1.972870,1.972800,1.972731,1.972663,1.972595,1.972528,1.972462,1.972396,1.972332,1.972268,1.972204,1.972141,1.972079,1.972017,1.971957,1.971896,1.971837,1.971777,1.971719,1.971661,1.971603,1.971547,1.971490,1.971435,1.971379,1.971325,1.971271,1.971217,1.971164,1.971111,1.971059,1.971007,1.970956,1.970906,1.970855,1.970806,1.970756,1.970707,1.970659,1.970611,1.970563,1.970516,1.970470,1.970423,1.970377,1.970332,1.970287,1.970242,1.970198,1.970154,1.970110,1.970067,1.970024,1.969982,1.969939,1.969898,1.969856,1.969815,1.969774,1.969734,1.969694,1.969654,1.969615,1.969576,1.969537,1.969498,1.969460,1.969422,1.969385,1.969348,1.969311,1.969274,1.969237,1.969201,1.969166,1.969130,1.969095,1.969060,1.969025,1.968990,1.968956,1.968922,1.968889,1.968855,1.968822,1.968789,1.968756,1.968724,1.968692,1.968660,1.968628,1.968596,1.968565,1.968534,1.968503,1.968472,1.968442,1.968412,1.968382,1.968352,1.968323,1.968293,1.968264,1.968235,1.968206,1.968178,1.968150,1.968121,1.968093,1.968066,1.968038,1.968011,1.967984,1.967957,1.967930,1.967903] , t_95_2 , t_95_2_mean = [] ;
var t_95_1_table = [6.313752,2.919986,2.353363,2.131847,2.015048,1.943180,1.894579,1.859548,1.833113,1.812461,1.795885,1.782288,1.770933,1.761310,1.753050,1.745884,1.739607,1.734064,1.729133,1.724718,1.720743,1.717144,1.713872,1.710882,1.708141,1.705618,1.703288,1.701131,1.699127,1.697261,1.695519,1.693889,1.692360,1.690924,1.689572,1.688298,1.687094,1.685954,1.684875,1.683851,1.682878,1.681952,1.681071,1.680230,1.679427,1.678660,1.677927,1.677224,1.676551,1.675905,1.675285,1.674689,1.674116,1.673565,1.673034,1.672522,1.672029,1.671553,1.671093,1.670649,1.670219,1.669804,1.669402,1.669013,1.668636,1.668271,1.667916,1.667572,1.667239,1.666914,1.666600,1.666294,1.665996,1.665707,1.665425,1.665151,1.664885,1.664625,1.664371,1.664125,1.663884,1.663649,1.663420,1.663197,1.662978,1.662765,1.662557,1.662354,1.662155,1.661961,1.661771,1.661585,1.661404,1.661226,1.661052,1.660881,1.660715,1.660551,1.660391,1.660234,1.660081,1.659930,1.659782,1.659637,1.659495,1.659356,1.659219,1.659085,1.658953,1.658824,1.658697,1.658573,1.658450,1.658330,1.658212,1.658096,1.657982,1.657870,1.657759,1.657651,1.657544,1.657439,1.657336,1.657235,1.657135,1.657037,1.656940,1.656845,1.656752,1.656659,1.656569,1.656479,1.656391,1.656305,1.656219,1.656135,1.656052,1.655970,1.655890,1.655811,1.655732,1.655655,1.655579,1.655504,1.655430,1.655357,1.655285,1.655215,1.655145,1.655076,1.655007,1.654940,1.654874,1.654808,1.654744,1.654680,1.654617,1.654555,1.654494,1.654433,1.654373,1.654314,1.654256,1.654198,1.654141,1.654085,1.654029,1.653974,1.653920,1.653866,1.653813,1.653761,1.653709,1.653658,1.653607,1.653557,1.653508,1.653459,1.653411,1.653363,1.653316,1.653269,1.653223,1.653177,1.653132,1.653087,1.653043,1.652999,1.652956,1.652913,1.652871,1.652829,1.652787,1.652746,1.652705,1.652665,1.652625,1.652586,1.652547,1.652508,1.652470,1.652432,1.652394,1.652357,1.652321,1.652284,1.652248,1.652212,1.652177,1.652142,1.652107,1.652073,1.652039,1.652005,1.651972,1.651939,1.651906,1.651873,1.651841,1.651809,1.651778,1.651746,1.651715,1.651685,1.651654,1.651624,1.651594,1.651564,1.651535,1.651506,1.651477,1.651448,1.651420,1.651391,1.651364,1.651336,1.651308,1.651281,1.651254,1.651227,1.651201,1.651175,1.651148,1.651123,1.651097,1.651071,1.651046,1.651021,1.650996,1.650971,1.650947,1.650923,1.650899,1.650875,1.650851,1.650828,1.650804,1.650781,1.650758,1.650735,1.650713,1.650690,1.650668,1.650646,1.650624,1.650602,1.650581,1.650559,1.650538,1.650517,1.650496,1.650475,1.650454,1.650434,1.650413,1.650393,1.650373,1.650353,1.650333,1.650314,1.650294,1.650275,1.650256,1.650237,1.650218,1.650199,1.650180,1.650162,1.650143,1.650125,1.650107,1.650089,1.650071,1.650053,1.650035,1.650018,1.650000,1.649983,1.649966,1.649949] , t_95_1 , t_95_1_mean = [] ;
var t_90_2_table = t_95_1_table , t_90_2 , t_90_2_mean = [] ;
var t_90_1_table = [3.077684,1.885618,1.637744,1.533206,1.475884,1.439756,1.414924,1.396815,1.383029,1.372184,1.36343,1.356217,1.350171,1.34503,1.340606,1.336757,1.333379,1.330391,1.327728,1.325341,1.323188,1.321237,1.31946,1.317836,1.316345,1.314972,1.313703,1.312527,1.311434,1.310415,1.309464,1.308573,1.307737,1.306952,1.306212,1.305514,1.304854,1.30423,1.303639,1.303077,1.302543,1.302035,1.301552,1.30109,1.300649,1.300228,1.299825,1.299439,1.299069,1.298714,1.298373,1.298045,1.29773,1.297426,1.297134,1.296853,1.296581,1.296319,1.296066,1.295821,1.295585,1.295356,1.295134,1.29492,1.294712,1.294511,1.294315,1.294126,1.293942,1.293763,1.293589,1.293421,1.293256,1.293097,1.292941,1.29279,1.292643,1.2925,1.29236,1.292224,1.292091,1.291961,1.291835,1.291711,1.291591,1.291473,1.291358,1.291246,1.291136,1.291029,1.290924,1.290821,1.290721,1.290623,1.290527,1.290432,1.29034,1.29025,1.290161,1.290075,1.28999,1.289907,1.289825,1.289745,1.289666,1.289589,1.289514,1.289439,1.289367,1.289295,1.289225,1.289156,1.289088,1.289022,1.288957,1.288892,1.288829,1.288767,1.288706,1.288646,1.288587,1.288529,1.288472,1.288416,1.288361,1.288307,1.288253,1.2882,1.288149,1.288098,1.288047,1.287998,1.287949,1.287901,1.287854,1.287807,1.287762,1.287716,1.287672,1.287628,1.287585,1.287542,1.2875,1.287458,1.287417,1.287377,1.287337,1.287298,1.287259,1.287221,1.287183,1.287146,1.287109,1.287073,1.287037,1.287002,1.286967,1.286933,1.286899,1.286865,1.286832,1.286799,1.286767,1.286735,1.286703,1.286672,1.286641,1.286611,1.286581,1.286551,1.286522,1.286493,1.286464,1.286436,1.286408,1.28638,1.286353,1.286326,1.286299,1.286272,1.286246,1.28622,1.286195,1.286169,1.286144,1.28612,1.286095,1.286071,1.286047,1.286023,1.286,1.285976,1.285953,1.285931,1.285908,1.285886,1.285864,1.285842,1.28582,1.285799,1.285778,1.285757,1.285736,1.285715,1.285695,1.285675,1.285655,1.285635,1.285615,1.285596,1.285577,1.285558,1.285539,1.28552,1.285502,1.285483,1.285465,1.285447,1.285429,1.285411,1.285394,1.285377,1.285359,1.285342,1.285325,1.285309,1.285292,1.285276,1.285259,1.285243,1.285227,1.285211,1.285196,1.28518,1.285164,1.285149,1.285134,1.285119,1.285104,1.285089,1.285074,1.28506,1.285045,1.285031,1.285017,1.285002,1.284988,1.284975,1.284961,1.284947,1.284933,1.28492,1.284907,1.284893,1.28488,1.284867,1.284854,1.284841,1.284829,1.284816,1.284804,1.284791,1.284779,1.284767,1.284754,1.284742,1.28473,1.284718,1.284707,1.284695,1.284683,1.284672,1.28466,1.284649,1.284638,1.284626,1.284615,1.284604,1.284593,1.284582,1.284572,1.284561,1.28455,1.28454,1.284529,1.284519,1.284508,1.284498,1.284488,1.284478,1.284468,1.284458,1.284448,1.284438,1.284428,1.284418,1.284409,1.284399,1.284389,1.28438] , t_90_1 , t_90_1_mean = [] ;

// 置信區間(X²)
var chiSq_99_2_table_L = [7.879439,10.596635,12.838156,14.860259,16.749602,18.547584,20.277740,21.954955,23.589351,25.188180,26.756849,28.299519,29.819471,31.319350,32.801321,34.267187,35.718466,37.156451,38.582257,39.996846,41.401065,42.795655,44.181275,45.558512,46.927890,48.289882,49.644915,50.993376,52.335618,53.671962,55.002704,56.328115,57.648445,58.963926,60.274771,61.581179,62.883335,64.181412,65.475571,66.765962,68.052726,69.335997,70.615900,71.892550,73.166061,74.436535,75.704073,76.968768,78.230708,79.489978,80.746659,82.000826,83.252551,84.501905,85.748952,86.993755,88.236375,89.476870,90.715293,91.951698,93.186135,94.418653,95.649297,96.878113,98.105144,99.330430,100.554011,101.775925,102.996209,104.214899,105.432028,106.647630,107.861736,109.074377,110.285583,111.495383,112.703803,113.910872,115.116615,116.321057,117.524222,118.726134,119.926817,121.126292,122.324581,123.521704,124.717683,125.912536,127.106284,128.298944,129.490534,130.681073,131.870578,133.059065,134.246550,135.433049,136.618578,137.803151,138.986783,140.169489,141.351283,142.532177,143.712185,144.891320,146.069595,147.247022,148.423613,149.599379,150.774332,151.948483,153.121843,154.294423,155.466234,156.637285,157.807586,158.977148,160.145979,161.314089,162.481488,163.648184,164.814186,165.979502,167.144142,168.308113,169.471423,170.634081,171.796093,172.957469,174.118214,175.278337,176.437845,177.596744,178.755042,179.912745,181.069861,182.226395,183.382353,184.537744,185.692571,186.846842,188.000563,189.153738,190.306375,191.458479,192.610055,193.761108,194.911645,196.061670,197.211189,198.360206,199.508727,200.656756,201.804299,202.951360,204.097944,205.244056,206.389699,207.534879,208.679600,209.823866,210.967682,212.111051,213.253978,214.396467,215.538522,216.680147,217.821345,218.962121,220.102479,221.242421,222.381952,223.521075,224.659795,225.798113,226.936035,228.073562,229.210699,230.347449,231.483815,232.619801,233.755409,234.890642,236.025505,237.159999,238.294128,239.427894,240.561302,241.694352,242.827050,243.959396,245.091394,246.223047,247.354357,248.485328,249.615961,250.746259,251.876225,253.005862,254.135171,255.264155,256.392818,257.521160,258.649185,259.776895,260.904292,262.031379,263.158157,264.284629,265.410797,266.536664,267.662231,268.787501,269.912475,271.037157,272.161547,273.285648,274.409462,275.532991,276.656237,277.779201,278.901886,280.024294,281.146426,282.268285,283.389872,284.511188,285.632237,286.753019,287.873536,288.993790,290.113783,291.233517,292.352992,293.472211,294.591176,295.709888,296.828348,297.946559,299.064521,300.182237,301.299707,302.416934,303.533919,304.650663,305.767169,306.883436,307.999468,309.115264,310.230828,311.346159,312.461260,313.576132,314.690776,315.805193,316.919385,318.033354,319.147100,320.260625,321.373930,322.487016,323.599885,324.712538,325.824976,326.937200,328.049212,329.161013,330.272604,331.383985,332.495159,333.606127,334.716889,335.827447,336.937802,338.047954,339.157906,340.267658,341.377212,342.486567,343.595726,344.704690,345.813459,346.922034,348.030418,349.138609,350.246611,351.354423,352.462046,353.569483,354.676732,355.783797,356.890676,357.997373,359.103886,360.210218,361.316369,362.422341,363.528133,364.633748,365.739185,366.844446] ;
var chiSq_99_2_table_R = [0.000039,0.010025,0.071722,0.206989,0.411742,0.675727,0.989256,1.344413,1.734933,2.155856,2.603222,3.073824,3.565035,4.074675,4.600916,5.142205,5.697217,6.264805,6.843971,7.433844,8.033653,8.642716,9.260425,9.886234,10.519652,11.160237,11.807587,12.461336,13.121149,13.786720,14.457767,15.134032,15.815274,16.501272,17.191820,17.886727,18.585812,19.288912,19.995868,20.706535,21.420777,22.138463,22.859474,23.583693,24.311014,25.041334,25.774557,26.510591,27.249349,27.990749,28.734712,29.481164,30.230033,30.981253,31.734757,32.490486,33.248378,34.008379,34.770434,35.534491,36.300501,37.068415,37.838189,38.609778,39.383141,40.158236,40.935024,41.713468,42.493531,43.275180,44.058378,44.843096,45.629300,46.416960,47.206048,47.996534,48.788392,49.581594,50.376116,51.171932,51.969018,52.767350,53.566907,54.367665,55.169604,55.972703,56.776942,57.582301,58.388761,59.196304,60.004912,60.814567,61.625252,62.436952,63.249649,64.063327,64.877973,65.693570,66.510105,67.327563,68.145931,68.965194,69.785340,70.606357,71.428230,72.250949,73.074502,73.898876,74.724061,75.550045,76.376817,77.204368,78.032685,78.861760,79.691583,80.522143,81.353431,82.185438,83.018155,83.851572,84.685682,85.520475,86.355943,87.192079,88.028873,88.866318,89.704407,90.543131,91.382483,92.222457,93.063044,93.904239,94.746033,95.588421,96.431395,97.274949,98.119077,98.963773,99.809029,100.654842,101.501203,102.348108,103.195551,104.043526,104.892027,105.741050,106.590589,107.440638,108.291193,109.142248,109.993799,110.845840,111.698366,112.551374,113.404858,114.258813,115.113236,115.968121,116.823464,117.679262,118.535509,119.392201,120.249336,121.106907,121.964912,122.823346,123.682206,124.541488,125.401187,126.261301,127.121826,127.982757,128.844092,129.705827,130.567959,131.430484,132.293399,133.156700,134.020385,134.884449,135.748891,136.613706,137.478892,138.344446,139.210365,140.076645,140.943284,141.810279,142.677628,143.545326,144.413373,145.281764,146.150497,147.019570,147.888979,148.758723,149.628799,150.499204,151.369936,152.240992,153.112370,153.984067,154.856081,155.728410,156.601052,157.474004,158.347263,159.220829,160.094697,160.968867,161.843337,162.718103,163.593164,164.468518,165.344163,166.220097,167.096317,167.972822,168.849611,169.726680,170.604027,171.481653,172.359553,173.237727,174.116172,174.994887,175.873870,176.753119,177.632633,178.512409,179.392447,180.272743,181.153298,182.034108,182.915173,183.796490,184.678059,185.559877,186.441943,187.324255,188.206812,189.089613,189.972656,190.855938,191.739460,192.623219,193.507214,194.391444,195.275907,196.160601,197.045526,197.930680,198.816061,199.701669,200.587502,201.473558,202.359836,203.246336,204.133055,205.019992,205.907147,206.794518,207.682103,208.569902,209.457913,210.346136,211.234568,212.123208,213.012057,213.901111,214.790371,215.679835,216.569502,217.459371,218.349440,219.239710,220.130177,221.020843,221.911705,222.802762,223.694013,224.585458,225.477095,226.368923,227.260942,228.153149,229.045545,229.938129,230.830898,231.723853,232.616992,233.510315,234.403820,235.297507,236.191375,237.085422,237.979647,238.874051,239.768632,240.663389] ;
var chiSq_99_2 = [] , chiSq_99_2_sd = [] ;
var chiSq_99_1_table_L = [6.634897,9.210340,11.344867,13.276704,15.086272,16.811894,18.475307,20.090235,21.665994,23.209251,24.724970,26.216967,27.688250,29.141238,30.577914,31.999927,33.408664,34.805306,36.190869,37.566235,38.932173,40.289360,41.638398,42.979820,44.314105,45.641683,46.962942,48.278236,49.587884,50.892181,52.191395,53.485772,54.775540,56.060909,57.342073,58.619215,59.892500,61.162087,62.428121,63.690740,64.950071,66.206236,67.459348,68.709513,69.956832,71.201400,72.443307,73.682639,74.919474,76.153891,77.385962,78.615756,79.843338,81.068772,82.292117,83.513430,84.732766,85.950176,87.165711,88.379419,89.591344,90.801532,92.010024,93.216860,94.422079,95.625719,96.827816,98.028403,99.227515,100.425184,101.621441,102.816314,104.009834,105.202028,106.392923,107.582545,108.770919,109.958069,111.144019,112.328793,113.512410,114.694895,115.876266,117.056544,118.235749,119.413900,120.591015,121.767111,122.942207,124.116319,125.289463,126.461656,127.632913,128.803249,129.972679,131.141217,132.308877,133.475672,134.641617,135.806723,136.971004,138.134471,139.297137,140.459013,141.620111,142.780442,143.940016,145.098844,146.256938,147.414305,148.570958,149.726905,150.882155,152.036719,153.190604,154.343821,155.496377,156.648281,157.799541,158.950166,160.100163,161.249540,162.398305,163.546466,164.694028,165.841001,166.987390,168.133203,169.278446,170.423127,171.567251,172.710824,173.853854,174.996347,176.138307,177.279742,178.420656,179.561057,180.700949,181.840337,182.979228,184.117626,185.255537,186.392965,187.529917,188.666396,189.802408,190.937957,192.073048,193.207686,194.341876,195.475620,196.608925,197.741794,198.874232,200.006243,201.137830,202.268999,203.399752,204.530095,205.660030,206.789561,207.918693,209.047428,210.175771,211.303725,212.431294,213.558481,214.685289,215.811722,216.937783,218.063476,219.188803,220.313769,221.438375,222.562625,223.686522,224.810069,225.933269,227.056125,228.178639,229.300816,230.422656,231.544164,232.665341,233.786191,234.906717,236.026920,237.146803,238.266369,239.385621,240.504560,241.623190,242.741512,243.859529,244.977244,246.094658,247.211775,248.328596,249.445123,250.561359,251.677306,252.792966,253.908341,255.023433,256.138244,257.252777,258.367033,259.481015,260.594724,261.708162,262.821332,263.934234,265.046872,266.159246,267.271359,268.383212,269.494808,270.606148,271.717234,272.828067,273.938649,275.048983,276.159069,277.268909,278.378506,279.487859,280.596972,281.705846,282.814482,283.922882,285.031047,286.138979,287.246680,288.354150,289.461392,290.568407,291.675195,292.781760,293.888101,294.994221,296.100121,297.205802,298.311266,299.416514,300.521546,301.626366,302.730973,303.835369,304.939556,306.043534,307.147305,308.250870,309.354231,310.457388,311.560343,312.663097,313.765651,314.868006,315.970164,317.072125,318.173891,319.275462,320.376841,321.478028,322.579023,323.679829,324.780446,325.880876,326.981118,328.081175,329.181048,330.280737,331.380243,332.479568,333.578712,334.677677,335.776463,336.875071,337.973503,339.071759,340.169840,341.267747,342.365481,343.463043,344.560434,345.657655,346.754706,347.851589,348.948304,350.044853,351.141236,352.237453,353.333507,354.429397,355.525124,356.620690,357.716095,358.811340,359.906426] ;
var chiSq_99_1_table_R = [0.000157,0.020101,0.114832,0.297109,0.554298,0.872090,1.239042,1.646497,2.087901,2.558212,3.053484,3.570569,4.106915,4.660425,5.229349,5.812212,6.407760,7.014911,7.632730,8.260398,8.897198,9.542492,10.195716,10.856361,11.523975,12.198147,12.878504,13.564710,14.256455,14.953457,15.655456,16.362216,17.073514,17.789147,18.508926,19.232676,19.960232,20.691442,21.426163,22.164261,22.905611,23.650095,24.397601,25.148025,25.901269,26.657239,27.415847,28.177009,28.940646,29.706683,30.475048,31.245673,32.018493,32.793447,33.570475,34.349522,35.130533,35.913458,36.698246,37.484852,38.273228,39.063333,39.855125,40.648563,41.443609,42.240227,43.038380,43.838035,44.639158,45.441717,46.245683,47.051025,47.857715,48.665725,49.475029,50.285600,51.097415,51.910448,52.724676,53.540077,54.356629,55.174311,55.993101,56.812981,57.633930,58.455930,59.278962,60.103009,60.928054,61.754079,62.581069,63.409007,64.237879,65.067668,65.898361,66.729944,67.562402,68.395722,69.229890,70.064895,70.900723,71.737362,72.574801,73.413027,74.252030,75.091798,75.932320,76.773586,77.615586,78.458310,79.301747,80.145889,80.990725,81.836246,82.682444,83.529310,84.376835,85.225010,86.073828,86.923280,87.773358,88.624055,89.475363,90.327274,91.179782,92.032879,92.886558,93.740813,94.595636,95.451021,96.306961,97.163451,98.020483,98.878052,99.736152,100.594777,101.453921,102.313578,103.173744,104.034411,104.895576,105.757233,106.619376,107.482000,108.345101,109.208673,110.072713,110.937214,111.802172,112.667583,113.533442,114.399745,115.266487,116.133664,117.001272,117.869306,118.737764,119.606639,120.475929,121.345630,122.215737,123.086248,123.957158,124.828463,125.700160,126.572246,127.444717,128.317569,129.190799,130.064404,130.938380,131.812725,132.687434,133.562505,134.437935,135.313720,136.189858,137.066346,137.943180,138.820358,139.697877,140.575734,141.453926,142.332451,143.211305,144.090487,144.969993,145.849821,146.729969,147.610433,148.491212,149.372302,150.253702,151.135409,152.017420,152.899734,153.782348,154.665259,155.548466,156.431966,157.315757,158.199837,159.084204,159.968855,160.853789,161.739004,162.624496,163.510265,164.396309,165.282625,166.169211,167.056066,167.943188,168.830574,169.718224,170.606134,171.494304,172.382731,173.271414,174.160351,175.049540,175.938980,176.828669,177.718604,178.608786,179.499211,180.389878,181.280786,182.171933,183.063318,183.954939,184.846794,185.738882,186.631201,187.523751,188.416529,189.309534,190.202764,191.096219,191.989896,192.883795,193.777914,194.672251,195.566806,196.461577,197.356562,198.251761,199.147171,200.042793,200.938623,201.834663,202.730909,203.627360,204.524017,205.420876,206.317938,207.215201,208.112663,209.010324,209.908183,210.806238,211.704488,212.602932,213.501569,214.400398,215.299418,216.198627,217.098026,217.997611,218.897384,219.797341,220.697484,221.597809,222.498318,223.399007,224.299877,225.200927,226.102155,227.003561,227.905143,228.806901,229.708834,230.610940,231.513220,232.415671,233.318293,234.221086,235.124048,236.027178,236.930476,237.833940,238.737570,239.641365,240.545324,241.449447,242.353732,243.258178,244.162786,245.067553,245.972479] ;
var chiSq_99_1 = [] , chiSq_99_1_sd = [] ;
var chiSq_95_2_table_L = [5.023886,7.377759,9.348404,11.143287,12.832502,14.449375,16.012764,17.534546,19.022768,20.483177,21.920049,23.336664,24.735605,26.118948,27.488393,28.845351,30.191009,31.526378,32.852327,34.169607,35.478876,36.780712,38.075627,39.364077,40.646469,41.923170,43.194511,44.460792,45.722286,46.979242,48.231890,49.480438,50.725080,51.965995,53.203349,54.437294,55.667973,56.895521,58.120060,59.341707,60.560572,61.776756,62.990356,64.201461,65.410159,66.616529,67.820647,69.022586,70.222414,71.420195,72.615992,73.809863,75.001864,76.192048,77.380466,78.567165,79.752192,80.935592,82.117406,83.297675,84.476437,85.653731,86.829591,88.004051,89.177145,90.348904,91.519359,92.688539,93.856471,95.023184,96.188704,97.353055,98.516262,99.678349,100.839338,101.999252,103.158112,104.315938,105.472750,106.628568,107.783410,108.937294,110.090238,111.242259,112.393374,113.543598,114.692947,115.841436,116.989080,118.135893,119.281889,120.427081,121.571483,122.715107,123.857967,125.000073,126.141437,127.282072,128.421989,129.561197,130.699709,131.837533,132.974681,134.111163,135.246987,136.382163,137.516701,138.650610,139.783897,140.916573,142.048644,143.180120,144.311008,145.441316,146.571052,147.700223,148.828836,149.956899,151.084419,152.211403,153.337856,154.463787,155.589201,156.714104,157.838503,158.962404,160.085812,161.208735,162.331176,163.453142,164.574639,165.695672,166.816245,167.936365,169.056036,170.175263,171.294052,172.412406,173.530332,174.647832,175.764913,176.881578,177.997831,179.113678,180.229122,181.344168,182.458819,183.573080,184.686955,185.800447,186.913560,188.026299,189.138666,190.250666,191.362302,192.473577,193.584495,194.695060,195.805275,196.915142,198.024666,199.133850,200.242696,201.351208,202.459389,203.567242,204.674770,205.781976,206.888862,207.995432,209.101688,210.207633,211.313269,212.418601,213.523629,214.628357,215.732787,216.836922,217.940765,219.044317,220.147581,221.250560,222.353255,223.455670,224.557806,225.659666,226.761252,227.862566,228.963611,230.064387,231.164899,232.265147,233.365134,234.464862,235.564333,236.663548,237.762510,238.861221,239.959682,241.057896,242.155863,243.253588,244.351070,245.448311,246.545315,247.642081,248.738613,249.834911,250.930977,252.026814,253.122422,254.217804,255.312960,256.407893,257.502604,258.597095,259.691366,260.785421,261.879259,262.972883,264.066294,265.159494,266.252484,267.345265,268.437839,269.530207,270.622370,271.714330,272.806089,273.897647,274.989006,276.080167,277.171132,278.261901,279.352476,280.442858,281.533049,282.623049,283.712861,284.802484,285.891920,286.981171,288.070237,289.159120,290.247820,291.336340,292.424679,293.512840,294.600822,295.688628,296.776258,297.863714,298.950996,300.038105,301.125043,302.211810,303.298408,304.384837,305.471098,306.557193,307.643122,308.728887,309.814488,310.899926,311.985202,313.070317,314.155272,315.240068,316.324705,317.409185,318.493509,319.577677,320.661690,321.745549,322.829256,323.912809,324.996212,326.079464,327.162566,328.245519,329.328323,330.410981,331.493492,332.575856,333.658076,334.740152,335.822084,336.903873,337.985520,339.067026,340.148391,341.229616,342.310703,343.391650,344.472460,345.553133,346.633670,347.714071,348.794337,349.874469] ;
var chiSq_95_2_table_R = [0.000982,0.050636,0.215795,0.484419,0.831212,1.237344,1.689869,2.179731,2.700389,3.246973,3.815748,4.403789,5.008751,5.628726,6.262138,6.907664,7.564186,8.230746,8.906516,9.590777,10.282898,10.982321,11.688552,12.401150,13.119720,13.843905,14.573383,15.307861,16.047072,16.790772,17.538739,18.290765,19.046662,19.806253,20.569377,21.335882,22.105627,22.878482,23.654325,24.433039,25.214519,25.998662,26.785374,27.574566,28.366152,29.160054,29.956196,30.754506,31.554916,32.357364,33.161786,33.968126,34.776329,35.586340,36.398111,37.211593,38.026741,38.843510,39.661859,40.481748,41.303138,42.125992,42.950275,43.775953,44.602993,45.431363,46.261034,47.091977,47.924163,48.757565,49.592157,50.427915,51.264813,52.102829,52.941940,53.782123,54.623359,55.465625,56.308903,57.153173,57.998417,58.844616,59.691753,60.539811,61.388775,62.238626,63.089351,63.940935,64.793361,65.646618,66.500689,67.355563,68.211225,69.067664,69.924867,70.782822,71.641516,72.500939,73.361080,74.221927,75.083471,75.945700,76.808604,77.672174,78.536401,79.401274,80.266785,81.132924,81.999683,82.867054,83.735028,84.603596,85.472752,86.342487,87.212793,88.083663,88.955090,89.827067,90.699587,91.572642,92.446226,93.320333,94.194956,95.070089,95.945725,96.821860,97.698485,98.575597,99.453189,100.331255,101.209791,102.088790,102.968248,103.848159,104.728519,105.609322,106.490563,107.372237,108.254341,109.136868,110.019816,110.903178,111.786951,112.671131,113.555714,114.440694,115.326068,116.211832,117.097983,117.984515,118.871426,119.758712,120.646368,121.534392,122.422779,123.311526,124.200631,125.090088,125.979895,126.870049,127.760546,128.651384,129.542559,130.434067,131.325906,132.218073,133.110565,134.003379,134.896513,135.789962,136.683725,137.577798,138.472180,139.366867,140.261857,141.157147,142.052734,142.948616,143.844791,144.741256,145.638009,146.535047,147.432368,148.329970,149.227849,150.126005,151.024435,151.923137,152.822108,153.721346,154.620850,155.520616,156.420644,157.320931,158.221475,159.122274,160.023326,160.924630,161.826182,162.727983,163.630028,164.532318,165.434849,166.337620,167.240630,168.143877,169.047358,169.951073,170.855019,171.759195,172.663599,173.568230,174.473085,175.378164,176.283465,177.188987,178.094727,179.000684,179.906857,180.813244,181.719844,182.626656,183.533677,184.440907,185.348344,186.255987,187.163834,188.071884,188.980136,189.888589,190.797240,191.706089,192.615135,193.524375,194.433810,195.343438,196.253257,197.163266,198.073465,198.983851,199.894424,200.805183,201.716126,202.627253,203.538561,204.450051,205.361721,206.273569,207.185595,208.097798,209.010177,209.922730,210.835457,211.748356,212.661426,213.574668,214.488078,215.401657,216.315404,217.229317,218.143396,219.057640,219.972047,220.886617,221.801349,222.716241,223.631294,224.546506,225.461876,226.377403,227.293087,228.208927,229.124921,230.041069,230.957370,231.873823,232.790428,233.707183,234.624088,235.541142,236.458345,237.375694,238.293190,239.210832,240.128619,241.046550,241.964625,242.882842,243.801202,244.719703,245.638344,246.557125,247.476045,248.395104,249.314300,250.233633,251.153103,252.072708,252.992448,253.912323] ;
var chiSq_95_2 = [] , chiSq_95_2_sd = [] ;
var chiSq_95_1_table_L = [3.841459,5.991465,7.814728,9.487729,11.070498,12.591587,14.067140,15.507313,16.918978,18.307038,19.675138,21.026070,22.362032,23.684791,24.995790,26.296228,27.587112,28.869299,30.143527,31.410433,32.670573,33.924438,35.172462,36.415029,37.652484,38.885139,40.113272,41.337138,42.556968,43.772972,44.985343,46.194260,47.399884,48.602367,49.801850,50.998460,52.192320,53.383541,54.572228,55.758479,56.942387,58.124038,59.303512,60.480887,61.656233,62.829620,64.001112,65.170769,66.338649,67.504807,68.669294,69.832160,70.993453,72.153216,73.311493,74.468324,75.623748,76.777803,77.930524,79.081944,80.232098,81.381015,82.528727,83.675261,84.820645,85.964907,87.108072,88.250164,89.391208,90.531225,91.670239,92.808270,93.945340,95.081467,96.216671,97.350970,98.484383,99.616927,100.748619,101.879474,103.009509,104.138738,105.267177,106.394840,107.521741,108.647893,109.773309,110.898003,112.021986,113.145270,114.267868,115.389790,116.511047,117.631651,118.751612,119.870939,120.989644,122.107735,123.225221,124.342113,125.458419,126.574148,127.689308,128.803908,129.917955,131.031458,132.144425,133.256862,134.368777,135.480178,136.591071,137.701464,138.811363,139.920774,141.029704,142.138160,143.246147,144.353672,145.460740,146.567358,147.673530,148.779262,149.884561,150.989430,152.093876,153.197903,154.301516,155.404721,156.507522,157.609923,158.711930,159.813547,160.914778,162.015628,163.116101,164.216201,165.315932,166.415299,167.514305,168.612954,169.711251,170.809198,171.906799,173.004059,174.100981,175.197567,176.293823,177.389750,178.485353,179.580634,180.675597,181.770246,182.864582,183.958610,185.052332,186.145751,187.238870,188.331692,189.424220,190.516457,191.608404,192.700066,193.791445,194.882542,195.973362,197.063906,198.154177,199.244177,200.333909,201.423375,202.512577,203.601519,204.690201,205.778627,206.866798,207.954717,209.042386,210.129807,211.216982,212.303913,213.390602,214.477052,215.563263,216.649239,217.734981,218.820491,219.905770,220.990822,222.075646,223.160247,224.244624,225.328780,226.412716,227.496435,228.579938,229.663226,230.746302,231.829167,232.911822,233.994269,235.076510,236.158546,237.240378,238.322009,239.403439,240.484671,241.565705,242.646544,243.727187,244.807638,245.887897,246.967965,248.047844,249.127536,250.207041,251.286361,252.365498,253.444451,254.523224,255.601816,256.680230,257.758465,258.836525,259.914409,260.992120,262.069657,263.147023,264.224218,265.301243,266.378101,267.454791,268.531314,269.607673,270.683868,271.759900,272.835769,273.911478,274.987027,276.062417,277.137650,278.212725,279.287644,280.362409,281.437019,282.511477,283.585782,284.659936,285.733940,286.807794,287.881501,288.955059,290.028471,291.101737,292.174858,293.247835,294.320669,295.393360,296.465910,297.538319,298.610588,299.682719,300.754710,301.826565,302.898282,303.969864,305.041310,306.112622,307.183800,308.254846,309.325759,310.396541,311.467192,312.537713,313.608105,314.678368,315.748503,316.818512,317.888393,318.958149,320.027780,321.097286,322.166669,323.235928,324.305065,325.374080,326.442974,327.511748,328.580401,329.648936,330.717351,331.785649,332.853829,333.921892,334.989839,336.057670,337.125386,338.192988,339.260476,340.327850,341.395112] ;
var chiSq_95_1_table_R = [0.003932,0.102587,0.351846,0.710723,1.145476,1.635383,2.167350,2.732637,3.325113,3.940299,4.574813,5.226029,5.891864,6.570631,7.260944,7.961646,8.671760,9.390455,10.117013,10.850811,11.591305,12.338015,13.090514,13.848425,14.611408,15.379157,16.151396,16.927875,17.708366,18.492661,19.280569,20.071913,20.866534,21.664281,22.465015,23.268609,24.074943,24.883904,25.695390,26.509303,27.325551,28.144049,28.964717,29.787477,30.612259,31.438995,32.267622,33.098077,33.930306,34.764252,35.599864,36.437093,37.275893,38.116218,38.958027,39.801278,40.645933,41.491954,42.339308,43.187958,44.037874,44.889024,45.741377,46.594905,47.449581,48.305378,49.162270,50.020233,50.879243,51.739278,52.600315,53.462333,54.325312,55.189231,56.054072,56.919817,57.786447,58.653945,59.522294,60.391478,61.261482,62.132291,63.003888,63.876261,64.749396,65.623278,66.497895,67.373234,68.249284,69.126030,70.003463,70.881571,71.760343,72.639768,73.519835,74.400535,75.281858,76.163793,77.046332,77.929465,78.813184,79.697479,80.582343,81.467767,82.353742,83.240262,84.127317,85.014902,85.903008,86.791628,87.680755,88.570382,89.460503,90.351111,91.242200,92.133763,93.025794,93.918287,94.811237,95.704637,96.598482,97.492766,98.387485,99.282632,100.178202,101.074191,101.970593,102.867404,103.764618,104.662231,105.560239,106.458637,107.357420,108.256584,109.156124,110.056038,110.956320,111.856966,112.757973,113.659337,114.561053,115.463118,116.365529,117.268281,118.171372,119.074797,119.978553,120.882637,121.787046,122.691775,123.596823,124.502186,125.407860,126.313843,127.220131,128.126722,129.033613,129.940801,130.848283,131.756057,132.664118,133.572466,134.481097,135.390009,136.299198,137.208663,138.118401,139.028410,139.938687,140.849230,141.760036,142.671103,143.582429,144.494011,145.405848,146.317937,147.230276,148.142863,149.055696,149.968773,150.882091,151.795649,152.709445,153.623476,154.537742,155.452239,156.366967,157.281923,158.197105,159.112512,160.028141,160.943992,161.860062,162.776350,163.692854,164.609572,165.526502,166.443644,167.360995,168.278554,169.196320,170.114290,171.032463,171.950839,172.869414,173.788188,174.707160,175.626327,176.545689,177.465244,178.384991,179.304928,180.225055,181.145368,182.065869,182.986554,183.907423,184.828474,185.749707,186.671120,187.592712,188.514481,189.436426,190.358547,191.280841,192.203309,193.125948,194.048758,194.971737,195.894884,196.818199,197.741680,198.665326,199.589135,200.513108,201.437243,202.361538,203.285994,204.210608,205.135380,206.060309,206.985394,207.910634,208.836028,209.761574,210.687273,211.613123,212.539123,213.465273,214.391571,215.318016,216.244608,217.171346,218.098229,219.025255,219.952425,220.879738,221.807192,222.734786,223.662521,224.590394,225.518406,226.446555,227.374841,228.303263,229.231820,230.160512,231.089337,232.018295,232.947385,233.876607,234.805959,235.735442,236.665053,237.594793,238.524661,239.454656,240.384777,241.315025,242.245397,243.175894,244.106514,245.037258,245.968124,246.899112,247.830221,248.761451,249.692800,250.624269,251.555856,252.487562,253.419385,254.351325,255.283380,256.215552,257.147839,258.080240,259.012755,259.945383,260.878124] ;
var chiSq_95_1 = [] , chiSq_95_1_sd = [] ;
var chiSq_90_2_table_L = chiSq_95_1_table_L ;
var chiSq_90_2_table_R = chiSq_95_1_table_R ;
var chiSq_90_2 = [] , chiSq_90_2_sd = [] ;
var chiSq_90_1_table_L = [2.705543,4.605170,6.251389,7.779440,9.236357,10.644641,12.017037,13.361566,14.683657,15.987179,17.275009,18.549348,19.811929,21.064144,22.307130,23.541829,24.769035,25.989423,27.203571,28.411981,29.615089,30.813282,32.006900,33.196244,34.381587,35.563171,36.741217,37.915923,39.087470,40.256024,41.421736,42.584745,43.745180,44.903158,46.058788,47.212174,48.363408,49.512580,50.659770,51.805057,52.948512,54.090202,55.230192,56.368541,57.505305,58.640537,59.774289,60.906607,62.037537,63.167121,64.295400,65.422413,66.548197,67.672786,68.796214,69.918513,71.039713,72.159844,73.278932,74.397006,75.514089,76.630208,77.745385,78.859642,79.973003,81.085486,82.197113,83.307902,84.417873,85.527043,86.635429,87.743048,88.849916,89.956048,91.061460,92.166166,93.270180,94.373516,95.476186,96.578204,97.679581,98.780329,99.880461,100.979987,102.078918,103.177265,104.275037,105.372246,106.468900,107.565009,108.660581,109.755627,110.850154,111.944171,113.037686,114.130707,115.223242,116.315298,117.406883,118.498004,119.588667,120.678880,121.768650,122.857982,123.946883,125.035359,126.123417,127.211062,128.298300,129.385136,130.471576,131.557626,132.643290,133.728575,134.813484,135.898022,136.982196,138.066008,139.149464,140.232569,141.315326,142.397741,143.479816,144.561557,145.642968,146.724052,147.804813,148.885255,149.965383,151.045199,152.124707,153.203911,154.282814,155.361420,156.439731,157.517752,158.595485,159.672934,160.750102,161.826991,162.903605,163.979946,165.056018,166.131824,167.207366,168.282646,169.357668,170.432435,171.506948,172.581210,173.655225,174.728993,175.802519,176.875803,177.948850,179.021660,180.094236,181.166580,182.238695,183.310583,184.382246,185.453686,186.524904,187.595904,188.666687,189.737255,190.807609,191.877753,192.947688,194.017415,195.086937,196.156255,197.225371,198.294287,199.363004,200.431525,201.499851,202.567983,203.635924,204.703675,205.771236,206.838611,207.905801,208.972806,210.039630,211.106272,212.172734,213.239019,214.305127,215.371060,216.436819,217.502405,218.567821,219.633067,220.698144,221.763054,222.827798,223.892378,224.956794,226.021048,227.085141,228.149074,229.212849,230.276467,231.339928,232.403234,233.466387,234.529386,235.592234,236.654931,237.717479,238.779879,239.842130,240.904236,241.966196,243.028012,244.089685,245.151215,246.212604,247.273852,248.334961,249.395932,250.456765,251.517461,252.578022,253.638448,254.698740,255.758899,256.818926,257.878821,258.938587,259.998222,261.057729,262.117108,263.176360,264.235486,265.294487,266.353362,267.412114,268.470743,269.529249,270.587634,271.645898,272.704042,273.762067,274.819973,275.877761,276.935432,277.992986,279.050425,280.107749,281.164959,282.222054,283.279037,284.335908,285.392667,286.449315,287.505852,288.562280,289.618598,290.674809,291.730911,292.786906,293.842795,294.898577,295.954255,297.009827,298.065295,299.120660,300.175922,301.231081,302.286138,303.341094,304.395949,305.450704,306.505359,307.559915,308.614372,309.668732,310.722993,311.777158,312.831227,313.885199,314.939076,315.992858,317.046545,318.100139,319.153638,320.207045,321.260360,322.313582,323.366713,324.419753,325.472702,326.525561,327.578330,328.631010,329.683602,330.736105,331.788520] ;
var chiSq_90_1_table_R = [0.015791,0.210721,0.584374,1.063623,1.610308,2.204131,2.833107,3.489539,4.168159,4.865182,5.577785,6.303796,7.041505,7.789534,8.546756,9.312236,10.085186,10.864936,11.650910,12.442609,13.239598,14.041493,14.847956,15.658684,16.473408,17.291885,18.113896,18.939242,19.767744,20.599235,21.433565,22.270594,23.110197,23.952253,24.796655,25.643300,26.492094,27.342950,28.195785,29.050523,29.907091,30.765423,31.625454,32.487126,33.350381,34.215167,35.081432,35.949131,36.818217,37.688648,38.560384,39.433385,40.307615,41.183039,42.059623,42.937337,43.816148,44.696029,45.576951,46.458888,47.341815,48.225706,49.110539,49.996290,50.882939,51.770464,52.658846,53.548064,54.438102,55.328940,56.220561,57.112949,58.006088,58.899962,59.794557,60.689857,61.585850,62.482520,63.379856,64.277844,65.176473,66.075730,66.975604,67.876083,68.777157,69.678815,70.581048,71.483844,72.387195,73.291090,74.195522,75.100481,76.005958,76.911945,77.818434,78.725417,79.632886,80.540834,81.449253,82.358136,83.267476,84.177266,85.087501,85.998172,86.909274,87.820801,88.732747,89.645105,90.557870,91.471037,92.384599,93.298553,94.212891,95.127610,96.042703,96.958167,97.873997,98.790187,99.706733,100.623631,101.540877,102.458465,103.376391,104.294653,105.213245,106.132163,107.051404,107.970964,108.890839,109.811025,110.731519,111.652317,112.573416,113.494812,114.416503,115.338484,116.260752,117.183306,118.106140,119.029253,119.952640,120.876301,121.800230,122.724427,123.648887,124.573608,125.498588,126.423823,127.349311,128.275051,129.201038,130.127271,131.053747,131.980463,132.907419,133.834610,134.762036,135.689692,136.617579,137.545692,138.474031,139.402593,140.331376,141.260377,142.189596,143.119029,144.048676,144.978533,145.908600,146.838874,147.769353,148.700037,149.630922,150.562007,151.493291,152.424771,153.356446,154.288315,155.220376,156.152626,157.085065,158.017692,158.950503,159.883499,160.816677,161.750035,162.683574,163.617290,164.551183,165.485251,166.419493,167.353908,168.288493,169.223249,170.158172,171.093263,172.028520,172.963941,173.899526,174.835273,175.771181,176.707248,177.643474,178.579858,179.516397,180.453092,181.389940,182.326941,183.264094,184.201398,185.138851,186.076452,187.014201,187.952097,188.890137,189.828322,190.766650,191.705121,192.643733,193.582485,194.521377,195.460407,196.399575,197.338879,198.278319,199.217894,200.157602,201.097444,202.037418,202.977523,203.917758,204.858123,205.798617,206.739238,207.679987,208.620862,209.561862,210.502987,211.444236,212.385608,213.327102,214.268718,215.210455,216.152311,217.094287,218.036382,218.978594,219.920924,220.863370,221.805931,222.748608,223.691399,224.634304,225.577322,226.520452,227.463693,228.407046,229.350509,230.294082,231.237764,232.181554,233.125452,234.069457,235.013569,235.957787,236.902111,237.846539,238.791071,239.735707,240.680446,241.625287,242.570230,243.515275,244.460420,245.405666,246.351011,247.296456,248.241999,249.187640,250.133379,251.079214,252.025146,252.971174,253.917298,254.863517,255.809830,256.756237,257.702737,258.649331,259.596017,260.542795,261.489664,262.436625,263.383676,264.330817,265.278048,266.225369,267.172778,268.120275,269.067861] ;
var chiSq_90_1 = [] , chiSq_90_1_sd = [] ;


function inputClear()
{
	pop = [] ; // 清空 dataset
	sd_est = -1 ; // 清空 替代標準差

	inputSub() ;
}

function popMinus()
{
	pop.shift();
	pop.pop();
	inputSub();
}

function ctrl_click(id,frequency) // 控制button (行數,頻數)
{
	// alert(typeof id);
	var checker = id.split("_") ;
	// alert(checker);
	if(checker[0] == "ctrl")
	{
		var k = checker[2]*1 ; // 第幾行
		if(checker[1] == "add") // +1
		{
			pop.push(poplist[k][0]);
		}
		else if(checker[1] == "del") // -1
		{
			for(var j=0 ; j<pop.length ; j++)
			{
				if(pop[j] == poplist[k][0])
				{
					pop.splice(j,1);
					break;
				}
			}
		}
		else if(checker[1] == "edit") // 自定
		{
			var f = eval(frequency).toFixed(0) ;
			if(f>=0)
			{
				if(f > poplist[k][1]) // 增加
				{
					for(var n=0 ; n < f - poplist[k][1] ; n++)
					{
						pop.push(poplist[k][0]);
					}
				}
				else if(f < poplist[k][1]) // 減少
				{
					for(var j=0 ; j<pop.length ; j++)
					{
						if(pop[j] == poplist[k][0])
						{
							pop.splice(j,poplist[k][1] - f);
							break;
						}
					}
				}
			}
		}
		inputSub("stay");
	}
}

function popAdd() // 手動加入data
{
	if(inputValue.value.length>0)
	{
		var txt = inputValue.value + "" ;

		// 清理
		txt = txt.replace(/\s+/ig,""); // 清除 空格
		// txt = txt.replace(/[a-z]/ig,""); // 清除 拉丁字母
		
		// 符號轉換
		txt = txt.replace(/;|，|、|；/g,","); // 分隔號
		txt = txt.replace(/：/g,":"); // 60進位號
		txt = txt.replace(/＂/g,'"'); // 60進位號(小數)
		txt = txt.replace(/＋/g,"+"); // 加
		txt = txt.replace(/－/g,"-"); // 減
		txt = txt.replace(/＊/g,"*"); // 乘
		txt = txt.replace(/／/g,"/"); // 除
		txt = txt.replace(/\^|︿/g,"**"); // 冪

		// 數字轉換
		txt = txt.replace(/０/g,"0");
		txt = txt.replace(/１/g,"1");
		txt = txt.replace(/２/g,"2");
		txt = txt.replace(/３/g,"3");
		txt = txt.replace(/４/g,"4");
		txt = txt.replace(/５/g,"5");
		txt = txt.replace(/６/g,"6");
		txt = txt.replace(/７/g,"7");
		txt = txt.replace(/８/g,"8");
		txt = txt.replace(/９/g,"9");
		txt = txt.replace(/。/g,"."); // 小數點

		// 分析分組
		for(var k=0 ; k<txt.length ; k++)
		{
			if(txt.slice(k,k+1) == "[")
			{
				for(var j=k+1 ; j<txt.length ; j++)
				{
					if(txt.slice(j,j+1) == "]")
					{
						// alert( txt.slice(k,j+1) );
						pop.push( txt.slice(k,j+1) );
						txt = txt.slice(0,k) + txt.slice(j+1) ;
						// alert(txt);
						k--;
						break;
					}
				}
			}
		}
		
		// 加到dataset
		pop.push(...txt.split(","));
	}
}

function inputSub(parameter) // 處理&分析 dataset
{
	// 分析參數
	if(typeof parameter == "undefined") var parameters = [] ;
	else var parameters = (parameter+"").split(",") ;

	var stay = 0 ; // 頁面位置停留(不移至最底)
	for(var p = 0 ; p < parameters.length ; p++)
	{
		if(parameters[p] == "stay")
		{
			stay = 1;
			break;
		}
	}

	// 清理非數字元素
	// alert(pop.join("\n"));
	var errorTerms = 0 ; // 記錄有多少 問題項
	var errorTerms_list = [] ; // 記錄錯誤項的內容
	for(var n = 0 ; n < pop.length ; n++)
	{
		try
		{
			pop[n] += "";
			
			// 檢查是否為分組數據
			if(pop[n].slice(0,1) == "[")
			{
				var grouped = 1;
				alert(pop.join("\n"));
			}
			else var grouped = 0;

			// 處理 多於一個小數點 的狀況
			// var array = pop[n].split(".") ;
			// if(array.length>2) pop[n] = array.shift()+"."+array.join("");

			// 處理60進位 ( ...:c:b:a = a + b*60 + c*60^2 + ... )
			var radix_60 = pop[n].split(":");
			if (radix_60.length > 1)
			{
				pop[n] = 0 ;
				while(radix_60.length>0)
				{
					pop[n] += eval(radix_60.shift()) * (60**radix_60.length) ;
				}
			}

			// 處理60進位 小數 ( a"b"c"... = a + b/60 + c/60^2 + ... )
			var radix_60_dec = (pop[n]+"").split('"');
			if (radix_60_dec.length > 1)
			{
				pop[n] = 0 ;
				while(radix_60_dec.length>0)
				{
					pop[n] += eval(radix_60_dec.pop()) / (60**radix_60_dec.length) ;
				}
			}

			pop[n] = eval(pop[n]) ; // 運算
			// pop[n] = floatFix(pop[n]) ; // 處理 多於一個小數點 的狀況
			pop[n] *= 1 ; // 化為數字
			
			// 若本項不是數字，則移除本項
			if( pop[n].length < 1 || !(pop[n]>=0 || pop[n]<0) )
			{
				pop.splice(n,1) ;
				n-- ;
			}
		}
		catch(e) // 移除無法處理的項目
		{
			// alert("錯誤詳情："+e.description);
			errorTerms_list.push(pop.splice(n,1)) ;
			n-- ;
			errorTerms ++ ;
		}
	}

	// 報錯
	if(errorTerms > 0)
	{
		var txt2alert = "輸入有誤！\n已跳過 "+errorTerms+" 個問題項：" ;
		txt2alert += "\n" + errorTerms_list.join("\n") ;
		alert(txt2alert) ;
	}

	pop.sort((a,b)=>a-b); // 排序

	size = pop.length ; // 樣本數
	
	sum = 0 ; // 加總
	for(var k=0 ; k<size ; k++)
	{
		sum += pop[k]*1 ;
	}

	// 期望值 , 算術平均數
	if(size>0)
	{
		mean = sum / size ;
		mean_fix = mean.toFixed(fix_d) ;
	}
	else
	{
		mean = "-" ;
		mean_fix = "-" ;
	}
	
	// 幾何平均數
	if(size>0)
	{
		mean_geo = 1 ;
		for(var k=0 ; k<size ; k++)
		{
			mean_geo *= pop[k]**(1/size) ;
		}
		// mean_geo = mean_geo**(1/size) ;
		if(!(mean_geo>=0||mean_geo<0)) mean_geo = "無法計算" ;
	}
	else mean_geo = "-" ;
	
	// 調和平均數
	if(size>0)
	{
		mean_har = 0 ;
		for(var k=0 ; k<size ; k++)
		{
			mean_har += 1/pop[k] ;
		}
		mean_har = size/mean_har ;
	}
	else mean_har = "-" ;
	
	// 平均差
	if(size>0)
	{	
		var mdSum = 0 ;
		for(var n=0; n<pop.length ; n++)
		{
			mdSum += Math.abs(pop[n]-mean) ;
		}
		md = mdSum/size ; // population or sample
	}
	else md = "-" ;

	// 差方和
	if(size>0)
	{
		dev2sum = 0 ;
		for(var n=0; n<pop.length ; n++)
		{
			dev2sum += (pop[n]-mean)**2 ;
		}
		dev2sum_fix = dev2sum.toFixed(fix_d) ;
	}
	else
	{
		dev2sum = "-" ;
		dev2sum_fix = "-" ;
	}

	// 變異數
	if(size>0)
	{
		if(dataSet_sample.checked) vari = dev2sum / (size-1) ; // sample
		else vari = dev2sum / size ; // population
	}
	else vari = "-" ;
	
	// 標準差
	if(size>0)
	{
		sd = Math.sqrt(vari) ;
		sd_fix = sd.toFixed(fix_d) ;
	}
	else
	{
		sd = "-" ;
		sd_fix = "-" ;
	}

	// 變異係數
	if(size>0)
	{
		cv = sd/mean ;
	}
	else cv = "-" ;
	
	// 標準誤
	if(size>0)
	{
		se = Math.sqrt(vari/size) ;
		se_fix = se.toFixed(fix_d) ;
	}
	else
	{
		se = "-" ;
		se_fix = "-" ;
	}
	
	// 四分位數 ( q1 , median , q3 )
	var L , R , pos ; // 左數列 , 右數列 , 位置
	if(size>0)
	{
		// 中位數
		if(pop.length%2==1)
		{
			pos = (pop.length-1)/2 ;
			median = pop[pos] ;
			L = [...pop.slice(0,pos)] ;
			R = [...pop.slice(pos+1)] ;
		}
		else
		{
			pos = pop.length/2 ;
			median = ( pop[pos-1]*1 + pop[pos]*1 ) / 2 ;
			L = [...pop.slice(0,pos)] ;
			R = [...pop.slice(pos)] ;
		}
		
		// Q1 , Q3
		if(L.length>0)
		{
			if(L.length%2==1)
			{
				pos = (L.length-1)/2 ;
				q1 = L[pos] ;
				q3 = R[pos] ;
			}
			else
			{
				pos = L.length/2 ;
				q1 = ( L[pos-1]*1 + L[pos]*1 ) / 2 ;
				q3 = ( R[pos-1]*1 + R[pos]*1 ) / 2 ;
			}
			
			// 四分平均數
			mean_iq = 0 ;
			for(var k = pos ; k < size - pos ; k++ ) mean_iq += pop[k] ;
			mean_iq /= size - pos*2 ;
		}
		else
		{
			q1 = "-" ;
			q3 = "-" ;
			mean_iq = "-" ;
		}
	}
	else
	{
		median = "-" ;
		q1 = "-" ;
		q3 = "-" ;
		mean_iq = "-" ;
	}
	
	// 中樞紐 mid_hinge
	if(size>0 && (q1>=0||q1<0)) mid_hinge = ( q1 + q3 ) / 2 ;
	else mid_hinge = "-" ;

	// 三均值 mean_mri
	if(size>0 && (q1>=0||q1<0)) mean_mri = ( median*2 + q1 + q3 ) / 4 ;
	else mean_mri = "-" ;

	// 眾數
	if(size>0)
	{
		mode = [] ; // 眾數[元素,數量,平均值]
		var check = [...new Set(pop)] ; // 樣本(不重複)
		var count = [] ; // 記錄樣本出現次數
		for(var n=0 ; n<check.length ; n++)
		{
			count[n] = 0 ;
			for(var m=0 ; m<pop.length ; m++)
			{
				if(pop[m] == check[n]) count[n] ++ ;
			}
			if(n>0)
			{
				if(count[n] > mode[1])
				{
					mode[0] = [check[n]] ; // 元素
					mode[1] = count[n] ; // 數量
				}
				else if(count[n] == mode[1])
				{
					mode[0].push(check[n]) ; // 元素
				}
			}
			else
			{
				mode[0] = [check[0]] ; // 元素
				mode[1] = count[0] ; // 數量
			}
		}
		// 眾數平均值
		mode[2] = 0 ;
		for(var k=0 ; k < mode[0].length ; k ++)
		{
			mode[2] += mode[0][k] ;
		}
		mode[2] /= mode[0].length ;
	}
	else mode = [["-"],0,"-"] ;
	
	// 最小值
	if(pop.length>0) min = pop[0];
	else min= "-" ;
		
	// 最大值
	if(pop.length>0) max = pop[pop.length-1];
	else max= "-" ;
	
	// 中程數
	if(pop.length>0) mid_range = (min + max) / 2 ;
	else mid_range = " - " ;

	// 半距
	if(pop.length>0)
	{
		range_half[0] = median - pop[0] ; // 前半距
		range_half[1] = pop[pop.length-1] - median ; // 後半距
	}
	else range_half = [" - "," - "] ;
	
	// 全距
	if(pop.length>0) range = pop[pop.length-1] - pop[0] ;
	else range = " - " ;
	
	// 全距係數
	if(pop.length>0) range_c = range / ( pop[pop.length-1] + pop[0] ) ;
	else range_c = " - " ;

	// 平均間距
	if(pop.length>1) range_b = range / ( pop.length - 1 ) ;
	else range_b = " - " ;
	
	// 四分位距
	if(pop.length>1) iqr = q3-q1 ;
	else iqr = " - " ;
	
	// 四分位差
	if(pop.length>1) qd = iqr/2 ;
	else qd = " - " ;

	// 置信區間
	if(size>=2)
	{
		// z
		if(sd_est<0) // 母體標準差 未知
		{
			z_99_2 = (2.575829 * se).toFixed(6) ;
			z_99_1 = (2.326348 * se).toFixed(6) ;
			z_95_2 = (1.959964 * se).toFixed(6) ;
			z_95_1 = (1.644854 * se).toFixed(6) ;
			z_90_2 = (1.644854 * se).toFixed(6) ;
			z_90_1 = (1.281552 * se).toFixed(6) ;
		}
		else // 母體標準差 已知
		{
			se_est = sd_est / size**0.5 ; // 母體標準誤
			z_99_2 = (2.575829 * se_est).toFixed(6) ;
			z_99_1 = (2.326348 * se_est).toFixed(6) ;
			z_95_2 = (1.959964 * se_est).toFixed(6) ;
			z_95_1 = (1.644854 * se_est).toFixed(6) ;
			z_90_2 = (1.644854 * se_est).toFixed(6) ;
			z_90_1 = (1.281552 * se_est).toFixed(6) ;
		}
		
		// z 算術平均數
		z_99_2_mean = [(mean - z_99_2*1).toFixed(6) , (mean + z_99_2*1).toFixed(6)] ;
		z_99_1_mean = [(mean - z_99_1*1).toFixed(6) , (mean + z_99_1*1).toFixed(6)] ;
		z_95_2_mean = [(mean - z_95_2*1).toFixed(6) , (mean + z_95_2*1).toFixed(6)] ;
		z_95_1_mean = [(mean - z_95_1*1).toFixed(6) , (mean + z_95_1*1).toFixed(6)] ;
		z_90_2_mean = [(mean - z_90_2*1).toFixed(6) , (mean + z_90_2*1).toFixed(6)] ;
		z_90_1_mean = [(mean - z_90_1*1).toFixed(6) , (mean + z_90_1*1).toFixed(6)] ;

		// t
		if( size-1 <= t_99_2_table.length )
		{
			t_99_2 = (t_99_2_table[size-2] * se).toFixed(6) ;
			t_99_1 = (t_99_1_table[size-2] * se).toFixed(6) ;
			t_95_2 = (t_95_2_table[size-2] * se).toFixed(6) ;
			t_95_1 = (t_95_1_table[size-2] * se).toFixed(6) ;
			t_90_2 = (t_90_2_table[size-2] * se).toFixed(6) ;
			t_90_1 = (t_90_1_table[size-2] * se).toFixed(6) ;

			// t 算術平均數
			t_99_2_mean = [(mean - t_99_2*1).toFixed(6) , (mean + t_99_2*1).toFixed(6)] ;
			t_99_1_mean = [(mean - t_99_1*1).toFixed(6) , (mean + t_99_1*1).toFixed(6)] ;
			t_95_2_mean = [(mean - t_95_2*1).toFixed(6) , (mean + t_95_2*1).toFixed(6)] ;
			t_95_1_mean = [(mean - t_95_1*1).toFixed(6) , (mean + t_95_1*1).toFixed(6)] ;
			t_90_2_mean = [(mean - t_90_2*1).toFixed(6) , (mean + t_90_2*1).toFixed(6)] ;
			t_90_1_mean = [(mean - t_90_1*1).toFixed(6) , (mean + t_90_1*1).toFixed(6)] ;
		}

		// X²
		if( size-1 > chiSq_99_2_table_L.length ) // 超出卡方表,以最高自由度估算
		{
			chiSq_99_2[0] = chiSq_99_2_table_L[chiSq_99_2_table_L.length-1].toFixed(6) ;
			chiSq_99_2[1] = chiSq_99_2_table_R[chiSq_99_2_table_R.length-1].toFixed(6) ;
			chiSq_99_1[0] = chiSq_99_1_table_L[chiSq_99_1_table_L.length-1].toFixed(6) ;
			chiSq_99_1[1] = chiSq_99_1_table_R[chiSq_99_1_table_R.length-1].toFixed(6) ;
			chiSq_95_2[0] = chiSq_95_2_table_L[chiSq_95_2_table_L.length-1].toFixed(6) ;
			chiSq_95_2[1] = chiSq_95_2_table_R[chiSq_95_2_table_R.length-1].toFixed(6) ;
			chiSq_95_1[0] = chiSq_95_1_table_L[chiSq_95_1_table_L.length-1].toFixed(6) ;
			chiSq_95_1[1] = chiSq_95_1_table_R[chiSq_95_1_table_R.length-1].toFixed(6) ;
			chiSq_90_2[0] = chiSq_90_2_table_L[chiSq_90_2_table_L.length-1].toFixed(6) ;
			chiSq_90_2[1] = chiSq_90_2_table_R[chiSq_90_2_table_R.length-1].toFixed(6) ;
			chiSq_90_1[0] = chiSq_90_1_table_L[chiSq_90_1_table_L.length-1].toFixed(6) ;
			chiSq_90_1[1] = chiSq_90_1_table_R[chiSq_90_1_table_R.length-1].toFixed(6) ;
			
			// X² 標準差
			chiSq_99_2_sd[0] = ((vari * chiSq_99_2_table_L.length / chiSq_99_2[0])**0.5).toFixed(6) ;
			chiSq_99_2_sd[1] = ((vari * chiSq_99_2_table_R.length / chiSq_99_2[1])**0.5).toFixed(6) ;
			chiSq_99_1_sd[0] = ((vari * chiSq_99_1_table_L.length / chiSq_99_1[0])**0.5).toFixed(6) ;
			chiSq_99_1_sd[1] = ((vari * chiSq_99_1_table_R.length / chiSq_99_1[1])**0.5).toFixed(6) ;
			chiSq_95_2_sd[0] = ((vari * chiSq_95_2_table_L.length / chiSq_95_2[0])**0.5).toFixed(6) ;
			chiSq_95_2_sd[1] = ((vari * chiSq_95_2_table_R.length / chiSq_95_2[1])**0.5).toFixed(6) ;
			chiSq_95_1_sd[0] = ((vari * chiSq_95_1_table_L.length / chiSq_95_1[0])**0.5).toFixed(6) ;
			chiSq_95_1_sd[1] = ((vari * chiSq_95_1_table_R.length / chiSq_95_1[1])**0.5).toFixed(6) ;
			chiSq_90_2_sd[0] = ((vari * chiSq_90_2_table_L.length / chiSq_90_2[0])**0.5).toFixed(6) ;
			chiSq_90_2_sd[1] = ((vari * chiSq_90_2_table_R.length / chiSq_90_2[1])**0.5).toFixed(6) ;
			chiSq_90_1_sd[0] = ((vari * chiSq_90_1_table_L.length / chiSq_90_1[0])**0.5).toFixed(6) ;
			chiSq_90_1_sd[1] = ((vari * chiSq_90_1_table_R.length / chiSq_90_1[1])**0.5).toFixed(6) ;
		}
		else
		{
			chiSq_99_2[0] = chiSq_99_2_table_L[size-2].toFixed(6) ;
			chiSq_99_2[1] = chiSq_99_2_table_R[size-2].toFixed(6) ;
			chiSq_99_1[0] = chiSq_99_1_table_L[size-2].toFixed(6) ;
			chiSq_99_1[1] = chiSq_99_1_table_R[size-2].toFixed(6) ;
			chiSq_95_2[0] = chiSq_95_2_table_L[size-2].toFixed(6) ;
			chiSq_95_2[1] = chiSq_95_2_table_R[size-2].toFixed(6) ;
			chiSq_95_1[0] = chiSq_95_1_table_L[size-2].toFixed(6) ;
			chiSq_95_1[1] = chiSq_95_1_table_R[size-2].toFixed(6) ;
			chiSq_90_2[0] = chiSq_90_2_table_L[size-2].toFixed(6) ;
			chiSq_90_2[1] = chiSq_90_2_table_R[size-2].toFixed(6) ;
			chiSq_90_1[0] = chiSq_90_1_table_L[size-2].toFixed(6) ;
			chiSq_90_1[1] = chiSq_90_1_table_R[size-2].toFixed(6) ;
			
			// X² 標準差
			chiSq_99_2_sd[0] = ((vari * (size-1) / chiSq_99_2[0])**0.5).toFixed(6) ;
			chiSq_99_2_sd[1] = ((vari * (size-1) / chiSq_99_2[1])**0.5).toFixed(6) ;
			chiSq_99_1_sd[0] = ((vari * (size-1) / chiSq_99_1[0])**0.5).toFixed(6) ;
			chiSq_99_1_sd[1] = ((vari * (size-1) / chiSq_99_1[1])**0.5).toFixed(6) ;
			chiSq_95_2_sd[0] = ((vari * (size-1) / chiSq_95_2[0])**0.5).toFixed(6) ;
			chiSq_95_2_sd[1] = ((vari * (size-1) / chiSq_95_2[1])**0.5).toFixed(6) ;
			chiSq_95_1_sd[0] = ((vari * (size-1) / chiSq_95_1[0])**0.5).toFixed(6) ;
			chiSq_95_1_sd[1] = ((vari * (size-1) / chiSq_95_1[1])**0.5).toFixed(6) ;
			chiSq_90_2_sd[0] = ((vari * (size-1) / chiSq_90_2[0])**0.5).toFixed(6) ;
			chiSq_90_2_sd[1] = ((vari * (size-1) / chiSq_90_2[1])**0.5).toFixed(6) ;
			chiSq_90_1_sd[0] = ((vari * (size-1) / chiSq_90_1[0])**0.5).toFixed(6) ;
			chiSq_90_1_sd[1] = ((vari * (size-1) / chiSq_90_1[1])**0.5).toFixed(6) ;
		}
	}
	/*else
	{
		// z
		z_99_2 = "無法估計" ;
		z_99_1 = "無法估計" ;
		z_95_2 = "無法估計" ;
		z_95_1 = "無法估計" ;
		z_90_2 = "無法估計" ;
		z_90_1 = "無法估計" ;
		
		// z 算術平均數
		z_99_2_mean = ["無法估計"] ;
		z_99_1_mean = ["無法估計"] ;
		z_95_2_mean = ["無法估計"] ;
		z_95_1_mean = ["無法估計"] ;
		z_90_2_mean = ["無法估計"] ;
		z_90_1_mean = ["無法估計"] ;
		
		// t
		t_99_2 = "無法估計" ;
		t_99_1 = "無法估計" ;
		t_95_2 = "無法估計" ;
		t_95_1 = "無法估計" ;
		t_90_2 = "無法估計" ;
		t_90_1 = "無法估計" ;
		
		// t 算術平均數
		t_99_2_mean = ["無法估計"] ;
		t_99_1_mean = ["無法估計"] ;
		t_95_2_mean = ["無法估計"] ;
		t_95_1_mean = ["無法估計"] ;
		t_90_2_mean = ["無法估計"] ;
		t_90_1_mean = ["無法估計"] ;
		
		// X²
		chiSq_99_2 = ["無法估計"] ;
		chiSq_99_1 = ["無法估計"] ;
		chiSq_95_2 = ["無法估計"] ;
		chiSq_95_1 = ["無法估計"] ;
		chiSq_90_2 = ["無法估計"] ;
		chiSq_90_1 = ["無法估計"] ;
		
		// X² 標準差
		chiSq_99_2_sd = ["無法估計"] ;
		chiSq_99_1_sd = ["無法估計"] ;
		chiSq_95_2_sd = ["無法估計"] ;
		chiSq_95_1_sd = ["無法估計"] ;
		chiSq_90_2_sd = ["無法估計"] ;
		chiSq_90_1_sd = ["無法估計"] ;
	}*/
	
	// 轉成以頻數表示
	poplist = [] ; // [ 0:數據 , 1:頻數 , 2:累積頻數 , 3:離差 ] 
	var poplist_match ;
	for(var k = 0 ; k<pop.length ; k++)
	{
		poplist_match = 0;
		for(var j = 0 ; j<poplist.length ; j++)
		{
			if(pop[k] == poplist[j][0]) // 已有
			{
				poplist[j][1] ++ ;
				poplist[j][2] ++ ;
				poplist_match ++ ;
				break;
			}
		}
		if(!poplist_match) // 新加
		{
			if(poplist.length>=1) 
			{
				poplist.push([pop[k],1,poplist[poplist.length-1][2]+1,pop[k]-mean]);
			}
			else
			{
				poplist.push([pop[k],1,1,pop[k]-mean]);
			}
		}
	}
	// alert(poplist.join("\n"));
	
	// 單次機率估計(算術平均數比例)
	if(size>0)
	{
		firstHit_mean = size / sum ;
	}
	else firstHit_mean = "-" ;
	
	// 單次機率估計(中位數比例)
	if(size>0)
	{
		firstHit_median = 1/median ;
	}
	else firstHit_median = "-" ;
	
	// 單次機率估計(眾數比例)
	if(size>0)
	{
		//if(mode[0].length == 1)
		firstHit_mode = 1/mode[2] ;
		// else firstHit_mode = "眾數不唯一" ;
	}
	else firstHit_mode = "-" ;

	// 單次機率估計(幾何平均數比例)
	if(size>0)
	{
		if(mean_geo>=0||mean_geo<0)
		{
			firstHit_mean_geo = 1 ;
			for(var k = 0 ; k< poplist.length ; k ++)
			{
				firstHit_mean_geo /= poplist[k][0]**(poplist[k][1]/size) ;
			}
		}
		else firstHit_mean_geo = "無法估計" ;
	}
	else firstHit_mean_geo = "-" ;
	
	
	// 單次機率估計(調和平均數比例)
	if(size>0)
	{
		firstHit_mean_har = 0 ;
		for(var k = 0 ; k< poplist.length ; k ++)
		{
			firstHit_mean_har += poplist[k][1]/poplist[k][0] ;
		}
		firstHit_mean_har /= size ;
	}
	else firstHit_mean_har = "-" ;

	// 表格輸出 - 頭部
	var txt2htm = "<p>"+(dataSet_sample.checked ? "樣本數據 ( Sample" : "母體數據 ( Population") + " Data Set )</p>" + '<table id="dataTable" border="1px" cellspacing="1px" cellpadding="5px" style="margin-top: -12px; background-color: #FFFFFF; text-align: center; color: #000000">';
	txt2htm += '<thead><tr>';
	txt2htm += '<th>\
	<input type="button" value="v" onClick="portal_input.focus();" />\
	控制項\
	<input type="button" value="w" onClick="inputValue.focus();inputValue.select();" />\
	</th>';
	txt2htm += '<th>x<br />數據</th>';
	txt2htm += '<th>y<br />頻數</th>';
	txt2htm += '<th>&#931;y<br />累積頻數</th>';
	txt2htm += '<th>y/'+(dataSet_sample.checked?'n':'N')+'<br />比例</th>';
	txt2htm += '<th>(&#931;y)/'+(dataSet_sample.checked?'n':'N')+'<br />累積比例</th>';
	txt2htm += '<th>xy<br />加權</th>';
	txt2htm += '<th>'+(dataSet_sample.checked?'x-x&#772;':'x-&mu;')+'<br />離差</th>';
	txt2htm += '<th>z-score<br />標準分</th>';
	txt2htm += '<th>Sampling z<br />抽樣標準分</th>';
	txt2htm += '<th>Proportion SE<br />比例標準誤</th>';
	txt2htm += '<th>95% 2尾 z<br />比例置信區間</th>';
	// txt2htm += '<th>'+(dataSet_sample.checked?'(x-x&#772;)':'(x-&mu;)')+'<sup>2</sup><br />離差平方</th>';
	txt2htm += '</tr></thead><tbody>';

	// 表格輸出 - 軀幹
	for(var k = 0 ; k<poplist.length ; k++)
	{
		// 累積比例
		var PobiSum = (poplist[k][2]/size*100).toFixed(2) ;
		
		// 控制
		txt2htm += '<tr>\
		<td><input id="ctrl_edit_'+k+'" type="button" value="修改頻數" onClick="ctrl_click(this.id,prompt(\'頻數更改為：\'));" />\
		<input id="ctrl_del_'+k+'" type="button" value="-1" onClick="ctrl_click(this.id);" />\
		<input id="ctrl_add_'+k+'" type="button" value="+1" onClick="ctrl_click(this.id);" /></td>';
		
		// 數據(x)
		txt2htm += (poplist[k][0]==median?'<td style="background-color: #00AF3F;">':
		poplist[k][1]==mode[1]?'<td style="background-color: #FF3F00;">':'<td>')+separ(poplist[k][0])+'</td>';
		
		// 頻數(y)
		txt2htm += (poplist[k][1]==mode[1]?'<td style="background-color: #FF3F00;">':'<td>')+poplist[k][1]+'</td>';
		
		// 累積頻數
		txt2htm += '<td>'+poplist[k][2]+'</td>';
		
		// 比例
		var prop = poplist[k][1]/size ;
		txt2htm += (poplist[k][1]==mode[1]?'<td style="background-color: #FF3F00;">':'<td>')+(prop*100).toFixed(2)+'%</td>';
		
		// 累積比例
		txt2htm += (PobiSum>75?'<td style="background-color: #545454;color: #DFDFDF;">':
		PobiSum>50?'<td style="background-color: #7F7F7F;color: #DFDFDF;">':
		PobiSum>25?'<td style="background-color: #AAAAAA;">':
		'<td style="background-color: #D5D5D5;">')+PobiSum+'%</td>';
		
		// 加權(xy)
		txt2htm += '<td>'+poplist[k][0]*poplist[k][1]+'</td>';
		
		// 離差
		txt2htm += '<td>'+(poplist[k][3]).toFixed(fix_d)+'</td>';
		
		// 標準分
		txt2htm += '<td>'+(sd>0 ? ((poplist[k][0]-mean)/sd).toFixed(fix_d) : ' - ')+'</td>';

		// 抽樣標準分
		txt2htm += '<td>'+(se>0 ? ((poplist[k][0]-mean)/se).toFixed(fix_d) : ' - ')+'</td>';
		
		// 比例標準誤 (比例SE)
		var prop_se = (prop * (1-prop) / size)**0.5 ;
		txt2htm += '<td>'+(prop_se*100).toFixed(fix_d)+'%</td>';
		
		// 比例置信區間 (95% 2尾 z)
		var prop_est = [prop - prop_se * 1.959964] ;
		prop_est[1] = [prop + prop_se * 1.959964] ;
		if(prop_est[0]<0) prop_est[0] = 0 ; // 修正左界
		if(prop_est[1]>1) prop_est[1] = 1 ; // 修正右界
		txt2htm += '<td>'+(prop_est[0]*100).toFixed(2)+'% , ' ;
		txt2htm += (prop_est[1]*100).toFixed(2)+'%</td>' ;
		
		// 離差平方
		// txt2htm += '<td>'+(poplist[k][3]**2).toFixed(fix_d)+'</td>';
		
		txt2htm += '</tr>';
	}

	// 表格輸出 - 尾部
	txt2htm += '<tr>';
	txt2htm += '<td>\
	<a href="#DisplayAreaPop"><input type="button" value="^" /></a>\
	<input id="portal_input" type="button" value="v 其他控制項 v" \
	onClick="inputValue.focus();inputValue.select();" /></td>';
	txt2htm += '<td>Range<br />= '+range+'</td>';
	txt2htm += '<td></td>';
	txt2htm += '<td>'+(dataSet_sample.checked?'n':'N')+'<br />= '+size+'</td>';
	txt2htm += '<td></td>';
	txt2htm += '<td></td>';
	txt2htm += '<td>&#931;xy<br />= '+sum+'</td>';
	txt2htm += '<td>'+(dataSet_sample.checked?'x&#772;':'&mu;')+'<br />= '+mean_fix+'</td>';
	txt2htm += '<td>'+(dataSet_sample.checked?'s':'&sigma;')+'<br />= '+(sd>=0?sd_fix:' - ')+'</td>';
	txt2htm += '<td>'+(dataSet_sample.checked?'s':'&sigma;')+'/&#8730;n<br />= '+(se>=0?se_fix:' - ')+'</td>';
	txt2htm += '<td>';
	txt2htm += '<td>';
	// txt2htm += '<td>&#931;'+(dataSet_sample.checked?'(x-x&#772;)':'(x-&mu;)')+'<sup>2</sup>y<br />= '+dev2sum_fix+'</td>';
	txt2htm += '</tr>';

	// 詳細參數輸出
	txt2htm +='</tbody><tbody></tbody></table>';
	DisplayAreaPop.innerHTML = txt2htm ;
	// DisplayAreaPop.innerHTML += pop.join(" , ") + "<br />" ;

	DisplayArea.innerHTML = "數據量 ( N / n / Total Frequency / Data Size )：" + size + "<br />" ;
	DisplayArea.innerHTML += "加總 ( Sum )：" + sum + "<br />" ;

	// 集中趨勢
	DisplayArea.innerHTML += "<br />< 集中趨勢 >" ;
	help_cenTen = "反映數據的集中狀況，或可理解為長遠回報。\n\n" ;
	help_cenTen += "每個數據都對「算術平均數」有貢獻。\n" ;
	help_cenTen += "好處是根據力度強；壞處是易受極端值影響。\n\n" ;
	help_cenTen += "「中位數」以數據大小順序為基準，故不易受極端值影響。\n" ;
	help_cenTen += "可是對於集中於兩端的數據，不能表達其集中性。\n\n" ;
	help_cenTen += "「眾數」是出現得最多的數字，有利於表達具有明確集中處的數據。";
	help_cenTen += "然而對於較平均的分布，不是很好的參考。" ;
	DisplayArea.innerHTML += ' <input type="button" value="?" onClick="alert(help_cenTen);"/><br />' ;
	DisplayArea.innerHTML += "期望值 / 算術平均數 ( &mu; / x&#772; / EV / Mean )：" + mean + "<br />" ;
	DisplayArea.innerHTML += "<span style='color: #00AF3F;'>中位數 ( Median )</span>："+median+"<br />" ;
	DisplayArea.innerHTML += "<span style='color: #FF3F00;'>眾數 ( Mode )</span>：" ;
	if((mode[1]==1 && mode[0].length>10)) // 太多時不顯示眾數
	{
		DisplayArea.innerHTML += "..." ;
	}
	else
	{
		DisplayArea.innerHTML += mode[0].join(" , ") ;
	}
	DisplayArea.innerHTML += " (各有 " + mode[1] + " 個)<br />" ;
	DisplayArea.innerHTML += "眾數平均值 ( Mean of Mode )：" + mode[2] + "<br />" ;
	DisplayArea.innerHTML += "四分平均數 ( Interquartile Mean )：" + mean_iq + "<br />" ;
	DisplayArea.innerHTML += "三均值 ( TM / Mrimean )：" + mean_mri + "<br />" ;
	DisplayArea.innerHTML += "中樞紐 ( Midhinge )：" + mid_hinge + "<br />" ;
	DisplayArea.innerHTML += "中程數 ( Midrange )：" + mid_range + "<br />" ;
	DisplayArea.innerHTML += "幾何平均數 ( Geometric mean )：" + mean_geo + "<br />" ;
	DisplayArea.innerHTML += "調和平均數 ( Harmonic mean )：" + mean_har + "<br />" ;

	// 單次機率估計
	DisplayArea.innerHTML += "<br />< 單次機率估計 >" ;
	help_firstHit = "x 表示成功間距。即是，自上次成功後，接下來第 x 次試驗成功。\n\n";
	help_firstHit += "這些數值用以估計單次的成功機率(p)。\n" ;
	help_firstHit += "其估計值為集中趨勢的倒數。" ;
	DisplayArea.innerHTML += ' <input type="button" value="?" onClick="alert(help_firstHit);"/><br />' ;
	DisplayArea.innerHTML += "算術平均數比例："+firstHit_mean+"<br />" ;
	DisplayArea.innerHTML += "中位數比例："+firstHit_median+"<br />" ;
	DisplayArea.innerHTML += "眾數比例："+firstHit_mode+"<br />" ;
	DisplayArea.innerHTML += "幾何平均數比例："+firstHit_mean_geo+"<br />" ;
	DisplayArea.innerHTML += "調和平均數比例："+firstHit_mean_har+"<br />" ;

	// 分散程度
	DisplayArea.innerHTML += "<br />< 分散程度 >" ;
	help_disper = "反映數據的分散狀況，或可理解為風險。\n\n" ;
	help_disper += "分散值 或 範圍 越小，代表越集中。\n" ;
	help_disper += "分散值 或 範圍 越大，代表越分散；\n" ;
	help_disper += "(分散值 或 範圍差 最小為0，沒有最大限制。)\n" ;
	DisplayArea.innerHTML += ' <input type="button" value="?" onClick="alert(help_disper);"/><br />' ;
	DisplayArea.innerHTML += "邊界 ( Min , Max )："+min+" , "+max+"<br />" ;
	DisplayArea.innerHTML += "半距 ( Half-Range )："+range_half.join(' , ')+"<br />" ;
	DisplayArea.innerHTML += "全距 ( Range )：" + range + "<br />" ;
	DisplayArea.innerHTML += "全距係數 ( Coefficient of Range )：" + range_c + "<br />" ;
	DisplayArea.innerHTML += "平均間距：" + range_b + "<br />" ;
	DisplayArea.innerHTML += "四分位數 ( Q1 , <span style='color: #00AF3F;'>Q2</span> , Q3 )："+q1+" , "+median+" , "+q3+"<br />" ;
	DisplayArea.innerHTML += "四分位距 ( IQR )："+iqr+"<br />" ;
	DisplayArea.innerHTML += "四分位差 ( QD )："+qd+"<br />" ;
	DisplayArea.innerHTML += "平均差 ( MAD )：" + md + "<br />" ;
	if(dataSet_sample.checked && size==1)
	{
		DisplayArea.innerHTML += "標準差 ( &sigma; / s / SD )：" + "無法估計" + "<br />" ;
		DisplayArea.innerHTML += "變異數 ( &sigma;<sup>2</sup> / s<sup>2</sup> / Var )：" + "無法估計" + "<br />" ;
		DisplayArea.innerHTML += "變異係數 ( CV )：" + "無法估計" + "<br />" ;
	}
	else
	{
		DisplayArea.innerHTML += "標準差 ( &sigma; / s / SD )：" + sd + "<br />" ;
		DisplayArea.innerHTML += "變異數 ( &sigma;<sup>2</sup> / s<sup>2</sup> / Var )：" + vari + "<br />" ;
		DisplayArea.innerHTML += "變異係數 ( CV )：" + cv + "<br />" ;
	}
	
	// 抽樣分布
	DisplayArea.innerHTML += "<br />< 抽樣分布 >" ;
	help_samDist = "用於抽樣估計或抽樣檢驗。\n\n" ;
	help_samDist += "標準誤(Standard Error)，作為抽樣分布的標準差。\n\n" ;
	
	help_samDist += "抽樣估計：\n" ;
	help_samDist += "以「樣本參數」作為「母體參數」的「估計點」，\n" ;
	help_samDist += "兩側張開一定範圍作為「估計區間」，有某機率(置信度)包含「母體參數」。\n\n" ;
	
	help_samDist += "抽樣檢驗：\n" ;
	help_samDist += "以「母體參數」作為「樣本參數」的「估計點」，\n";
	help_samDist += "兩側張開一定範圍作為「估計區間」，「樣本參數」有某機率(置信度)落在這區間內。\n" ;
	help_samDist += "抽取樣本，檢驗「樣本參數」是否落在該區間內。\n\n" ;
	
	help_samDist += "若參數在區間外，代表有顯著性差異。\n\n" ;
	
	help_samDist += "當知道「母體標準差」時，使用 z (標準常態分布)；\n" ;
	help_samDist += "當不知道「母體標準差」時，以「樣本標準差」取代，使用 t 修正。\n" ;
	help_samDist += "樣本數越大，t 與 z 越接近。" ;
	DisplayArea.innerHTML += ' <input type="button" value="?" onClick="alert(help_samDist);"/><br />' ;
	if(dataSet_sample.checked && size==1)
	{
		DisplayArea.innerHTML += "標準誤 ( SE )：" + "無法估計" + "<br />" ;
	}
	else
	{
		DisplayArea.innerHTML += "標準誤 ( SE )：" + se + "<br />" ;
	}
	
	if(sd_est >= 0)
	{
		DisplayArea.innerHTML += "替代標準誤：" + se_est ;
		DisplayArea.innerHTML += ' <input type="button" value="清除" onClick="sd_switch(-1);" /><br />' ;
	}

	if(size>=2)
	{
		DisplayArea.innerHTML += "<br />" ;
		
		// z
		DisplayArea.innerHTML += '<input type="button" value="輸入/更改母體標準差以作估計" onClick="sd_switch();" /><br />' ;
		DisplayArea.innerHTML += "99% 2尾：z &#8776; &#177; 2.575829 , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_99_2+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+z_99_2_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "99% 1尾：z &#8776; &#177; 2.326348 , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_99_1+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+z_99_1_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "95% 2尾：z &#8776; &#177; 1.959964 , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_95_2+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+z_95_2_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "95% 1尾：z &#8776; &#177; 1.644854 , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_95_1+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+z_95_1_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "90% 2尾：z &#8776; &#177; 1.644854 , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_90_2+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+z_90_2_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "90% 1尾：z &#8776; &#177; 1.281552 , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_90_1+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+z_90_1_mean.join(" , ")+")<br />" ;

		// t
		if( size-1 <= t_99_2_table.length )
		{
		DisplayArea.innerHTML += "<br />" ;
		DisplayArea.innerHTML += "99% 2尾：t &#8776; &#177; "+t_99_2_table[size-2].toFixed(6)+" , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_99_2+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+t_99_2_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "99% 1尾：t &#8776; &#177; "+t_99_1_table[size-2].toFixed(6)+" , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_99_1+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+t_99_1_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "95% 2尾：t &#8776; &#177; "+t_95_2_table[size-2].toFixed(6)+" , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_95_2+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+t_95_2_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "95% 1尾：t &#8776; &#177; "+t_95_1_table[size-2].toFixed(6)+" , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_95_1+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+t_95_1_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "90% 2尾：t &#8776; &#177; "+t_90_2_table[size-2].toFixed(6)+" , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_90_2+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+t_90_2_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "90% 1尾：t &#8776; &#177; "+t_90_1_table[size-2].toFixed(6)+" , " ;
		DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_90_1+" , " ;
		DisplayArea.innerHTML += "平均值 &#8776; ("+t_90_1_mean.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "<br />" ;
		}
		else
		{
			DisplayArea.innerHTML += "樣本數足夠大，z 與 t 差不多。<br />" ;
		}

		// X²
		if( size-1 > chiSq_99_2_table_L.length )
		{
			DisplayArea.innerHTML += "<br />以自由度(df) "+chiSq_99_2_table_L.length+" 進行估計：<br />" ;
		}
		DisplayArea.innerHTML += "99% 2尾：X&#178; &#8776; ("+chiSq_99_2.join(" , ")+") , " ;
		DisplayArea.innerHTML += "標準差 &#8776; ("+chiSq_99_2_sd.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "99% 1尾：X&#178; &#8776; ("+chiSq_99_1.join(" , ")+") , " ;
		DisplayArea.innerHTML += "標準差 &#8776; ("+chiSq_99_1_sd.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "95% 2尾：X&#178; &#8776; ("+chiSq_95_2.join(" , ")+") , " ;
		DisplayArea.innerHTML += "標準差 &#8776; ("+chiSq_95_2_sd.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "95% 1尾：X&#178; &#8776; ("+chiSq_95_1.join(" , ")+") , " ;
		DisplayArea.innerHTML += "標準差 &#8776; ("+chiSq_95_1_sd.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "90% 2尾：X&#178; &#8776; ("+chiSq_90_2.join(" , ")+") , " ;
		DisplayArea.innerHTML += "標準差 &#8776; ("+chiSq_90_2_sd.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "90% 1尾：X&#178; &#8776; ("+chiSq_90_1.join(" , ")+") , " ;
		DisplayArea.innerHTML += "標準差 &#8776; ("+chiSq_90_1_sd.join(" , ")+")<br />" ;
		DisplayArea.innerHTML += "<br />" ;
	}
	else DisplayArea.innerHTML += "至少 2 個數據才能估計。<br />" ;

	DisplayArea.innerHTML += "<br />< 模型偏離度 ><br />" ;
	DisplayArea.innerHTML += "均勻分布"+"(未寫)"+"<br />" ;
	DisplayArea.innerHTML += "常態分布"+"(未寫)"+"<br />" ;
	DisplayArea.innerHTML += "帕松分布"+"(未寫)"+"<br />" ;
	DisplayArea.innerHTML += "二項分布"+"(未寫)"+"<br />" ;
	
	if(stay == 0) window.scrollTo(0,document.body.scrollHeight) ; // 滾到最底
}

function sd_switch(cls)
{
	if (cls == -1)
	{
		sd_est = -1 ; // 清空替代標準差
	}
	else
	{
		var input = prompt("請輸入替代的標準差。") ;
		if (input >= 0 && input.length>0) sd_est = input ;
		else alert("輸入無效。");
	}
	inputSub("stay");
}

function inputRandom(input,numSet)
{
	var array = input.split(","); // [最少,最大,個數,出現該數即停止]
	if(array[0]*1>array[1]*1) // 修正範圍
	{
		var buf = array[0] ;
		array[0] = array[1] ;
		array[1] = buf ;
	}

	var RandomNumber ; // 準備產生的隨機數 (未轉換)
	var change = x => eval(inputChange.value + "") ; // 使用者自定的轉換函數 f(x)
	for(var n = 0 ; n < array[2]*1 ; n++)
	{
		// 判斷 整數or實數，產生相應的隨機數
		if(numSet=="int") RandomNumber = Math.floor(Math.random()*(array[1]-array[0]+1)+array[0]*1);
		else RandomNumber = Math.random()*(array[1]-array[0])+array[0]*1;
		
		var output = change(RandomNumber) ; // 經使用者自定函數轉換

		pop.push(output); // 輸出
		
		if(output == array[3]) break ; // 出現特定數字,停止.
	}
	inputSub("stay");
}

function randomDelete(max)
{
	var pos ;
	if(max >= pop.length) pop = [] ; // 全部清空
	else
	{
		for(var n = 0 ; n < max ; n ++)
		{
			pos = Math.floor(Math.random()*pop.length) ; // 隨機決定位置
			pop.splice(pos,1); // 移除
		}
	}
	inputSub(); // 更新統計資料
}

function inputKey()
{
	if(event.keyCode==13)
	{
		popAdd();
		inputSub('stay');
	}
}

function linearCut(parts) // 平均分段
{
	var n = parseInt(parts);
	if(n>0)
	{
		var min = pop[0] ;
		var max = pop[pop.length-1] ;
		var space = range/n ;
		pop = [min,max] ;
			
		for(var i = 1 ; i < n ; i ++ )
		{
			pop.push(min+space*i);
		}
		inputSub() ;
	}
	else alert("請輸入正整數。");
}

function changeEachData() // 改變每個數據
{
	var input = inputChangeEachData.value ;
	if(confirm("是否根據下式改變現有的每個數據？\nf(x)="+input))
	{
		var f = x => eval(input) ; // 函數式
		for(var k = 0 ; k < size ; k++ )
		{
			pop[k] = f(pop[k]) ; // 變換
		}
		inputSub();
	}
}

function grouping(groupRange) // 分組
{
	var r = groupRange * 1;
	if(r>0)
	{
		var group1st = Math.floor(pop[0]/r); // 第一組
		var groupLast = Math.floor(pop[pop.length-1]/r); // 最後一組
		/*
		for(var k = group1st ; k <= groupLast ; k++)
		{
			
		}
		*/
	}
	else alert("請輸入正數。");

}

function addDist_geo(p,times) // 幾何分布
{
	try
	{
		p = eval(p) ;
		times = eval(times) ;
	}
	catch(e){}

	if(p>=0 && p<=1 && times>0)
	{
		alert("幾何分布\np = "+(p*1)+"\nq = "+(1-p)+"\n產生數據量 = "+times);
		p *= 1 ; times *= 1 ;
		
		for(var k = 0 ; k>=0 ; k ++ )
		{
			f = (1-p)**k * p ;
			f *= times ;
			f = f.toFixed(0) ;
			
			if(f>0)
			{
				for(var j=0 ; j<f ; j++)
				{
					pop.push(k+1);
				}
			}
			else break ;
		}
		inputSub();
	}
	else alert("輸入無效。");
}

function addDist_bin(p,n,times) // 二項分布
{
	try
	{
		p = eval(p) ;
		n = eval(n) ;
		times = eval(times) ;
	}
	catch(e){}
	
	if(n>=0 && p>=0 && p<=1 && times>0)
	{
		alert("二項分布\np = "+(p*1)+"\nq = "+(1-p)+"\nn = "+n+"\nnp = "+n*p+"\nnq = "+n*(1-p)+"\n產生數據量 = "+times);
		p *= 1 ; n *= 1 ; times *= 1 ;
		var mu = n*p ;

		for(var k = 0 ; k >= 0 ; k ++)
		{
			// 平均值 -k格
			var x = mu.toFixed(0)*1-k ;
			if(x>=0)
			{
				var fL = 1 ;
				for(var i = 0 ; i < x ; i++)
				{
					fL *= p*(n-i)/(x-i) ; // nCx * p^x
					if(i<n-x) fL *= (1-p) ; // * q^(n-x)
				}
				for(var i = 0 ; i < n-2*x ; i ++) // 補剩餘的 q
				{
					fL *= (1-p) ;
				}
				fL *= times ;
				fL = fL.toFixed(0) ;
				if(fL>0)
				{
					for(var j = 0 ; j<fL ; j ++)
					{
						pop.push(x);
					}
				}
			}
			else var fL = 0 ;
			
			// 平均值 +k格
			if(k>0)
			{
				x = mu.toFixed(0)*1+k ;
				if(x<=n)
				{
					var fR = 1 ;
					for(var i = 0 ; i < x ; i++)
					{
						fR *= p*(n-i)/(x-i) ; // nCx * p^x
						if(i<n-x) fR *= (1-p) ; // * q^(n-x)
					}
					for(var i = 0 ; i < n-2*x ; i ++) // 補剩餘的 q
					{
						fR *= (1-p) ;
					}
					fR *= times ;
					fR = fR.toFixed(0) ;
					if(fR>0)
					{
						for(var j = 0 ; j<fR ; j ++)
						{
							pop.push(x);
						}
					}
				}	
				else var fR=0 ;
			}
			else var fR=0 ;

			if(fL+fR<=0) break;
		}
		inputSub();
	}
	else alert("輸入無效。");
}

function addDist_ps(mu,times) // 帕松分布
{
	try
	{
		mu = eval(mu) ;
		times = eval(times) ;
	}
	catch(e){}
	
	if( mu>0 && times>0 )
	{
		alert("帕松分布\n平均值 = "+mu+"\n產生數據量 = "+times);
		mu *= 1 ; times *= 1 ;

		for(var k = 0 ; k>=0 ; k++) // 平均值 ±k
		{
			// 平均值 -k格
			var x = mu.toFixed(0)*1-k ;
			if(x>=0)
			{
				// e^(-mu) * mu^x/x! * times
				var fL = Math.exp(-mu) ;
				for(var i=1 ; i<=x ; i++)
				{
					fL *= mu/i ;
				}
				fL *= times ;
				fL = fL.toFixed(0) ;

				if(fL>0)
				{
					for(var j = 0 ; j<fL ; j ++)
					{
						pop.push(x);
					}
				}
			}
			else var fL = 0 ;
			
			// alert("k="+k+"\n\nx="+x+"\nfL="+fL);
			
			// 平均值 +k格
			if(k>0)
			{
				x = mu.toFixed(0)*1+k ;
				
				// e^(-mu) * mu^x/x! * times
				var fR = Math.exp(-mu) ;
				for(var i=1 ; i<=x ; i++)
				{
					fR *= mu/i ;
				}
				fR *= times ;
				fR = fR.toFixed(0) ;
				
				if(fR>0)
				{
					for(var j = 0 ; j<fR ; j ++)
					{
						pop.push(x);
					}
				}
			}
			else var fR=0 ;

			// alert("k="+k+"\n\nx="+x+"\nfR="+fR);
			
			if(fL+fR<=0) break;
		}
		inputSub();
	}
	else alert("輸入無效。");
}

function addDist_norm(mu,sigma,times) // 常態分布
{
	try
	{
		mu = eval(mu) ;
		sigma = eval(sigma) ;
		times = eval(times) ;
	}
	catch(e){}
	
	if( (mu>=0 || mu<0) && sigma>0 && times>0 )
	{
		alert("常態分布\n平均值 = "+mu+"\n標準差 = "+sigma+"\n產生數據量 = "+times);
		mu *= 1 ; sigma *= 1 ; times *= 1 ;
		
		for(var k = 0 ; k>=0 ; k++) // 平均值 ±k
		{
			// 平均值 -k格
			var x = mu.toFixed(0)*1-k ;
			var fL = Math.exp(- (((x-mu)/sigma)**2) /2)/(sigma*Math.sqrt(2*Math.PI)) * times ;
			fL = fL.toFixed(0) ;
			if(fL>0)
			{
				for(var j = 0 ; j<fL ; j ++)
				{
					pop.push(x);
				}
			}
			
			// 平均值 +k格
			if(k>0)
			{
				x = mu.toFixed(0)*1+k ;
				var fR = Math.exp(- (((x-mu)/sigma)**2) /2)/(sigma*Math.sqrt(2*Math.PI)) * times ;
				fR = fR.toFixed(0) ;
				if(fR>0)
				{
					for(var j = 0 ; j<fR ; j ++)
					{
						pop.push(x);
					}
				}
			}
			else var fR=0 ;

			if(fL+fR<=0) break;
		}
		inputSub();
	}
	else alert("輸入無效。");
}

function exportData() // 導出數據
{
	export_area.innerHTML = '<textarea id="exportBox" cols="80%" rows="20" >'+pop+'</textarea>' ;
	exportBox.focus();
	exportBox.select();
}
help_exportData = "另可框選表格，直接複製到 Excel 或 Word。" ;

</script>

<center>
<div id="DisplayAreaPop" class="pop"></div><br />
<div id="DisplayArea" class="info"></div>
<br /><br />
<table border="1px" cellspacing="3px" cellpadding="8px" style="text-align: center; background-color: #FFF; color: #000;">
<tr><td style="background-color: #AAA;">
<form>
	<span onClick="dataSet_population.checked='checked';inputSub('stay');">
		<input type="radio" name="dataSet" id="dataSet_population" value="population">母體</input>
	</span>
	<span onClick="dataSet_sample.checked='checked';inputSub('stay');">
		<input type="radio" name="dataSet" id="dataSet_sample" value="sample" checked >樣本</input>
	</span>
</form>
<a href="#DisplayAreaPop"><input type="button" value="^^ 表格頂部 ^^" /></a>
<input type="button" value="^ 表格底部 ^" onClick="portal_input.focus();" />
<a href="#DisplayArea"><input type="button" value="^ 詳細數值 ^" /></a>
</td></tr>
<tr><td style="background-color: #5A0;">
< 加入 >
</td></tr>
<tr><td style="background-color: #5A0;">
<input type="button" value="清空輸入框" onClick="inputValue.value='';" />
<input type="button" value="e" onClick="inputValue.value+=',2.718281828459045';" />
<input type="button" value="pi" onClick="inputValue.value+=',3.141592653589793';" />
<input id="inputValue" type="text" value="" size="60" onKeyPress="inputKey();" />
<input type="button" value="加入" onClick="popAdd();inputSub('stay');" />
<br />
<input type="button" value="加入 幾何分布(...)" onClick="addDist_geo(prompt('請輸入單次成功機率(p)。'),prompt('請輸入欲產生的數據量'));" />
<input type="button" value="加入 二項分布(...)" onClick="addDist_bin(prompt('請輸入單次成功機率(p)。'),prompt('請輸入試驗次數(n)。'),prompt('請輸入欲產生的數據量'));" />
<input type="button" value="加入 帕松分布(...)" onClick="addDist_ps(prompt('請輸入平均值。'),prompt('請輸入欲產生的數據量'));" />
<input type="button" value="加入 常態分布(...)" onClick="addDist_norm(prompt('請輸入平均值。'),prompt('請輸入標準差。'),prompt('請輸入欲產生的數據量'));" />
</td></tr>
<tr><td style="background-color: #5A0;">
隨機數(最少 , 最大 , 個數 , 目標數字)：
<input id="inputRange" type="text" value="0,1,1000" size="30" />
<input type="button" value="加入整數" onClick="inputRandom(inputRange.value,'int');" />
<input type="button" value="加入實數" onClick="inputRandom(inputRange.value,'real');" />
<br />
<input type="button" value="二項試驗" onClick="inputRange.value='0,1,1000';" />
<input type="button" value="考試" onClick="inputRange.value='0,100,40';" />
<input type="button" value="擲骰子" onClick="inputRange.value='1,6,5';" />
<input type="button" value="撲克牌" onClick="inputRange.value='1,13,13';" />
<br />
轉換函數：f(x) = 
<input id="inputChange" type="text" value="x" size="30" />
<br />
<input type="button" value="緩衝" onClick="inputChange.value='x';" />
<input type="button" value="雙倍" onClick="inputChange.value='x*2';" />
<input type="button" value="平方" onClick="inputChange.value='x**2';" />
<input type="button" value="立方" onClick="inputChange.value='x**3';" />
<br />
<input type="button" value="對數" onClick="inputChange.value='Math.log(x)';" />
<input type="button" value="負對數" onClick="inputChange.value='-Math.log(x)';" />
<input type="button" value="開方" onClick="inputChange.value='x**0.5';" />
<br />
<input type="button" value="早熟" onClick="inputChange.value='(2*x**0.5-x)';" />
<input type="button" value="慢熱" onClick="inputChange.value='(2*(1-(1-x)**0.5)-x)';" />
</td></tr>
<tr><td style="background-color: #AA0;">
< 修改 >
</td></tr>
<tr><td style="background-color: #AA0;">
f(x) = <input id="inputChangeEachData" type="text" value="x/60" size="30" />
<input type="button" value="改變每個數據" onClick="changeEachData();" />
<br />
平移：
<input type="button" value="由 0 開始" onClick="inputChangeEachData.value='x-min';" />
<input type="button" value="由 1 開始" onClick="inputChangeEachData.value='x-min+1';" />
<input type="button" value="平均值 -> 0" onClick="inputChangeEachData.value='x-mean';" />
<input type="button" value="中位值 -> 0" onClick="inputChangeEachData.value='x-median';" />
<br />
線性縮放：
<input type="button" value="60倍" onClick="inputChangeEachData.value='x*60';" />
<input type="button" value="除以60" onClick="inputChangeEachData.value='x/60';" />
<input type="button" value="100倍" onClick="inputChangeEachData.value='x*100';" />
<input type="button" value="除以100" onClick="inputChangeEachData.value='x/100';" />
<input type="button" value="反數" onClick="inputChangeEachData.value='-x';" />
<input type="button" value="標準差 -> 1" onClick="inputChangeEachData.value='x/sd';" />
<br />
縮放&平移：
<input type="button" value="0 ~ 1" onClick="inputChangeEachData.value='(x-min)/range';" />
<input type="button" value="-1 ~ 1" onClick="inputChangeEachData.value='(x-min)/range*2-1';" />
<input type="button" value="0 ~ 100" onClick="inputChangeEachData.value='(x-min)/range*100';" />
<input type="button" value="標準化" onClick="inputChangeEachData.value='(x-mean)/sd';" />
<br />
非線性縮放：
<input type="button" value="倒數" onClick="inputChangeEachData.value='1/x';" />
<input type="button" value="平方" onClick="inputChangeEachData.value='x**2';" />
<input type="button" value="開方" onClick="inputChangeEachData.value='x**0.5';" />
<input type="button" value="Ln" onClick="inputChangeEachData.value='Math.log(Math.abs(x))';" />
<input type="button" value="Exp" onClick="inputChangeEachData.value='Math.exp(x)';" />
</td></tr>
<tr><td style="background-color: #AA0;">
<input type="button" value="平均分段" onClick="linearCut(prompt('分多少段？'));" />
<input type="button" value="分組(未實裝)" onClick="grouping(prompt('每組的間距？'));" />
</td></tr>
<tr><td style="background-color: #A50;">
< 移除 >
</td></tr>
<tr><td style="background-color: #A50;">
隨機移除多少個數據：
<input id="inputDel" type="text" value="10" size="15" />
<input type="button" value="隨機移除" onClick="randomDelete(inputDel.value);" />
<br />
<input type="button" value="移除首尾項" onClick="popMinus();" />
<input type="button" value="全部清空" onClick="inputClear();" />
</td></tr>
<tr><td style="background-color: #AAA;">
<input type="button" value="導出數據" onClick="exportData();" />
<input type="button" value="?" onClick="alert(help_exportData);" />
<br />
<div id="export_area" ></div>
</td></tr>
</table>

<br /><br /><br />
</center>
</body>
</html>



<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>無限對決</title>
    <style>
        :root {
            --primary: #667eea; --secondary: #764ba2; --success: #48bb78;
            --danger: #f56565; --info: #4299e1; --warning: #9f7aea; --gray: #718096;
        }
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Microsoft JhengHei', sans-serif;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            min-height: 100vh; color: #333;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; color: white; margin-bottom: 0px; padding: 0px; }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
        .nav-buttons { display: flex; justify-content: center; gap: 20px; margin-bottom: 15px; }
        .btn {
            padding: 12px 30px; border: none; border-radius: 25px; font-size: 16px;
            font-weight: bold; cursor: pointer; transition: all 0.3s;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .btn:hover { transform: translateY(-2px); box-shadow: 0 6px 12px rgba(0,0,0,0.2); }
        .btn:disabled { opacity: 0.5; cursor: not-allowed; }
        .btn-nav { background: white; color: #333; }
        .btn-nav.active { background: #4a5568; color: white; }
        .btn-primary { background: var(--success); color: white; }
        .btn-info { background: var(--info); color: white; }
        .btn-warning { background: var(--warning); color: white; }
        .btn-danger { background: var(--danger); color: white; }
        .btn-gray { background: var(--gray); color: white; }
        .page { display: none; animation: fadeIn 0.5s; }
        .page.active { display: block; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        .card { background: white; border-radius: 20px; padding: 30px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }
        .form-group { margin-bottom: 20px; }
        .form-group label { display: block; font-weight: bold; margin-bottom: 5px; }
        .form-control {
            width: 100%; padding: 10px; border: 2px solid #e2e8f0;
            border-radius: 10px; font-size: 16px;
        }
        .vs-container { display: grid; grid-template-columns: 1fr auto 1fr; gap: 30px; align-items: center; margin-bottom: 30px; }
        .option-card {
			background: #f7fafc; border-radius: 15px; padding: 20px; text-align: center;
			transition: all 0.3s;
			position: relative; /* 添加相对定位，使score-change能相对于它定位 */
			min-height: 200px; /* 确保有足够的最小高度 */
		}
        .option-card:hover { transform: scale(1.05); background: #edf2f7; box-shadow: 0 10px 25px rgba(0,0,0,0.15); }
        .option-title { font-size: 1.5em; font-weight: bold; margin-bottom: 15px; color: #2d3748; }
        .video-container {
            width: 100%; aspect-ratio: 16/9; background: #000; border-radius: 10px;
            overflow: hidden; margin-bottom: 15px; position: relative;
        }
        .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; }
        .reload-btn, .invalid-btn {
            position: absolute; top: 10px; background: rgba(255,255,255,0.9);
            border: none; border-radius: 50%; cursor: pointer; z-index: 10; transition: all 0.3s;
        }
        .reload-btn { right: 10px; width: 35px; height: 35px; display: flex; align-items: center; justify-content: center; }
        .reload-btn:hover { background: white; transform: rotate(180deg); }
        .invalid-btn { left: 10px; padding: 5px 10px; border-radius: 15px; font-size: 12px; }
        .invalid-btn.active { background: var(--danger); color: white; }
        .vs-text { font-size: 3em; font-weight: bold; color: #e53e3e; text-shadow: 2px 2px 4px rgba(0,0,0,0.1); }
        .item-stats { background: rgba(255,255,255,0.95); border-radius: 10px; padding: 10px; margin-top: 10px; font-size: 0.9em; }
        .score-change {
			margin-top: 10px; font-size: 1.5em; font-weight: bold; opacity: 0;
			animation: scoreFloat 2s ease-out;
			position: absolute; /* 改为绝对定位 */
			bottom: 10px; /* 距离底部10px */
			left: 0;
			right: 0;
			text-align: center;
			z-index: 5;
		}
        .score-change.positive { color: var(--success); }
        .score-change.negative { color: var(--danger); }
        @keyframes scoreFloat { 0% { opacity: 1; transform: translateY(0); } 100% { opacity: 0; transform: translateY(30px); } }
        .vote-slider-container {
            background: linear-gradient(90deg, var(--success) 0%, #f7fafc 50%, var(--danger) 100%);
            border-radius: 50px; padding: 5px; margin: 30px auto; max-width: 600px;
            position: relative; /* 新增：為分數動畫定位 */
        }
        .vote-slider {
            width: 100%; height: 60px; -webkit-appearance: none; appearance: none;
            background: transparent; outline: none; cursor: pointer;
        }
        .vote-slider::-webkit-slider-thumb {
            -webkit-appearance: none; width: 50px; height: 50px; background: white;
            cursor: pointer; border-radius: 50%; box-shadow: 0 4px 10px rgba(0,0,0,0.3);
        }
        .flex-center { display: flex; justify-content: center; gap: 20px; margin: 30px auto; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 20px; }
        .stat-card {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white; border-radius: 15px; padding: 20px; text-align: center;
        }
        .stat-value { font-size: 2.5em; font-weight: bold; margin-bottom: 10px; }
        .list-item {
            background: #f7fafc; border-radius: 10px; padding: 15px; margin-bottom: 10px;
            display: flex; justify-content: space-between; align-items: center;
        }
        .list-item.editing { background: #e6fffa; border: 2px solid var(--info); }
        .item-info { flex: 1; display: flex; gap: 15px; align-items: center; }
        .item-preview { width: 160px; height: 90px; background: #000; border-radius: 5px; overflow: hidden; position: relative; flex-shrink: 0; }
        .item-preview iframe { width: 100%; height: 100%; border: none; }
        .pagination { display: flex; gap: 5px; align-items: center; justify-content: center; }
        .hidden { display: none !important; }
        .invalid-link { color: var(--danger) !important; text-decoration: line-through; }
        .filter-controls { display: flex; gap: 10px; align-items: center; }
        .checkbox-container { display: flex; align-items: center; gap: 5px; }
        .toggle-btn { 
            padding: 8px 16px; border: 2px solid var(--gray); border-radius: 20px; 
            background: white; color: var(--gray); cursor: pointer; transition: all 0.3s;
        }
        .toggle-btn.active { 
            background: var(--danger); color: white; border-color: var(--danger);
        }
        .game-settings-row {
            display: flex; gap: 20px; align-items: center; justify-content: center; flex-wrap: wrap; margin-bottom: 30px;
        }
        .game-settings-row .form-group {
            margin-bottom: 0;
        }
        .game-settings-row label {
            margin-right: 5px;
        }
        .mood-buttons {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 10px;
            flex-wrap: wrap;
        }
        .mood-btn {
            font-size: 1.5em;
            background: none;
            border: 2px solid #e2e8f0;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .mood-btn.active {
            background: var(--primary);
            border-color: var(--primary);
            transform: scale(1.1);
        }
        .mood-display {
            display: flex;
            gap: 5px;
            margin-right: 10px;
        }
        .mood-filter-btn {
            font-size: 1.2em;
            background: none;
            border: 2px solid #e2e8f0;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            cursor: pointer;
            transition: all 0.3s;
        }
		.mood-filter-buttons {
			display: flex;
			gap: 5px;
			flex-wrap: nowrap;
		}
        .mood-filter-btn.active {
            background: var(--primary);
            border-color: var(--primary);
            transform: scale(1.1);
        }
        .mood-filter-container {
            display: flex;
            gap: 5px;
            align-items: center;
            flex-wrap: nowrap; /* 統計頁心情按鈕一行顯示 */
            padding: 5px 0;
        }
        .mood-filter-row {
            display: flex;
            gap: 5px;
            width: 100%;
            justify-content: center;
        }
        .clear-invalid-btn {
            background: var(--warning) !important;
            color: white !important;
        }
        /* 投票頁心情篩選區域樣式 */
        .voting-mood-filter-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 15px;
        }
        .voting-mood-filter-buttons {
            display: flex;
            gap: 5px;
            flex-wrap: wrap;
            justify-content: center;
        }
        .voting-keyword-filter {
            display: flex;
            align-items: center;
            gap: 10px;
            position: relative;
        }
        .clear-filter-btn {
            position: absolute;
            right: 10px;
            background: none;
            border: none;
            font-size: 1.2em;
            cursor: pointer;
            color: var(--gray);
            transition: all 0.3s;
        }
        .clear-filter-btn:hover {
            color: var(--danger);
            transform: scale(1.1);
        }
        /* 設定頁項目編輯心情按鈕樣式 */
        .edit-mood-buttons {
            display: flex;
            gap: 5px;
            margin-bottom: 10px;
            flex-wrap: wrap;
        }
        .edit-mood-btn {
            font-size: 1.2em;
            background: none;
            border: 2px solid #e2e8f0;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .edit-mood-btn.active {
            background: var(--primary);
            border-color: var(--primary);
            transform: scale(1.1);
        }
        /* 設定頁項目列表中的心情按鈕樣式 */
        .item-mood-buttons {
            display: flex;
            gap: 5px;
            margin-bottom: 10px;
            flex-wrap: wrap;
        }
        .item-mood-btn {
            font-size: 1.2em;
            background: none;
            border: 2px solid #e2e8f0;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .item-mood-btn.active {
            background: var(--primary);
            border-color: var(--primary);
            transform: scale(1.1);
        }
        /* 當前影片URL樣式 */
        .current-video-url {
            font-size: 0.8em;
            color: var(--gray);
            margin-top: 5px;
            word-break: break-all;
            max-height: 60px;
            overflow-y: auto;
            background: rgba(0,0,0,0.05);
            padding: 5px;
            border-radius: 5px;
        }
        /* 新增：投票滑桿旁的分數動畫樣式 */
        .slider-score-change {
            position: absolute;
            top: -40px;
            font-size: 1.8em;
            font-weight: bold;
            opacity: 0;
            z-index: 10;
            pointer-events: none;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        .slider-score-change.positive { color: var(--success); }
        .slider-score-change.negative { color: var(--danger); }
        .slider-score-change.left { 
            left: 10%; 
            animation: scoreFloatLeft 2s ease-out;
        }
        .slider-score-change.right { 
            right: 10%; 
            animation: scoreFloatRight 2s ease-out;
        }
		.slider-score-change.zero { color: var(--gray); }
        @keyframes scoreFloatLeft { 
            0% { opacity: 1; transform: translateX(0); } 
            100% { opacity: 0; transform: translateX(-50px); } 
        }
        @keyframes scoreFloatRight { 
            0% { opacity: 1; transform: translateX(0); } 
            100% { opacity: 0; transform: translateX(50px); } 
        }
        /* 新增：心情邏輯下拉選單樣式 */
        .mood-logic-select {
            padding: 5px 10px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 14px;
            background: white;
            cursor: pointer;
        }
        .mood-logic-select:focus {
            outline: none;
            border-color: var(--primary);
        }
        /* 新增：設定頁表單行樣式 */
        .form-row {
            display: flex;
            align-items: flex-end;
            gap: 15px;
            margin-bottom: 20px;
        }
        .form-row .form-group {
            margin-bottom: 0;
            flex: 1;
        }
        .items-management-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header"><h1>🔥 無限對決 🔥</h1></div>
        <div class="nav-buttons">
            <button class="btn btn-nav" onclick="showPage('settings')">⚙️設定</button>
            <button class="btn btn-nav active" onclick="showPage('voting')">🗳️投票</button>
            <button class="btn btn-nav" onclick="showPage('stats')">📊統計</button>
        </div>

        <div id="voting" class="page active">
            <div class="card">
                <div class="game-settings-row">
                    <div class="form-group">
                        <label for="gameSelect">選擇遊戲：</label>
                        <select id="gameSelect" class="form-control" style="width: auto; display: inline-block;" onchange="updateGameSettings()">
                            <option value="">請選擇遊戲</option>
                        </select>
                    </div>
                    <div id="gameSettings" style="display: flex; gap: 20px; align-items: center;">
                        <div class="form-group">
                            <label for="extractMode">抽取模式：</label>
                            <select id="extractMode" class="form-control" style="width: auto; display: inline-block;">
								<option value="maxError">最大誤差</option>
								<option value="leastVoted">最少票次</option>
								<option value="weakest">名次最低</option>
								<option value="lowestWinRate">勝率最低</option>
                                <option value="middle">名次中段</option>
								<option value="nearAverage">近平均分</option>
								<option value="middleWinRate">勝率中段</option>
								<option value="strongest">名次最高</option>
								<option value="highestWinRate">勝率最高</option>
								<option value="uniform">均勻隨機</option>
                                <option value="newest">最近加入</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <!-- 心情篩選按鈕放在關鍵字篩選上方 -->
                            <div class="voting-mood-filter-container">
                                <div style="display: flex; align-items: center; gap: 10px; justify-content: center;">
                                    <select id="votingMoodLogic" class="mood-logic-select" onchange="updateItemCountMax()">
                                        <option value="and">和</option>
                                        <option value="or">或</option>
                                        <option value="not">非</option>
                                    </select>
                                    <div class="voting-mood-filter-buttons" id="votingMoodFilter"></div>
                                </div>
                                <div class="voting-keyword-filter">
                                    <input type="text" id="keywordFilter" class="form-control" style="width: 280px; padding-right: 35px;" placeholder="以關鍵字篩選..." oninput="updateItemCountMax()" onkeydown="handleKeywordFilterKeydown(event)">
                                    <button type="button" class="clear-filter-btn" onclick="clearVotingFilters()">❌</button>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="itemCount">參賽項目數：</label>
                            <input type="number" id="itemCount" min="4" value="0" class="form-control" style="width: 120px; display: inline-block;">
                            <button class="btn btn-danger" onclick="setMaxItems()" style="margin-left: 5px;">全部</button>
                        </div>
                        <div class="form-group">
                            <label>&nbsp;</label>
                            <button class="btn btn-primary" onclick="startGame()">開始</button>
                        </div>
                    </div>
                </div>

                <div id="votingArea" class="hidden">
                    <div class="vs-container">
                        <div class="option-card" id="option1Card" onmouseenter="handleVideoHover(1)">
                            <div class="option-title" id="option1Title">選項 1</div>
                            <div class="video-container" id="video1Container"></div>
                            <div class="mood-buttons" id="mood1Buttons"></div>
                            <div class="item-stats hidden" id="stats1"></div>
                            <div class="score-change" id="scoreChange1"></div>
                        </div>
                        <div style="text-align: center;">
                            <button class="btn btn-info" onclick="reloadBothVideos()" style="margin-bottom: 10px;">🔄</button>
                            <div class="vs-text">VS</div>
                            <button id="toggleStatsButton" class="btn btn-info" onclick="toggleStats()">👁️</button>
                        </div>
                        <div class="option-card" id="option2Card" onmouseenter="handleVideoHover(2)">
                            <div class="option-title" id="option2Title">選項 2</div>
                            <div class="video-container" id="video2Container"></div>
                            <div class="mood-buttons" id="mood2Buttons"></div>
                            <div class="item-stats hidden" id="stats2"></div>
                            <div class="score-change" id="scoreChange2"></div>
                        </div>
                    </div>

                    <div class="vote-slider-container">
                        <div id="sliderScoreChangeLeft" class="slider-score-change"></div>
                        <div id="sliderScoreChangeRight" class="slider-score-change"></div>
                        <input type="range" class="vote-slider" id="voteSlider" min="0" max="100" value="50">
                    </div>
                    <div class="flex-center">
                        <button class="btn btn-primary" onclick="voteExtreme(0)">最左</button>
                        <button class="btn btn-gray" onclick="submitTie()">平手</button>
                        <button class="btn btn-danger" onclick="voteExtreme(100)">最右</button>
                    </div>
                    <div class="flex-center">
                        <button class="btn btn-warning" id="undoBtn" onclick="undoVote()" disabled>復原</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="settings" class="page">
            <div class="card">
                <h2>遊戲管理</h2>
                <div class="form-row">
                    <div class="form-group">
                        <label for="gameName">遊戲名稱</label>
                        <input type="text" id="gameName" class="form-control" placeholder="例如：最愛歌曲對決">
                    </div>
                    <button class="btn btn-primary" onclick="createGame()">創建遊戲</button>
                </div>

                <div class="flex-center">
                    <button class="btn btn-info" onclick="exportSettings()">匯出設定</button>
                    <button class="btn btn-warning" onclick="document.getElementById('importFile').click()">匯入設定</button>
                    <input type="file" id="importFile" accept=".json" onchange="importSettings(event)" class="hidden">
                </div>

                <div id="gamesList"><h3>現有遊戲</h3></div>

                <div id="itemsManagement" class="hidden" style="margin-top: 30px; padding-top: 30px; border-top: 2px solid #e2e8f0;">
                    <div class="items-management-header">
                        <h2>項目管理</h2>
                        <button class="btn btn-gray" onclick="toggleItemsManagement()">收起項目管理</button>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="itemsInput">批次新增項目</label>
                            <textarea id="itemsInput" class="form-control" style="min-height: 150px;" placeholder="每行輸入一個項目，格式：項目名稱,影片連結"></textarea>
                        </div>
                        <button class="btn btn-primary" onclick="addItems()">批次新增</button>
                    </div>
                    
                    <div style="display: flex; justify-content: space-between; align-items: center; margin: 20px 0;">
                        <h3 id="itemsListTitle">項目列表</h3>
                        <div class="filter-controls">
                            <button class="toggle-btn clear-invalid-btn" onclick="clearAllInvalidLinks()" style="padding: 8px 16px;">清除所有無效連結</button>
                            <button class="toggle-btn" id="showInvalidOnlyBtn" onclick="toggleInvalidFilter()">無效連結</button>
                            <div class="mood-filter-container" id="settingsMoodFilter">
								<select id="settingsMoodLogic" class="mood-logic-select">
									<option value="and">和</option>
									<option value="or">或</option>
									<option value="not">非</option>
								</select>
								<div class="mood-filter-buttons" id="settingsMoodButtons"></div>
							</div>
                            <div class="voting-keyword-filter">
                                <input type="text" id="itemFilter" placeholder="過濾項目..." class="form-control" style="width: 200px; padding-right: 35px;">
                                <button type="button" class="clear-filter-btn" onclick="clearSettingsFilters()">❌</button>
                            </div>
                            <select id="pageSize">
                                <option value="10" selected>10</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                    </div>
                    <div class="pagination" id="paginationTop"></div>
                    <div id="itemsList"></div>
                    <div class="pagination" id="paginationBottom"></div>
                </div>
            </div>
        </div>

        <div id="stats" class="page">
            <div class="card">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h2>投票統計</h2>
                    <button class="btn btn-primary" onclick="refreshStats()">🔄 重新整理</button>
                </div>
                
                <div style="text-align: center; margin-bottom: 20px;">
                    <label for="statsGameSelect">選擇遊戲：</label>
                    <select id="statsGameSelect" class="form-control" style="width: auto; display: inline-block;">
                        <option value="">請選擇遊戲</option>
                    </select>
                </div>

                <div class="flex-center">
                    <button class="btn btn-info" onclick="exportStats()">匯出統計</button>
                    <button class="btn btn-warning" onclick="document.getElementById('importStatsFile').click()">匯入統計</button>
                    <button class="btn btn-danger" onclick="clearStats()">清除數據</button>
                    <input type="file" id="importStatsFile" accept=".json" class="hidden">
                </div>

                <div id="statsContent" class="hidden">
                    <div class="grid">
                        <div class="stat-card">
                            <div class="stat-value" id="totalItems">0</div>
                            <div>總項目數</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="totalVotes">0</div>
                            <div>總投票數</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="expectedVotes">0</div>
                            <div>期望票數</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="avgError">0</div>
                            <div>平均誤差</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="avgScore">1500</div>
                            <div>平均分數</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="medianScore">1500</div>
                            <div>中位分數</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="maxScore">1500</div>
                            <div>最高分數</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="minScore">1500</div>
                            <div>最低分數</div>
                        </div>
                    </div>

                    <div style="margin-top: 30px;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                            <h3 id="rankingTitle">排行榜</h3>
                            <div style="display: flex; gap: 10px; align-items: center;">
                                <div class="mood-filter-container" id="statsMoodFilter">
									<select id="statsMoodLogic" class="mood-logic-select">
										<option value="and">和</option>
										<option value="or">或</option>
										<option value="not">非</option>
									</select>
									<div class="mood-filter-buttons" id="statsMoodButtons"></div>
								</div>
                                <div class="voting-keyword-filter">
                                    <input type="text" id="rankingSearch" placeholder="搜尋項目..." class="form-control" style="width: 200px; padding-right: 35px;">
                                    <button type="button" class="clear-filter-btn" onclick="clearStatsFilters()">❌</button>
                                </div>
                                <select id="sortBy" class="form-control">
                                    <option value="rank">依名次</option>
                                    <option value="score">依分數</option>
									<option value="error">依誤差</option>
                                    <option value="winRate">依勝率</option>
                                    <option value="votes">依票次</option>
                                    <option value="time">依新加</option>
                                </select>
                            </div>
                        </div>
                        <div id="rankingList"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
	<center>ver 0.1&emsp;~tyovery~&emsp;2025-10<br /><br /></center>

    <script src="https://www.youtube.com/iframe_api"></script>
    <script>
        let games = JSON.parse(localStorage.getItem('games')) || {};
        let currentGame = null, currentPair = null, selectedGameForEdit = null;
        let activeItems = [], voteHistory = [], editingItemId = null, renamingGameId = null;
        let player1 = null, player2 = null, youtubeReady = false, currentPlayingPlayer = null;
        let selectedGameId = localStorage.getItem('selectedGameId') || '';
        let selectedItemCount = parseInt(localStorage.getItem('selectedItemCount')) || 0;
        let selectedExtractMode = localStorage.getItem('selectedExtractMode') || 'uniform';
        let currentPage = 1, itemsPerPage = 10, statsVisible = localStorage.getItem('statsVisible') === 'true', filteredItems = [];
        let currentVideoLinks = [null, null], visibleItemObserver = null;
        let showInvalidOnly = false;
        let cooldownActive = false;
        let uniformPool = []; // 用於均勻抽取的暫存池
        let isLeftMouseDownOnSlider = false; // 追蹤是否在滑桿上按下滑鼠左鍵
        let isEditing = false; // 追蹤是否正在編輯項目
        const moodEmojis = ['🌞', '🔥', '💗', '🌱', '🎓', '😭', '🕊️']; // 印象心情emoji
        
        // 修改：從localStorage讀取投票頁篩選狀態
        let selectedMoodFilters = JSON.parse(localStorage.getItem('selectedMoodFilters')) || []; // 投票頁的心情篩選狀態
        let statsMoodFilters = JSON.parse(localStorage.getItem('statsMoodFilters')) || []; // 統計頁的心情篩選狀態
        let settingsMoodFilters = JSON.parse(localStorage.getItem('settingsMoodFilters')) || []; // 設定頁的心情篩選狀態
        
        // 新增：心情篩選邏輯狀態
        let votingMoodLogic = localStorage.getItem('votingMoodLogic') || 'and';
        let settingsMoodLogic = localStorage.getItem('settingsMoodLogic') || 'and';
        let statsMoodLogic = localStorage.getItem('statsMoodLogic') || 'and';

        // 保存編輯狀態的變數
        let editingItemData = {};

        // 防止重複執行startGame的標誌
        let startGameExecuting = false;

        // 防止分數動畫重複播放的標誌
        let scoreAnimationActive = false;

        // 計算誤差的函數
        function calculateError(item) {
			const D = item.votes - (item.wins || 0) - (item.losses || 0) ;
			const W = (item.wins || 0) + 0.5 * D ;
			const L = (item.losses || 0) + 0.5 * D ;
			if (item.votes === 0 || W == 0 || L == 0 ) return Infinity;
			return 340.48687381214944 / Math.sqrt( W * L / item.votes ) ;
        }

        function migrateOldData() {
            Object.values(games).forEach(game => {
                game.items.forEach(item => {
                    if (typeof item.link === 'string') {
                        item.links = [item.link];
                        delete item.link;
                    } else if (!item.links) item.links = [];
                    if (!item.invalidLinks) item.invalidLinks = [];
                    ['wins', 'losses'].forEach(prop => { if (item[prop] === undefined) item[prop] = 0; });
                    // 初始化心情標記
                    if (!item.moods) item.moods = [];
                });
            });
            localStorage.setItem('games', JSON.stringify(games));
        }

        function onYouTubeIframeAPIReady() { youtubeReady = true; }

        function handleVideoHover(optionNum) {
            currentPlayingPlayer = optionNum;
            try {
                if (optionNum === 1) {
                    if (player1?.unMute) { player1.unMute(); player1.playVideo(); }
                    if (player2?.mute) { player2.mute(); player2.pauseVideo(); }
                } else {
                    if (player2?.unMute) { player2.unMute(); player2.playVideo(); }
                    if (player1?.mute) { player1.mute(); player1.pauseVideo(); }
                }
            } catch (e) { console.log('Video control not available'); }
        }

        function toggleInvalidLink(optionNum) {
            if (!currentPair) return;
            const item = currentGame.items.find(i => i.id === currentPair[optionNum - 1].id);
            const currentLink = currentVideoLinks[optionNum - 1];
            if (!item || !currentLink) return;
            
            if (!item.invalidLinks) item.invalidLinks = [];
            const btn = document.querySelector(`#video${optionNum}Container .invalid-btn`);
            
            if (item.invalidLinks.includes(currentLink)) {
                item.invalidLinks = item.invalidLinks.filter(link => link !== currentLink);
                btn.classList.remove('active');
            } else {
                item.invalidLinks.push(currentLink);
                btn.classList.add('active');
            }
            localStorage.setItem('games', JSON.stringify(games));
            syncData();
        }

        function toggleStats() {
            statsVisible = !statsVisible;
            localStorage.setItem('statsVisible', statsVisible);
            const btn = document.getElementById('toggleStatsButton');
            const stats1 = document.getElementById('stats1');
            const stats2 = document.getElementById('stats2');
            
            if (statsVisible) {
                btn.textContent = '👁️';
                updateItemStats();
                stats1.classList.remove('hidden');
                stats2.classList.remove('hidden');
            } else {
                btn.textContent = '👁️';
                stats1.classList.add('hidden');
                stats2.classList.add('hidden');
            }
        }

        function sortItemsByRank(items) {
            return [...items].sort((a, b) => {
                if (b.score !== a.score) return b.score - a.score;
                
                // 計算誤差
                const errorA = calculateError(a);
                const errorB = calculateError(b);
                if (errorA !== errorB) return errorA - errorB; // 誤差小的排先
                
                const winRateA = a.votes > 0 ? (a.wins || 0) / a.votes : 0;
                const winRateB = b.votes > 0 ? (b.wins || 0) / b.votes : 0;
                if (winRateB !== winRateA) return winRateB - winRateA;
                
                return b.votes - a.votes;
            });
        }

        function updateItemStats() {
			if (!currentPair || !currentGame) return;
			
			// 每次重新計算排名和統計資料
			const sortedItems = sortItemsByRank(currentGame.items);
			
			[0, 1].forEach(idx => {
				const item = currentPair[idx];
				const rank = sortedItems.findIndex(i => i.id === item.id) + 1;
				const winRate = item.votes > 0 ? ((item.wins / item.votes) * 100).toFixed(1) : 0;
				const p = item.votes > 0 ? ( item.wins || 0 ) / item.votes : 0 ;
				let error = calculateError(item); // 使用新的計算誤差函數
				error = error === Infinity ? '∞' : Math.round(error) ;
				
				// 計算有效連結數和總連結數（去重後）
				const allLinks = [...new Set([...(item.links || []), ...(item.invalidLinks || [])])];
				const totalLinkCount = allLinks.length;
				const validLinks = allLinks.filter(link => !item.invalidLinks?.includes(link));
				const validLinkCount = validLinks.length;
				
				// 取得當前載入的影片URL
				const currentVideoUrl = currentVideoLinks[idx] || '[沒有]' ;
				
				document.getElementById(`stats${idx + 1}`).innerHTML = `
					<div>排名: ${rank} | 分數: ${item.score}±${error} | 勝率: ${winRate}% | 票次: ${item.votes} | 連結: ${validLinkCount}/${totalLinkCount}</div>
					<div class="current-video-url">${currentVideoUrl}</div>`;
			});
		}

        function setMaxItems() {
            const gameId = document.getElementById('gameSelect').value;
            if (gameId) {
                const keyword = document.getElementById('keywordFilter').value.toLowerCase().trim();
                let items = games[gameId].items;
                
                if (keyword) {
                    items = items.filter(item => item.name.toLowerCase().includes(keyword));
                }
                
                // 應用心情篩選
                if (selectedMoodFilters.length > 0) {
                    items = applyMoodFilter(items, selectedMoodFilters, votingMoodLogic);
                }
                
                document.getElementById('itemCount').value = items.length;
            }
        }

        // 新增：應用心情篩選邏輯的函數
        function applyMoodFilter(items, moodFilters, logic) {
            if (moodFilters.length === 0) return items;
            
            return items.filter(item => {
                const itemMoods = item.moods || [];
                
                switch(logic) {
                    case 'and':
                        // 必須包含所有選中的心情標記
                        return moodFilters.every(mood => itemMoods.includes(mood));
                    case 'or':
                        // 至少包含一個選中的心情標記
                        return moodFilters.some(mood => itemMoods.includes(mood));
                    case 'not':
                        // 不能包含任何選中的心情標記
                        return !moodFilters.some(mood => itemMoods.includes(mood));
                    default:
                        return true;
                }
            });
        }

        function reloadVideo(optionNum) {
            if (!currentPair) return;
            const item = currentPair[optionNum - 1];
            if (item?.links?.length > 0) {
                let availableLinks = [...item.links];
                if (item.links.length > 1 && currentVideoLinks[optionNum - 1]) {
                    availableLinks = availableLinks.filter(link => link !== currentVideoLinks[optionNum - 1]);
                }
                const selectedLink = availableLinks[Math.floor(Math.random() * availableLinks.length)];
                currentVideoLinks[optionNum - 1] = selectedLink;
                loadVideo(`video${optionNum}Container`, selectedLink, optionNum);
                // 更新統計資訊以顯示新的影片URL
                if (statsVisible) updateItemStats();
            }
        }

        function reloadBothVideos() {
            // 修改：優先從沒有標記為無效的連結中隨機選出
            [1, 2].forEach(optionNum => {
                if (!currentPair) return;
                const item = currentPair[optionNum - 1];
                if (item?.links?.length > 0) {
                    // 優先選擇有效連結
                    let validLinks = item.links.filter(link => !item.invalidLinks?.includes(link));
                    
                    // 如果沒有有效連結，則使用所有連結
                    if (validLinks.length === 0) {
                        validLinks = [...item.links];
                    }
                    
                    let availableLinks = [...validLinks];
                    if (validLinks.length > 1 && currentVideoLinks[optionNum - 1]) {
                        availableLinks = availableLinks.filter(link => link !== currentVideoLinks[optionNum - 1]);
                    }
                    const selectedLink = availableLinks[Math.floor(Math.random() * availableLinks.length)];
                    currentVideoLinks[optionNum - 1] = selectedLink;
                    loadVideo(`video${optionNum}Container`, selectedLink, optionNum);
                }
            });
            // 更新統計資訊以顯示新的影片URL
            if (statsVisible) updateItemStats();
        }

        function getRandomValidLink(item) {
            if (!item?.links?.length) return null;
            
            // 優先選擇沒有標記為無效的連結
            let validLinks = item.links.filter(link => !item.invalidLinks?.includes(link));
            
            // 如果沒有有效連結，則使用所有連結
            if (validLinks.length === 0) {
                validLinks = [...item.links];
            }
            
            return validLinks[Math.floor(Math.random() * validLinks.length)];
        }

        function showPage(pageName) {
            // 如果正在編輯項目，保存當前編輯內容
            if (isEditing && editingItemId) {
                saveEditingItemData();
            }
            
            document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
            document.getElementById(pageName).classList.add('active');
            document.querySelectorAll('.btn-nav').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');

            if (pageName === 'voting') {
                // 清除分數動畫元素，避免切換頁面時重新播放
                clearScoreAnimations();
                updateGameSelect();
                createVotingMoodFilter();
                if (selectedGameId) {
                    document.getElementById('gameSelect').value = selectedGameId;
                    updateGameSettings();
                }
                if (selectedExtractMode) document.getElementById('extractMode').value = selectedExtractMode;
            } else if (pageName === 'stats') {
                updateStatsGameSelect();
                createStatsMoodFilter();
                if (selectedGameId) {
                    document.getElementById('statsGameSelect').value = selectedGameId;
                    loadStats();
                }
            } else if (pageName === 'settings') {
                // 當切換到設定頁時，立即載入可見項目的預覽
                createSettingsMoodFilter();
                setTimeout(() => {
                    if (selectedGameForEdit) {
                        updateItemsListWithPagination();
                    }
                }, 100);
            }
        }

        // 清除分數動畫元素
        function clearScoreAnimations() {
            const leftElement = document.getElementById('sliderScoreChangeLeft');
            const rightElement = document.getElementById('sliderScoreChangeRight');
            
            if (leftElement) {
                leftElement.textContent = '';
                leftElement.className = 'slider-score-change';
            }
            
            if (rightElement) {
                rightElement.textContent = '';
                rightElement.className = 'slider-score-change';
            }
            
            // 重置動畫狀態標誌
            scoreAnimationActive = false;
        }

        // 保存編輯中的項目資料
        function saveEditingItemData() {
            if (!editingItemId) return;
            
            const nameInput = document.getElementById(`edit-name-${editingItemId}`);
            const linksInput = document.getElementById(`edit-links-${editingItemId}`);
            
            if (nameInput && linksInput) {
                editingItemData[editingItemId] = {
                    name: nameInput.value,
                    links: linksInput.value,
                    moods: [...(games[selectedGameForEdit].items.find(i => i.id === editingItemId)?.moods || [])]
                };
            }
        }

        function createGame() {
            const gameName = document.getElementById('gameName').value.trim();
            if (!gameName) { alert('請輸入遊戲名稱'); return; }
            const gameId = Date.now().toString();
            games[gameId] = { id: gameId, name: gameName, items: [], votes: [] };
            localStorage.setItem('games', JSON.stringify(games));
            syncData();
            document.getElementById('gameName').value = '';
            updateGamesList();
            alert('遊戲創建成功！');
        }

        function updateGamesList() {
            const gamesList = document.getElementById('gamesList');
            gamesList.innerHTML = '<h3>現有遊戲</h3>';
            Object.values(games).forEach(game => {
                const gameItem = document.createElement('div');
                gameItem.className = 'list-item';
                if (renamingGameId === game.id) {
                    gameItem.classList.add('editing');
                    gameItem.innerHTML = `
                        <div><input type="text" class="form-control" id="rename-input-${game.id}" value="${game.name}">
                        <small>項目數: ${game.items.length}</small></div>
                        <div style="display: flex; gap: 10px;">
                            <button class="btn btn-primary" onclick="saveGameRename('${game.id}')">儲存</button>
                            <button class="btn btn-gray" onclick="cancelGameRename()">取消</button>
                        </div>`;
                } else {
                    gameItem.innerHTML = `
                        <div><div style="font-weight: bold; font-size: 1.2em;">${game.name}</div>
                        <small>項目數: ${game.items.length}</small></div>
                        <div style="display: flex; gap: 10px;">
                            <button class="btn btn-warning" onclick="startRenameGame('${game.id}')">改名</button>
                            <button class="btn btn-info" onclick="editGame('${game.id}')">管理項目</button>
                            <button class="btn btn-danger" onclick="deleteGame('${game.id}')">刪除</button>
                        </div>`;
                }
                gamesList.appendChild(gameItem);
            });
        }

        function startRenameGame(gameId) { renamingGameId = gameId; updateGamesList(); }

        function saveGameRename(gameId) {
            const newName = document.getElementById(`rename-input-${gameId}`).value.trim();
            if (newName) {
                games[gameId].name = newName;
                localStorage.setItem('games', JSON.stringify(games));
                syncData();
                renamingGameId = null;
                updateGamesList();
                updateGameSelect();
                updateStatsGameSelect();
            } else alert('遊戲名稱不能為空');
        }

        function cancelGameRename() { renamingGameId = null; updateGamesList(); }

        function toggleInvalidFilter() {
            showInvalidOnly = !showInvalidOnly;
            const btn = document.getElementById('showInvalidOnlyBtn');
            if (showInvalidOnly) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
            filterItems();
        }

        function filterItems() { currentPage = 1; updateItemsListWithPagination(); }

        function editGame(gameId) {
			// 如果正在編輯項目，保存當前編輯內容
            if (isEditing && editingItemId) {
                saveEditingItemData();
            }
			
            selectedGameForEdit = gameId;
            document.getElementById('itemsManagement').classList.remove('hidden');
            currentPage = 1;
            updateItemsListWithPagination();
        }

        function setupIntersectionObserver() {
            if (visibleItemObserver) visibleItemObserver.disconnect();
            visibleItemObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const previewId = entry.target.id;
                        const itemId = previewId.replace('preview-', '');
                        const item = games[selectedGameForEdit].items.find(i => i.id === itemId);
                        if (item?.links?.length > 0 && !entry.target.innerHTML) {
                            loadPreviewVideo(previewId, item.links[0]);
                        }
                    }
                });
            }, { rootMargin: '50px' });
        }

        function deleteGame(gameId) {
            if (confirm('確定要刪除這個遊戲嗎？')) {
                delete games[gameId];
                localStorage.setItem('games', JSON.stringify(games));
                syncData();
                updateGamesList();
            }
        }

        function addItems() {
            if (!selectedGameForEdit) { alert('請先選擇要編輯的遊戲'); return; }
            const itemsInput = document.getElementById('itemsInput').value.trim();
            if (!itemsInput) { alert('請輸入項目資料'); return; }

            const game = games[selectedGameForEdit];
            const lines = itemsInput.split('\n');
            let addedCount = 0;

            lines.forEach(line => {
                line = line.trim();
                if (!line) return;
                const parts = line.split(',');
                if (parts.length) {
                    const itemName = parts[0].trim();
                    // 修改：允許沒有輸入連結，如果沒有連結則設為空陣列
                    const itemLink = parts.slice(1).join(',').trim();
                    if (itemName) {
                        game.items.push({
                            id: Date.now().toString() + '_' + Math.random(),
                            name: itemName, 
                            links: itemLink ? [itemLink] : [], // 如果有連結才加入
                            invalidLinks: [],
                            score: 1500, votes: 0, wins: 0, losses: 0, addedTime: Date.now(),
                            moods: []
                        });
                        addedCount++;
                    }
                }
            });

            if (addedCount > 0) {
                localStorage.setItem('games', JSON.stringify(games));
                syncData();
                document.getElementById('itemsInput').value = '';
                updateItemsListWithPagination();
                alert(`成功新增 ${addedCount} 個項目！`);
				updateGamesList();
            } else alert('沒有有效的項目被新增，請檢查格式');
        }

        function updateItemsListWithPagination() {
            if (!selectedGameForEdit) return;
            const game = games[selectedGameForEdit];
            const filterText = document.getElementById('itemFilter').value.toLowerCase();
            
            filteredItems = game.items.filter(item => {
                const matchesText = !filterText || item.name.toLowerCase().includes(filterText);
                const hasInvalidLinks = item.invalidLinks && item.invalidLinks.length > 0;
                const matchesInvalidFilter = !showInvalidOnly || hasInvalidLinks;
                
                // 應用心情篩選邏輯
                const matchesMoodFilter = applyMoodFilter([item], settingsMoodFilters, settingsMoodLogic).length > 0;
                
                return matchesText && matchesInvalidFilter && matchesMoodFilter;
            });
            
            // 修改：在設定頁按編輯項目按鈕時，顯示的項目依加入時間新至舊排序
            filteredItems.sort((a, b) => (b.addedTime || 0) - (a.addedTime || 0));
            
            const totalItems = filteredItems.length;
            itemsPerPage = parseInt(document.getElementById('pageSize').value); // 确保每次都重新读取pageSize的值
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            if (currentPage > totalPages) currentPage = totalPages;
            if (currentPage < 1) currentPage = 1;
            
            // 更新項目列表標題格式為："[遊戲名稱] ([當前顯示的項目數]/[該遊戲的總項目數])"
            document.getElementById('itemsListTitle').textContent = `${game.name} (${totalItems}/${game.items.length})`;
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
            updateItemsList(filteredItems.slice(startIndex, endIndex));
            updatePagination(totalPages);
            
            // 設置觀察者並立即載入可見項目的預覽
            setupIntersectionObserver();
            document.querySelectorAll('.item-preview').forEach(preview => {
                if (isElementInViewport(preview)) {
                    const itemId = preview.id.replace('preview-', '');
                    const item = game.items.find(i => i.id === itemId);
                    if (item?.links?.length > 0 && !preview.innerHTML) {
                        loadPreviewVideo(preview.id, item.links[0]);
                    }
                } else {
                    visibleItemObserver.observe(preview);
                }
            });
        }
        
        function changePageSize() {
            currentPage = 1; // 切換每頁項目數時重置到第一頁
            updateItemsListWithPagination();
        }

        function isElementInViewport(el) {
            if (!el) return false;
            const rect = el.getBoundingClientRect();
            return (
                rect.top >= 0 &&
                rect.left >= 0 &&
                rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                rect.right <= (window.innerWidth || document.documentElement.clientWidth)
            );
        }

        function updatePagination(totalPages) {
            const html = `
                <button class="btn btn-gray" onclick="changePage(1)" ${currentPage === 1 ? 'disabled' : ''}>首頁</button>
                <button class="btn btn-gray" onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>上一頁</button>
                <span>第 ${currentPage} / ${totalPages} 頁</span>
                <button class="btn btn-gray" onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>下一頁</button>
                <button class="btn btn-gray" onclick="changePage(${totalPages})" ${currentPage === totalPages ? 'disabled' : ''}>末頁</button>`;
            ['paginationTop', 'paginationBottom'].forEach(id => document.getElementById(id).innerHTML = html);
        }

        function changePage(page) { currentPage = page; updateItemsListWithPagination(); }

        function updateItemsList(items) {
            const itemsList = document.getElementById('itemsList');
            itemsList.innerHTML = '';
            items.forEach(item => {
                const itemCard = document.createElement('div');
                itemCard.className = 'list-item';
                if (editingItemId === item.id) {
                    itemCard.classList.add('editing');
                    // 使用保存的編輯數據或當前數據
                    const savedData = editingItemData[item.id];
                    const nameValue = savedData?.name || item.name;
                    const linksText = savedData?.links || (() => {
                        // 合併有效和無效連結，避免重複顯示
                        const allLinks = [...(item.links || [])];
                        item.invalidLinks?.forEach(link => {
                            if (!allLinks.includes(link)) {
                                allLinks.push(link);
                            }
                        });
                        return allLinks.map(link => 
                            item.invalidLinks?.includes(link) ? `[無效] ${link}` : link).join('\n') || '';
                    })();
                    
                    itemCard.innerHTML = `
                        <div class="item-info">
                            <div style="flex: 1;">
                                <!-- 心情按鈕放在項目名稱上方 -->
                                <div class="edit-mood-buttons" id="edit-mood-buttons-${item.id}"></div>
                                <input type="text" class="form-control" id="edit-name-${item.id}" value="${nameValue}" style="margin-bottom: 10px;">
                                <textarea class="form-control" id="edit-links-${item.id}" placeholder="每行一個影片連結" style="min-height: 80px;">${linksText}</textarea>
                            </div>
                        </div>
                        <div style="display: flex; gap: 10px;">
                            <button class="btn btn-primary" onclick="saveItem('${item.id}')">儲存</button>
                            <button class="btn btn-gray" onclick="cancelEdit()">取消</button>
                        </div>`;
                    
                    // 初始化編輯時的心情按鈕
                    setTimeout(() => {
                        createEditMoodButtons(item.id, savedData?.moods || item.moods || []);
                    }, 0);
                } else {
                    const firstLink = item.links?.[0] || '';
                    // 計算不重複的連結總數
                    const uniqueLinks = [...new Set(item.links || [])];
                    const linkCount = uniqueLinks.length;
                    // 計算不重複的無效連結數
                    const uniqueInvalidLinks = [...new Set(item.invalidLinks || [])];
                    const invalidCount = uniqueInvalidLinks.length;
                    const isFirstLinkInvalid = item.invalidLinks?.includes(firstLink);
                    
                    itemCard.innerHTML = `
                        <div class="item-info">
                            <div class="item-preview" id="preview-${item.id}"></div>
                            <div style="flex: 1;">
                                <!-- 在項目名稱上方添加心情按鈕，不需要按編輯按鈕就能編輯 -->
                                <div class="item-mood-buttons" id="item-mood-buttons-${item.id}"></div>
                                <div style="font-weight: bold;">${item.name}</div>
                                <div class="${isFirstLinkInvalid ? 'invalid-link' : ''}" style="color: var(--primary); font-size: 0.9em;">${firstLink}</div>
                                <!-- 修改：如果沒有連結，顯示"共 0 個影片連結" -->
                                <div style="color: var(--gray); font-size: 0.85em;">共 ${linkCount+invalidCount} 個影片連結</div>
                                ${invalidCount > 0 ? `<div style="color: var(--danger); font-size: 0.85em;">⚠️ ${invalidCount} 個無效連結</div>` : ''}
                            </div>
                        </div>
                        <div style="display: flex; gap: 10px;">
							<button class="btn btn-primary" onclick="searchOnWeb('${item.id}','youtube')">YT搜尋</button>
							<button class="btn btn-primary" onclick="searchOnWeb('${item.id}','bilibili')">B站搜尋</button>
                            <button class="btn btn-info" onclick="startEditItem('${item.id}')">編輯</button>
                            <button class="btn btn-danger" onclick="confirmRemoveItem('${item.id}')">移除</button>
                        </div>`;
                    
                    // 初始化非編輯狀態下的心情按鈕
                    setTimeout(() => {
                        createItemMoodButtons(item.id, item.moods || []);
                    }, 0);
                }
                itemsList.appendChild(itemCard);
            });
        }

        // 創建項目列表中的心情按鈕（非編輯狀態）
        function createItemMoodButtons(itemId, currentMoods) {
            const container = document.getElementById(`item-mood-buttons-${itemId}`);
            if (!container) return;
            
            container.innerHTML = '';
            
            moodEmojis.forEach(emoji => {
                const moodBtn = document.createElement('button');
                moodBtn.className = 'item-mood-btn';
                moodBtn.textContent = emoji;
                moodBtn.dataset.emoji = emoji;
                
                // 檢查是否已經選中
                if (currentMoods.includes(emoji)) {
                    moodBtn.classList.add('active');
                }
                
                moodBtn.onclick = function() {
                    toggleItemMood(itemId, emoji, moodBtn);
                };
                
                container.appendChild(moodBtn);
            });
        }

        // 切換項目列表中的心情狀態（非編輯狀態）
        function toggleItemMood(itemId, emoji, button) {
            const item = games[selectedGameForEdit].items.find(i => i.id === itemId);
            if (!item) return;
            
            // 初始化心情數組
            if (!item.moods) item.moods = [];
            
            // 切換心情狀態
            if (item.moods.includes(emoji)) {
                // 如果已經存在，移除它
                item.moods = item.moods.filter(m => m !== emoji);
                button.classList.remove('active');
            } else {
                // 如果不存在，添加它
                item.moods.push(emoji);
                button.classList.add('active');
            }
            
            // 保存到本地存儲
            localStorage.setItem('games', JSON.stringify(games));
            syncData();
        }

        // 創建編輯項目的心情按鈕
        function createEditMoodButtons(itemId, currentMoods) {
            const container = document.getElementById(`edit-mood-buttons-${itemId}`);
            if (!container) return;
            
            container.innerHTML = '';
            
            moodEmojis.forEach(emoji => {
                const moodBtn = document.createElement('button');
                moodBtn.className = 'edit-mood-btn';
                moodBtn.textContent = emoji;
                moodBtn.dataset.emoji = emoji;
                
                // 檢查是否已經選中
                if (currentMoods.includes(emoji)) {
                    moodBtn.classList.add('active');
                }
                
                moodBtn.onclick = function() {
                    toggleEditMood(itemId, emoji, moodBtn);
                };
                
                container.appendChild(moodBtn);
            });
        }

        // 切換編輯項目的心情狀態
        function toggleEditMood(itemId, emoji, button) {
            const item = games[selectedGameForEdit].items.find(i => i.id === itemId);
            if (!item) return;
            
            // 初始化心情數組
            if (!item.moods) item.moods = [];
            
            // 切換心情狀態
            if (item.moods.includes(emoji)) {
                // 如果已經存在，移除它
                item.moods = item.moods.filter(m => m !== emoji);
                button.classList.remove('active');
            } else {
                // 如果不存在，添加它
                item.moods.push(emoji);
                button.classList.add('active');
            }
            
            // 更新保存的編輯數據
            if (editingItemData[itemId]) {
                editingItemData[itemId].moods = [...item.moods];
            }
        }

        function loadPreviewVideo(containerId, link) {
            const container = document.getElementById(containerId);
            if (!container || !link) return;
            if (link.includes('youtube.com') || link.includes('youtu.be')) {
                let videoId = '';
                if (link.includes('youtu.be/')) videoId = link.split('youtu.be/')[1].split(/[?&#]/)[0];
                else if (link.includes('youtube.com/watch')) {
                    const match = link.match(/[?&]v=([^&#]+)/);
                    if (match) videoId = match[1];
                } else if (link.includes('youtube.com/embed/')) videoId = link.split('embed/')[1].split(/[?&#]/)[0];
                else if (link.includes('youtube.com/shorts/')) videoId = link.split('shorts/')[1].split(/[?&#]/)[0];
                if (videoId) container.innerHTML = `<iframe src="https://www.youtube-nocookie.com/embed/${videoId}?controls=1&modestbranding=1&rel=0" frameborder="0" allowfullscreen></iframe>`;
            } else if (link.includes('bilibili.com')) {
                let bvMatch = link.match(/BV[\w]+/);
                if (bvMatch) container.innerHTML = `<iframe src="https://player.bilibili.com/player.html?bvid=${bvMatch[0]}&high_quality=1&autoplay=0" scrolling="no" frameborder="0" allowfullscreen></iframe>`;
                else {
                    const avMatch = link.match(/av(\d+)/);
                    if (avMatch) container.innerHTML = `<iframe src="https://player.bilibili.com/player.html?aid=${avMatch[1]}&high_quality=1&autoplay=0" scrolling="no" frameborder="0" allowfullscreen></iframe>`;
                }
            }
        }
		
		function searchOnWeb(itemId,site) {
			const item = games[selectedGameForEdit].items.find(i => i.id === itemId);
            if (item) {
				let link = '' ;
				switch(site)
				{
					case 'bilibili' :
						link = `https://search.bilibili.com/?keyword=${item.name}` ;
					break ;
					case 'youtube' :
						link = `https://www.youtube.com/results?search_query=${item.name}` ;
					break ;
				}
				window.open(link,'_blank') ;
			}
		}

        function startEditItem(itemId) {
			// 如果正在編輯項目，保存當前編輯內容
            if (isEditing && editingItemId) {
                saveEditingItemData();
            }

            editingItemId = itemId; 
            isEditing = true;
            updateItemsListWithPagination(); 
        }

        function saveItem(itemId) {
            const item = games[selectedGameForEdit].items.find(i => i.id === itemId);
            if (item) {
                const newName = document.getElementById(`edit-name-${itemId}`).value.trim();
                const newLinksText = document.getElementById(`edit-links-${itemId}`).value.trim();
                if (newName) {
                    const allLinks = newLinksText.split('\n').map(link => link.trim()).filter(link => link);
                    const validLinks = [];
                    const invalidLinks = [];
                    
                    // 處理重複連結
                    const linkSet = new Set();
                    
                    allLinks.forEach(link => {
                        if (link.startsWith('[無效] ')) {
                            const cleanLink = link.substring(5);
                            // 如果相同連結已經存在於有效連結中，則從有效連結中移除
                            if (linkSet.has(cleanLink)) {
                                // 如果已經存在，優先保留無效連結
                                const index = validLinks.indexOf(cleanLink);
                                if (index > -1) {
                                    validLinks.splice(index, 1);
                                }
                            }
                            invalidLinks.push(cleanLink);
                            linkSet.add(cleanLink);
                        } else {
                            // 如果相同連結已經存在於無效連結中，則不加入有效連結
                            if (!linkSet.has(link)) {
                                validLinks.push(link);
                                linkSet.add(link);
                            }
                        }
                    });
                    
                    item.name = newName;
                    // 確保保存的連結是去重後的
                    item.links = [...new Set(validLinks)];
                    item.invalidLinks = [...new Set(invalidLinks)];
                    // 心情標記已在編輯過程中直接更新到item.moods
                    localStorage.setItem('games', JSON.stringify(games));
                    syncData();
                    editingItemId = null;
                    isEditing = false;
                    // 清除保存的編輯數據
                    delete editingItemData[itemId];
                    updateItemsListWithPagination();
                } else alert('項目名稱不能為空');
            }
        }

        function cancelEdit() { 
            // 清除保存的編輯數據，不保存更改
            if (editingItemId) {
                delete editingItemData[editingItemId];
            }
            editingItemId = null; 
            isEditing = false;
            updateItemsListWithPagination(); 
        }

        function confirmRemoveItem(itemId) {
			// 如果正在編輯項目，保存當前編輯內容
            if (isEditing && editingItemId) {
                saveEditingItemData();
            }
			
            const item = games[selectedGameForEdit].items.find(i => i.id === itemId);
            if (item && confirm(`確定要移除「${item.name}」嗎？`)){
				removeItem(itemId);
				updateGamesList();
			}
        }

        function removeItem(itemId) {
            if (selectedGameForEdit) {
                games[selectedGameForEdit].items = games[selectedGameForEdit].items.filter(item => item.id !== itemId);
                localStorage.setItem('games', JSON.stringify(games));
                syncData();
                updateItemsListWithPagination();
            }
        }

        function updateGameSelect() {
            const gameSelect = document.getElementById('gameSelect');
            const currentValue = gameSelect.value;
            gameSelect.innerHTML = '<option value="">請選擇遊戲</option>';
            Object.values(games).forEach(game => {
				const option = document.createElement('option');
				option.value = game.id; option.textContent = game.name;
				gameSelect.appendChild(option);
            });
            if (currentValue) gameSelect.value = currentValue;
        }

        function updateGameSettings() {
            const gameId = document.getElementById('gameSelect').value;
            selectedGameId = gameId; 
            localStorage.setItem('selectedGameId', selectedGameId);
            
            // 不再隱藏設定區域，即使沒有選擇遊戲
            document.getElementById('gameSettings').style.display = 'flex';
            
            if (!gameId) {
                // 如果沒有選擇遊戲，禁用相關設定
                document.getElementById('extractMode').disabled = true;
                document.getElementById('keywordFilter').disabled = true;
                document.getElementById('itemCount').disabled = true;
                document.querySelector('button[onclick="setMaxItems()"]').disabled = true;
                document.querySelector('button[onclick="startGame()"]').disabled = true;
                
                // 禁用心情篩選按鈕
                disableVotingMoodFilter();
                return;
            }
            
            // 如果有選擇遊戲，啟用相關設定
            document.getElementById('extractMode').disabled = false;
            document.getElementById('keywordFilter').disabled = false;
            document.getElementById('itemCount').disabled = false;
            document.querySelector('button[onclick="setMaxItems()"]').disabled = false;
            document.querySelector('button[onclick="startGame()"]').disabled = false;
            
            // 啟用心情篩選按鈕
            enableVotingMoodFilter();
            
            const game = games[gameId];
            document.getElementById('itemCount').max = game.items.length;
            if (selectedItemCount > 0 && selectedItemCount <= game.items.length) {
                document.getElementById('itemCount').value = selectedItemCount;
            } else document.getElementById('itemCount').value = game.items.length;
            if (document.getElementById('votingArea').classList.contains('hidden')) {
                voteHistory = []; document.getElementById('undoBtn').disabled = true;
            }
            
            // 修改：從localStorage恢復篩選輸入框內容
            const savedKeywordFilter = localStorage.getItem('keywordFilter');
            if (savedKeywordFilter !== null) {
                document.getElementById('keywordFilter').value = savedKeywordFilter;
            }
            
            // 修改：從localStorage恢復心情篩選狀態
            createVotingMoodFilter();
        }

        function disableVotingMoodFilter() {
            const buttons = document.querySelectorAll('#votingMoodFilter .mood-filter-btn');
            buttons.forEach(btn => {
                btn.disabled = true;
                btn.style.opacity = '0.5';
            });
        }

        function enableVotingMoodFilter() {
            const buttons = document.querySelectorAll('#votingMoodFilter .mood-filter-btn');
            buttons.forEach(btn => {
                btn.disabled = false;
                btn.style.opacity = '1';
            });
        }

        function updateItemCountMax() {
            const gameId = document.getElementById('gameSelect').value;
            if (!gameId) return;
            
            const keyword = document.getElementById('keywordFilter').value.toLowerCase().trim();
            let items = games[gameId].items;
            
            if (keyword) {
                items = items.filter(item => item.name.toLowerCase().includes(keyword));
            }
            
            // 應用心情篩選
            if (selectedMoodFilters.length > 0) {
                items = applyMoodFilter(items, selectedMoodFilters, votingMoodLogic);
            }
            
            document.getElementById('itemCount').max = items.length;
        }

        function createVotingMoodFilter() {
            const container = document.getElementById('votingMoodFilter');
            container.innerHTML = '';
            
            // 設置下拉選單的初始值
            const votingMoodLogicSelect = document.getElementById('votingMoodLogic');
            if (votingMoodLogicSelect) {
                votingMoodLogicSelect.value = votingMoodLogic;
            }
            
            // 一行顯示全部心情按鈕
            moodEmojis.forEach(emoji => {
                const moodBtn = document.createElement('button');
                moodBtn.className = 'mood-filter-btn';
                moodBtn.textContent = emoji;
                moodBtn.dataset.emoji = emoji;
                
                // 檢查是否已經選中
                if (selectedMoodFilters.includes(emoji)) {
                    moodBtn.classList.add('active');
                }
                
                moodBtn.onclick = function() {
                    toggleVotingMoodFilter(emoji, moodBtn);
                };
                
                container.appendChild(moodBtn);
            });
            
            // 初始狀態：如果沒有選擇遊戲，禁用按鈕
            if (!document.getElementById('gameSelect').value) {
                disableVotingMoodFilter();
            }
        }

        function toggleVotingMoodFilter(emoji, button) {
            if (selectedMoodFilters.includes(emoji)) {
                // 如果已經存在，移除它
                selectedMoodFilters = selectedMoodFilters.filter(m => m !== emoji);
                button.classList.remove('active');
            } else {
                // 如果不存在，添加它
                selectedMoodFilters.push(emoji);
                button.classList.add('active');
            }
            
            // 修改：保存心情篩選狀態到localStorage
            localStorage.setItem('selectedMoodFilters', JSON.stringify(selectedMoodFilters));
            
            // 更新項目計數最大值
            updateItemCountMax();
        }

        // 新增：清除投票頁篩選功能
        function clearVotingFilters() {
            // 清除輸入框內容
            document.getElementById('keywordFilter').value = '';
            localStorage.setItem('keywordFilter', '');
            
            // 清除心情篩選
            selectedMoodFilters = [];
            localStorage.setItem('selectedMoodFilters', JSON.stringify(selectedMoodFilters));
            
            // 重新創建心情按鈕（全部變為未選中狀態）
            createVotingMoodFilter();
            
            // 更新項目計數最大值
            updateItemCountMax();
        }

        // 新增：清除設定頁篩選功能
        function clearSettingsFilters() {
            // 清除輸入框內容
            document.getElementById('itemFilter').value = '';
            
            // 清除心情篩選
            settingsMoodFilters = [];
            localStorage.setItem('settingsMoodFilters', JSON.stringify(settingsMoodFilters));
            
            // 重新創建心情按鈕（全部變為未選中狀態）
            createSettingsMoodFilter();
            
            // 更新項目列表
            filterItems();
        }

        // 新增：清除統計頁篩選功能
        function clearStatsFilters() {
            // 清除輸入框內容
            document.getElementById('rankingSearch').value = '';
            
            // 清除心情篩選
            statsMoodFilters = [];
            localStorage.setItem('statsMoodFilters', JSON.stringify(statsMoodFilters));
            
            // 重新創建心情按鈕（全部變為未選中狀態）
            createStatsMoodFilter();
            
            // 重新載入統計資料
            loadStats();
        }

        function createSettingsMoodFilter() {
			const container = document.getElementById('settingsMoodButtons');
			container.innerHTML = '';
			
			// 设置下拉选单的初始值
			const settingsMoodLogicSelect = document.getElementById('settingsMoodLogic');
			if (settingsMoodLogicSelect) {
				settingsMoodLogicSelect.value = settingsMoodLogic;
			}
			
			moodEmojis.forEach(emoji => {
				const moodBtn = document.createElement('button');
				moodBtn.className = 'mood-filter-btn';
				moodBtn.textContent = emoji;
				moodBtn.dataset.emoji = emoji;
				
				// 检查是否已经选中
				if (settingsMoodFilters.includes(emoji)) {
					moodBtn.classList.add('active');
				}
				
				moodBtn.onclick = function() {
					toggleSettingsMoodFilter(emoji, moodBtn);
				};
				
				container.appendChild(moodBtn);
			});
		}

        function toggleSettingsMoodFilter(emoji, button) {
            if (settingsMoodFilters.includes(emoji)) {
                // 如果已經存在，移除它
                settingsMoodFilters = settingsMoodFilters.filter(m => m !== emoji);
                button.classList.remove('active');
            } else {
                // 如果不存在，添加它
                settingsMoodFilters.push(emoji);
                button.classList.add('active');
            }
            
            // 保存到localStorage
            localStorage.setItem('settingsMoodFilters', JSON.stringify(settingsMoodFilters));
            
            // 更新項目列表
            filterItems();
        }

        // 修改：處理投票頁篩選輸入框的Enter鍵事件
        function handleKeywordFilterKeydown(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                
                // 使用 setTimeout 確保事件處理完全完成
                setTimeout(() => {
                    startGame();
                }, 0);
                
                return false;
            }
        }

        function startGame() {
            // 防止重複執行
            if (startGameExecuting) {
                return;
            }
            
            try {
                startGameExecuting = true;
                
                const gameId = document.getElementById('gameSelect').value;
                if (!gameId) return;
                currentGame = games[gameId];
                selectedExtractMode = document.getElementById('extractMode').value;
                localStorage.setItem('selectedExtractMode', selectedExtractMode);
                const itemCount = parseInt(document.getElementById('itemCount').value);
                selectedItemCount = itemCount; localStorage.setItem('selectedItemCount', selectedItemCount);
                if (itemCount < 4) { alert('參賽項目數必須至少為4'); return; }

                // 關鍵字篩選
                const keyword = document.getElementById('keywordFilter').value.toLowerCase().trim();
                let selectedItems = [...currentGame.items];
                
                // 修改：保存篩選輸入框內容到localStorage
                localStorage.setItem('keywordFilter', keyword);
                
                if (keyword) {
                    selectedItems = selectedItems.filter(item => item.name.toLowerCase().includes(keyword));
                }
                
                // 應用心情篩選
                if (selectedMoodFilters.length > 0) {
                    selectedItems = applyMoodFilter(selectedItems, selectedMoodFilters, votingMoodLogic);
                }
                
                if (selectedItems.length < 4) { 
                    alert('篩選後的項目數不足4個，請調整篩選條件'); 
                    return; 
                }
                
                uniformPool = []; // 重置均勻抽取暫存池
                
                switch (selectedExtractMode) {
                    case 'leastVoted': selectedItems.sort((a, b) => a.votes - b.votes); break; // 最少票次
                    case 'newest': selectedItems.sort((a, b) => b.addedTime - a.addedTime); break; // 最近加入
                    case 'uniform': // 均勻抽取
                        // 從所有項目中隨機選取設定的項目數
                        const shuffled = [...selectedItems].sort(() => 0.5 - Math.random());
                        uniformPool = shuffled.slice(0, itemCount);
                        break;
                    case 'strongest': 
                        selectedItems = sortItemsByRank(selectedItems);
                        break; // 排名最強
                    case 'weakest': 
                        selectedItems = sortItemsByRank(selectedItems).reverse();
                        break; //排名最弱
                    case 'middle': // 排名中段
                        selectedItems = sortItemsByRank(selectedItems);
                        const totalItems = selectedItems.length;
                        // 修正排名中段計算：確保抽取中間的項目
                        const startIndex = Math.floor((totalItems - itemCount) / 2);
                        const endIndex = startIndex + itemCount;
                        selectedItems = selectedItems.slice(startIndex, endIndex);
                        break;
                    case 'highestWinRate': // 勝率最高
                        selectedItems.sort((a, b) => {
                            const winRateA = a.votes > 0 ? (a.wins || 0) / a.votes : 0;
                            const winRateB = b.votes > 0 ? (b.wins || 0) / b.votes : 0;
                            return winRateB - winRateA;
                        });
                        break;
                    case 'lowestWinRate': // 勝率最低
                        selectedItems.sort((a, b) => {
                            const winRateA = a.votes > 0 ? (a.wins || 0) / a.votes : 0;
                            const winRateB = b.votes > 0 ? (b.wins || 0) / b.votes : 0;
                            return winRateA - winRateB;
                        });
                        break;
                    case 'middleWinRate': // 勝率中段（最接近50%的項目）
                        selectedItems.sort((a, b) => {
                            const winRateA = a.votes > 0 ? (a.wins || 0) / a.votes : 0;
                            const winRateB = b.votes > 0 ? (b.wins || 0) / b.votes : 0;
                            const diffA = Math.abs(winRateA - 0.5);
                            const diffB = Math.abs(winRateB - 0.5);
                            return diffA - diffB;
                        });
                        // 只取前itemCount個最接近50%勝率的項目
                        selectedItems = selectedItems.slice(0, itemCount);
                        break;
                    case 'nearAverage': // 近平均分（最接近真實平均分的項目）
                        // 修改：計算真實平均分
                        let totalScore = 0;
                        selectedItems.forEach(item => totalScore += item.score);
                        const avgScore = selectedItems.length > 0 ? totalScore / selectedItems.length : 1500;
                        
                        selectedItems.sort((a, b) => {
                            const diffA = Math.abs(a.score - avgScore);
                            const diffB = Math.abs(b.score - avgScore);
                            return diffA - diffB;
                        });
                        // 只取前itemCount個最接近真實平均分的項目
                        selectedItems = selectedItems.slice(0, itemCount);
                        break;
                    case 'maxError': // 最大誤差
                        selectedItems.sort((a, b) => {
                            const errorA = calculateError(a);
                            const errorB = calculateError(b);
                            // 誤差為無限大的排在最前面
                            if (errorA === Infinity && errorB !== Infinity) return -1;
                            if (errorA !== Infinity && errorB === Infinity) return 1;
                            return errorB - errorA; // 誤差大的排先
                        });
                        // 只取前itemCount個誤差最大的項目
                        selectedItems = selectedItems.slice(0, itemCount);
                        break;
                }

                activeItems = selectedExtractMode === 'uniform' ? uniformPool : 
                             selectedExtractMode === 'middle' || selectedExtractMode === 'middleWinRate' || selectedExtractMode === 'nearAverage' || selectedExtractMode === 'maxError' ? selectedItems : 
                             selectedItems.slice(0, itemCount);
                             
                if (activeItems.length < 2) { alert('選擇的項目數不足'); return; }

                document.getElementById('votingArea').classList.remove('hidden');
                document.getElementById('voteSlider').value = 50;
                const slider = document.getElementById('voteSlider');
                
                // 重新設置滑鼠事件監聽器
                slider.onmousedown = function(e) {
                    // 只有左鍵按下時才設置標記
                    if (e.button === 0) {
                        isLeftMouseDownOnSlider = true;
                    }
                };
                
                slider.onmouseup = function(e) {
                    // 只有左鍵放開且之前是左鍵按下的狀態才觸發投票
                    if (e.button === 0 && isLeftMouseDownOnSlider) {
                        submitVote();
                    }
                    isLeftMouseDownOnSlider = false;
                };
                
                slider.ontouchend = submitVote;
                // 防止右鍵觸發投票
                slider.oncontextmenu = function(e) { e.preventDefault(); return false; };
                
                voteHistory = []; document.getElementById('undoBtn').disabled = true;
                currentPair = null;
                
                // 保持statsVisible狀態不變
                if (statsVisible) {
                    document.getElementById('toggleStatsButton').textContent = '👁️';
                    updateItemStats();
                    document.getElementById('stats1').classList.remove('hidden');
                    document.getElementById('stats2').classList.remove('hidden');
                } else {
                    document.getElementById('toggleStatsButton').textContent = '👁️';
                    document.getElementById('stats1').classList.add('hidden');
                    document.getElementById('stats2').classList.add('hidden');
                }
                
                loadNewPair();
            } finally {
                // 確保標誌被重置
                startGameExecuting = false;
            }
        }

        function loadNewPair(replacePosition = null) {
            if (!activeItems || activeItems.length < 2) return;
            if (replacePosition === null || !currentPair) {
                const idx1 = Math.floor(Math.random() * activeItems.length);
                let idx2 = Math.floor(Math.random() * activeItems.length);
                while (idx2 === idx1) idx2 = Math.floor(Math.random() * activeItems.length);
                currentPair = [activeItems[idx1], activeItems[idx2]];
                loadBothVideos();
                createMoodButtons();
            } else {
                const positions = replacePosition === 'both' ? [0, 1] : [replacePosition];
                positions.forEach(pos => {
                    let newItemIndex;
                    do { newItemIndex = Math.floor(Math.random() * activeItems.length); }
                    while (activeItems[newItemIndex].id === currentPair[0].id || activeItems[newItemIndex].id === currentPair[1].id);
                    currentPair[pos] = activeItems[newItemIndex];
                    document.getElementById(`option${pos + 1}Title`).textContent = currentPair[pos].name;
                    const link = getRandomValidLink(currentPair[pos]);
                    currentVideoLinks[pos] = link;
                    loadVideo(`video${pos + 1}Container`, link, pos + 1);
                });
                if (replacePosition === 'both') loadBothVideos();
                createMoodButtons();
            }
            // 每次載入新對戰組合時更新統計資料
            updateItemStats();
        }

        function createMoodButtons() {
            // 為兩個選項創建心情按鈕
            [1, 2].forEach(optionNum => {
                const moodButtonsContainer = document.getElementById(`mood${optionNum}Buttons`);
                moodButtonsContainer.innerHTML = '';
                
                moodEmojis.forEach((emoji, index) => {
                    const moodBtn = document.createElement('button');
                    moodBtn.className = 'mood-btn';
                    moodBtn.textContent = emoji;
                    moodBtn.dataset.emoji = emoji;
                    
                    // 檢查當前項目是否已經有這個心情標記
                    const item = currentPair[optionNum - 1];
                    if (item.moods && item.moods.includes(emoji)) {
                        moodBtn.classList.add('active');
                    }
                    
                    moodBtn.onclick = function() {
                        toggleMood(optionNum, emoji, moodBtn);
                    };
                    
                    moodButtonsContainer.appendChild(moodBtn);
                });
            });
        }

        function toggleMood(optionNum, emoji, button) {
            const item = currentGame.items.find(i => i.id === currentPair[optionNum - 1].id);
            if (!item) return;
            
            // 初始化心情數組
            if (!item.moods) item.moods = [];
            
            // 切換心情狀態
            if (item.moods.includes(emoji)) {
                // 如果已經存在，移除它
                item.moods = item.moods.filter(m => m !== emoji);
                button.classList.remove('active');
            } else {
                // 如果不存在，添加它
                item.moods.push(emoji);
                button.classList.add('active');
            }
            
            // 保存到本地存儲
            localStorage.setItem('games', JSON.stringify(games));
            syncData();
        }

        function createStatsMoodFilter() {
			const container = document.getElementById('statsMoodButtons');
			container.innerHTML = '';
			
			// 设置下拉选单的初始值
			const statsMoodLogicSelect = document.getElementById('statsMoodLogic');
			if (statsMoodLogicSelect) {
				statsMoodLogicSelect.value = statsMoodLogic;
			}
			
			moodEmojis.forEach(emoji => {
				const moodBtn = document.createElement('button');
				moodBtn.className = 'mood-filter-btn';
				moodBtn.textContent = emoji;
				moodBtn.dataset.emoji = emoji;
				
				// 检查是否已经选中
				if (statsMoodFilters.includes(emoji)) {
					moodBtn.classList.add('active');
				}
				
				moodBtn.onclick = function() {
					toggleStatsMoodFilter(emoji, moodBtn);
				};
				
				container.appendChild(moodBtn);
			});
		}

        function toggleStatsMoodFilter(emoji, button) {
            if (statsMoodFilters.includes(emoji)) {
                // 如果已經存在，移除它
                statsMoodFilters = statsMoodFilters.filter(m => m !== emoji);
                button.classList.remove('active');
            } else {
                // 如果不存在，添加它
                statsMoodFilters.push(emoji);
                button.classList.add('active');
            }
            
            // 保存到localStorage
            localStorage.setItem('statsMoodFilters', JSON.stringify(statsMoodFilters));
            
            // 重新載入統計資料
            loadStats();
        }

        function loadBothVideos() {
            ['option1Title', 'option2Title'].forEach((id, idx) => 
                document.getElementById(id).textContent = currentPair[idx].name);
            [0, 1].forEach(idx => {
                const link = getRandomValidLink(currentPair[idx]);
                currentVideoLinks[idx] = link;
                loadVideo(`video${idx + 1}Container`, link, idx + 1);
            });
        }

        function loadVideo(containerId, link, playerNum) {
            const container = document.getElementById(containerId);
            const item = currentGame.items.find(i => i.id === currentPair[playerNum - 1].id);
            const isInvalid = item?.invalidLinks?.includes(link);
            
            if (!link) {
                container.innerHTML = '<div style="color: var(--danger); background: #fff; padding: 20px; text-align: center; border-radius: 10px;">無影片連結</div>';
                return;
            }

            if (playerNum === 1 && player1) { try { player1.destroy(); } catch(e) {} player1 = null; }
            else if (playerNum === 2 && player2) { try { player2.destroy(); } catch(e) {} player2 = null; }

            const buttons = `
                <button class="invalid-btn ${isInvalid ? 'active' : ''}" onclick="toggleInvalidLink(${playerNum})">⚠️</button>
                <button class="reload-btn" onclick="reloadVideo(${playerNum})">
                    <svg viewBox="0 0 24 24"><path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/></svg>
                </button>`;

            if (link.includes('youtube.com') || link.includes('youtu.be')) {
                let videoId = '';
                if (link.includes('youtu.be/')) videoId = link.split('youtu.be/')[1].split(/[?&#]/)[0];
                else if (link.includes('youtube.com/watch')) {
                    const match = link.match(/[?&]v=([^&#]+)/);
                    if (match) videoId = match[1];
                } else if (link.includes('youtube.com/embed/')) videoId = link.split('embed/')[1].split(/[?&#]/)[0];
                else if (link.includes('youtube.com/shorts/')) videoId = link.split('shorts/')[1].split(/[?&#]/)[0];
                
                if (videoId) {
                    const playerId = `youtube-player-${playerNum}`;
                    container.innerHTML = `${buttons}<div id="${playerId}"></div>`;
                    if (youtubeReady) {
                        const player = new YT.Player(playerId, {
                            height: '100%', width: '100%', videoId: videoId,
                            playerVars: { autoplay: 0, controls: 1, rel: 0, modestbranding: 1, playsinline: 1 },
                            events: { onReady: event => event.target.mute() }
                        });
                        if (playerNum === 1) player1 = player;
                        else player2 = player;
                    } else {
                        container.innerHTML = `${buttons}<iframe src="https://www.youtube-nocookie.com/embed/${videoId}?enablejsapi=1&rel=0&modestbranding=1&playsinline=1&mute=1" frameborder="0" allowfullscreen></iframe>`;
                    }
                }
            } else if (link.includes('bilibili.com')) {
                let bvMatch = link.match(/BV[\w]+/);
                if (bvMatch) container.innerHTML = `${buttons}<iframe src="https://player.bilibili.com/player.html?bvid=${bvMatch[0]}&high_quality=1&autoplay=0" scrolling="no" frameborder="0" allowfullscreen></iframe>`;
                else {
                    const avMatch = link.match(/av(\d+)/);
                    if (avMatch) container.innerHTML = `${buttons}<iframe src="https://player.bilibili.com/player.html?aid=${avMatch[1]}&high_quality=1&autoplay=0" scrolling="no" frameborder="0" allowfullscreen></iframe>`;
                }
            }
            
            // 更新統計資訊以顯示新的影片URL
            if (statsVisible) updateItemStats();
        }

        function voteExtreme(value) { 
            if (cooldownActive) return;
            document.getElementById('voteSlider').value = value; 
            submitVote(); 
        }
        
        function submitVote() { 
            if (cooldownActive) return;
            if (currentGame && currentPair) processVote(parseInt(document.getElementById('voteSlider').value)); 
        }
        
        function submitTie() { 
            if (cooldownActive) return;
            if (currentGame && currentPair) processVote(50); 
        }

        function startCooldown() {
            cooldownActive = true;
            
            // 禁用所有投票相關控制項，包括復原按鈕
            document.getElementById('voteSlider').disabled = true;
            document.querySelectorAll('.flex-center .btn').forEach(btn => {
                btn.disabled = true;
            });
            
            // 2秒後結束冷卻
            setTimeout(() => {
                cooldownActive = false;
                document.getElementById('voteSlider').disabled = false;
                document.querySelectorAll('.flex-center .btn').forEach(btn => {
                    // 復原按鈕根據voteHistory狀態決定是否啟用
                    if (btn.id === 'undoBtn') {
                        btn.disabled = (voteHistory.length === 0);
                    } else {
                        btn.disabled = false;
                    }
                });
            }, 2000);
        }

        function processVote(sliderValue) {
            // 開始冷卻
            startCooldown();
            
            // 保存當前心情狀態到投票歷史中
            const oldMoods = {
                item1: [...(currentPair[0].moods || [])],
                item2: [...(currentPair[1].moods || [])]
            };
            
            voteHistory.push({
                pair: [...currentPair], value: sliderValue,
                oldScores: { item1: currentPair[0].score, item2: currentPair[1].score },
                oldWins: { item1: currentPair[0].wins || 0, item2: currentPair[1].wins || 0 },
                oldLosses: { item1: currentPair[0].losses || 0, item2: currentPair[1].losses || 0 },
                oldMoods: oldMoods // 保存心情狀態
            });

            // 計算兩個項目的誤差
            let error1 = calculateError(currentPair[0]);
            let error2 = calculateError(currentPair[1]);
            
            // 如果誤差是Infinity，則用700代替
            if (error1 === Infinity) error1 = 700 ;
            if (error2 === Infinity) error2 = 700 ;
            
            // 計算平均誤差
            // const avgError = (error1 + error2) / 2;
            
            // 將平均誤差映射到16-80的範圍，最大誤差設為500
            let k1 = 16 + (error1 / 700) * (80 - 16);
			let k2 = 16 + (error2 / 700) * (80 - 16);
            
            // 確保k值在16到80之間
            k1 = Math.max(16, Math.min(80, k1));
			k2 = Math.max(16, Math.min(80, k2));

            const scoreA = currentPair[0].score, scoreB = currentPair[1].score;
            const winRateA = 1 - (sliderValue / 100), winRateB = sliderValue / 100;
            const expectedA = 1 / (1 + Math.pow(10, (scoreB - scoreA) / 400));
            const expectedB = 1 / (1 + Math.pow(10, (scoreA - scoreB) / 400));
            
            const item1 = currentGame.items.find(item => item.id === currentPair[0].id);
            const item2 = currentGame.items.find(item => item.id === currentPair[1].id);
            
            if (item1 && item2) {
                const newScore1 = Math.round(item1.score + k1 * (winRateA - expectedA));
                const newScore2 = Math.round(item2.score + k2 * (winRateB - expectedB));
                
                // 修改：分數改變動畫改到投票滑動條的左右方空白位置
                const leftElement = document.getElementById('sliderScoreChangeLeft');
                const rightElement = document.getElementById('sliderScoreChangeRight');
                
                const change1 = newScore1 - item1.score;
                const change2 = newScore2 - item2.score;
				
				console.log(`k1 = ${k1} , change = ${change1}`) ;
				console.log(`k2 = ${k2} , change = ${change2}`) ;
                
                // 設置動畫狀態標誌
                scoreAnimationActive = true;
                
                // 左邊動畫（選項1）
                leftElement.textContent = change1 > 0 ? `+${change1}` : `${change1}` ;
                leftElement.className = `slider-score-change left ${change1 > 0 ? 'positive' : change1 < 0 ? 'negative' : 'zero' }`;
                leftElement.style.animation = 'none'; 
                leftElement.offsetHeight; 
                leftElement.style.animation = null;
                
                // 右邊動畫（選項2）
                rightElement.textContent = change2 > 0 ? `+${change2}` : `${change2}` ;
                rightElement.className = `slider-score-change right ${change2 > 0 ? 'positive' : change2 < 0 ? 'negative' : 'zero' }`;
                rightElement.style.animation = 'none'; 
                rightElement.offsetHeight; 
                rightElement.style.animation = null;
                
                item1.score = newScore1; item2.score = newScore2;
                item1.votes++; item2.votes++;
                ['wins', 'losses'].forEach(prop => { if (!item1[prop]) item1[prop] = 0; if (!item2[prop]) item2[prop] = 0; });
                
                if (sliderValue < 50) { item1.wins++; item2.losses++; }
                else if (sliderValue > 50) { item2.wins++; item1.losses++; }
                
                currentGame.votes.push({ timestamp: Date.now(), item1: currentPair[0].id, item2: currentPair[1].id, value: sliderValue });
                localStorage.setItem('games', JSON.stringify(games));
                syncData();
                
                const replacePosition = sliderValue === 50 ? 'both' : sliderValue < 50 ? 1 : 0;
                setTimeout(() => {
                    loadNewPair(replacePosition);
                    document.getElementById('voteSlider').value = 50;
                }, 1500);
                
                // 動畫結束後重置動畫狀態
                setTimeout(() => {
                    scoreAnimationActive = false;
                }, 2000);
            }
        }

        function undoVote() {
            if (voteHistory.length === 0) return;
            const lastVote = voteHistory.pop();
            currentGame.votes.pop();
            
            const item1 = currentGame.items.find(item => item.id === lastVote.pair[0].id);
            const item2 = currentGame.items.find(item => item.id === lastVote.pair[1].id);
            
            if (item1 && item2) {
                ['score', 'wins', 'losses'].forEach(prop => {
                    item1[prop] = lastVote[prop === 'score' ? 'oldScores' : `old${prop.charAt(0).toUpperCase() + prop.slice(1)}`].item1;
                    item2[prop] = lastVote[prop === 'score' ? 'oldScores' : `old${prop.charAt(0).toUpperCase() + prop.slice(1)}`].item2;
                });
                
                // 復原心情狀態
                if (lastVote.oldMoods) {
                    item1.moods = [...lastVote.oldMoods.item1];
                    item2.moods = [...lastVote.oldMoods.item2];
                }
                
                item1.votes--; item2.votes--;
                localStorage.setItem('games', JSON.stringify(games));
                syncData();
                
                currentPair = lastVote.pair;
                ['option1Title', 'option2Title'].forEach((id, idx) => 
                    document.getElementById(id).textContent = currentPair[idx].name);
                [0, 1].forEach(idx => {
                    const link = getRandomValidLink(currentPair[idx]);
                    currentVideoLinks[idx] = link;
                    loadVideo(`video${idx + 1}Container`, link, idx + 1);
                });
                document.getElementById('voteSlider').value = 50;
                
                // 重新創建心情按鈕以反映復原後的心情狀態
                createMoodButtons();
                
                if (statsVisible) updateItemStats();
                if (voteHistory.length === 0) document.getElementById('undoBtn').disabled = true;
            }
        }

        function updateStatsGameSelect() {
            const select = document.getElementById('statsGameSelect');
            const currentValue = select.value;
            select.innerHTML = '<option value="">請選擇遊戲</option>';
            Object.values(games).forEach(game => {
                const option = document.createElement('option');
                option.value = game.id; option.textContent = game.name;
                select.appendChild(option);
            });
            if (currentValue) select.value = currentValue;
        }

        function searchRanking() {
            const searchText = document.getElementById('rankingSearch').value.toLowerCase();
            const rankingItems = document.querySelectorAll('#rankingList .list-item');
            let visibleCount = 0;
            
            rankingItems.forEach(item => {
                const itemName = item.querySelector('.item-name');
                if (itemName) {
                    const isVisible = itemName.textContent.toLowerCase().includes(searchText);
                    item.style.display = isVisible ? '' : 'none';
                    if (isVisible) visibleCount++;
                }
            });
            
            // 更新排行榜標題為："排行榜 ([當前顯示的項目數]/[該遊戲的總項目數])"
            const gameId = document.getElementById('statsGameSelect').value;
            const totalItems = gameId ? games[gameId].items.length : 0;
            const titleText = `排行榜 (${visibleCount}/${totalItems})`;
            document.getElementById('rankingTitle').textContent = titleText;
        }

        function loadStats() {
            const gameId = document.getElementById('statsGameSelect').value;
            selectedGameId = gameId; localStorage.setItem('selectedGameId', selectedGameId);
            if (!gameId) { document.getElementById('statsContent').classList.add('hidden'); return; }

            // 保存搜尋字串
            const searchText = document.getElementById('rankingSearch').value;

            const game = games[gameId];
            document.getElementById('statsContent').classList.remove('hidden');
            document.getElementById('totalItems').textContent = game.items.length;
            document.getElementById('totalVotes').textContent = game.votes.length;
            
			/*
			// 平均全抽取
            let H = 0, n = game.items.length;
            for(let k = 1; k < n; ++k) H += 1/k;
			let expectedValue = Math.round(n*(n-1)/2*H) ;
			*/
			let expectedValue = 25 * game.items.length ; // 每項目50票次
            document.getElementById('expectedVotes').textContent = expectedValue ;
            
            // 修改：將最低分數、平均分數、中位分數、最高分數分開顯示
            let minScore = Infinity, maxScore = -Infinity, totalScore = 0;
            let scores = [];
            game.items.forEach(item => {
                if (item.score < minScore) minScore = item.score;
                if (item.score > maxScore) maxScore = item.score;
                totalScore += item.score;
                scores.push(item.score);
            });
            
            // 計算中位分數
            scores.sort((a, b) => a - b);
            let medianScore;
            const mid = Math.floor(scores.length / 2);
            if (scores.length % 2 === 0) {
                medianScore = (scores[mid - 1] + scores[mid]) / 2;
            } else {
                medianScore = scores[mid];
            }
            
            const avgScore = game.items.length > 0 ? (totalScore / game.items.length).toFixed(2) : 1500;
            document.getElementById('minScore').textContent = minScore;
            document.getElementById('avgScore').textContent = avgScore;
            document.getElementById('medianScore').textContent = medianScore;
            document.getElementById('maxScore').textContent = maxScore;
            
            // 修改：計算平均誤差（除了∞）
            let totalError = 0, validErrorCount = 0;
            game.items.forEach(item => {
                const error = calculateError(item);
                if (error !== Infinity) {
                    totalError += error;
                    validErrorCount++;
                }
            });
            const avgError = validErrorCount > 0 ? (totalError / validErrorCount).toFixed(2) : 0;
            document.getElementById('avgError').textContent = avgError;

            const sortBy = document.getElementById('sortBy').value;
            let sortedItems = [...game.items];
            
            // 應用心情篩選
            if (statsMoodFilters.length > 0) {
                sortedItems = applyMoodFilter(sortedItems, statsMoodFilters, statsMoodLogic);
            }
            
            // 建立所有項目的真實排名表（按照分數->誤差->勝率->票次排序）
            const allItemsRanked = sortItemsByRank(game.items);
            const rankMap = new Map();
            allItemsRanked.forEach((item, index) => {
                rankMap.set(item.id, index + 1);
            });

            switch(sortBy) {
                case 'rank':
                case 'score':
                    sortedItems = sortItemsByRank(sortedItems);
                    break;
                case 'winRate': 
                    sortedItems.sort((a, b) => {
                        const winRateA = a.votes > 0 ? (a.wins || 0) / a.votes : 0;
                        const winRateB = b.votes > 0 ? (b.wins || 0) / b.votes : 0;
                        return winRateB - winRateA;
                    }); 
                    break;
                case 'votes': sortedItems.sort((a, b) => b.votes - a.votes); break;
                case 'time': sortedItems.sort((a, b) => (b.addedTime || 0) - (a.addedTime || 0)); break;
                case 'error': // 依誤差排序（誤差為無限大的排最先）
                    sortedItems.sort((a, b) => {
                        const errorA = calculateError(a);
                        const errorB = calculateError(b);
                        // 誤差為無限大的排在最前面
                        if (errorA === Infinity && errorB !== Infinity) return -1;
                        if (errorA !== Infinity && errorB === Infinity) return 1;
                        return errorB - errorA; // 誤差大的排先
                    });
                    break;
            }
            
            const rankingList = document.getElementById('rankingList');
            rankingList.innerHTML = '';
            sortedItems.forEach((item, index) => {
                const winRate = item.votes > 0 ? ((item.wins || 0) / item.votes * 100).toFixed(1) : '0.0';
                const p = item.votes > 0 ? ( item.wins || 0 ) / item.votes : 0 ;
                let error = calculateError(item); // 使用新的計算誤差函數
                error = error === Infinity ? '∞' : Math.round(error) ;
                const rankingItem = document.createElement('div');
                rankingItem.className = 'list-item';
                // 使用全局排名，而不是篩選後的排名
                const displayRank = rankMap.get(item.id);
                
                // 創建心情顯示區域
                let moodDisplay = '';
                if (item.moods && item.moods.length > 0) {
                    moodDisplay = `<div class="mood-display">${item.moods.join('')}</div>`;
                }

                rankingItem.innerHTML = `
                    <span style="font-size: 1.5em; font-weight: bold; color: var(--primary); margin-right: 20px;">#${displayRank}</span>
                    <span class="item-name" style="flex: 1; font-weight: bold;">${item.name}</span>
                    <div style="display: flex; align-items: center;">
                        ${moodDisplay}
                        <span style="font-size: 1.2em; color: var(--success);">分數: ${item.score}±${error} | 勝率: ${winRate}% | 票次: ${item.votes}</span>
                    </div>`;
                rankingList.appendChild(rankingItem);
            });

            // 恢復搜尋字串並觸發搜尋
            document.getElementById('rankingSearch').value = searchText;
            
            // 更新排行榜標題為："排行榜 ([當前顯示的項目數]/[該遊戲的總項目數])"
            const titleText = `排行榜 (${sortedItems.length}/${game.items.length})`;
            document.getElementById('rankingTitle').textContent = titleText;
            
            if (searchText) searchRanking();
        }

        function refreshStats() {
            games = JSON.parse(localStorage.getItem('games')) || {};
            updateStatsGameSelect();
            const gameId = document.getElementById('statsGameSelect').value;
            if (gameId) loadStats();
        }

        function clearStats() {
            const gameId = document.getElementById('statsGameSelect').value;
            if (!gameId) { alert('請先選擇遊戲'); return; }
            if (confirm('確定要清除這個遊戲的所有投票數據嗎？此操作無法復原！')) {
                const game = games[gameId];
                game.items.forEach(item => {
                    item.score = 1500; item.votes = 0; item.wins = 0; item.losses = 0;
                    item.moods = []; // 同時清除心情標記
                });
                game.votes = [];
                localStorage.setItem('games', JSON.stringify(games));
                syncData();
                loadStats(); alert('統計數據已清除');
            }
        }

        function getFormattedDate() {
            const now = new Date();
            return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;
        }

        function exportSettings() {
            const settingsData = {};
            Object.values(games).forEach(game => {
                settingsData[game.id] = {
                    id: game.id, name: game.name,
                    items: game.items.map(item => ({
                        id: item.id, name: item.name, links: item.links || [],
                        invalidLinks: item.invalidLinks || [], addedTime: item.addedTime,
                        moods: item.moods || [] // 導出心情標記
                    }))
                };
            });
            downloadFile(settingsData, `設定${getFormattedDate()}.json`);
        }

        function exportStats() {
            const statsData = {};
            Object.values(games).forEach(game => {
                statsData[game.id] = {
                    id: game.id, name: game.name, votes: game.votes,
                    items: game.items.map(item => ({
                        id: item.id, name: item.name, score: item.score, votes: item.votes,
                        wins: item.wins || 0, losses: item.losses || 0,
                        moods: item.moods || [] // 導出心情標記
                    }))
                };
            });
            downloadFile(statsData, `統計${getFormattedDate()}.json`);
        }

        function downloadFile(data, filename) {
            const dataStr = JSON.stringify(data, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url; link.download = filename; link.click();
            URL.revokeObjectURL(url);
        }

        function importSettings(event) { importFile(event, 'settings'); }
        function importStats(event) { importFile(event, 'stats'); }

        function importFile(event, type) {
            const file = event.target.files[0];
            if (!file) return;
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    const isSettings = type === 'settings';
                    const message = isSettings ? '匯入設定將會覆蓋現有遊戲設定（但保留統計資料），確定要繼續嗎？' : '匯入統計將會覆蓋現有投票資料，確定要繼續嗎？';
                    
                    if (confirm(message)) {
                        Object.values(importedData).forEach(importedGame => {
                            if (isSettings) {
                                if (games[importedGame.id]) {
                                    const existingGame = games[importedGame.id];
                                    importedGame.votes = existingGame.votes || [];
                                    importedGame.items.forEach(item => {
                                        const existingItem = existingGame.items.find(ei => ei.id === item.id);
                                        if (existingItem) {
                                            ['score', 'votes', 'wins', 'losses'].forEach(prop => 
                                                item[prop] = existingItem[prop] || (prop === 'score' ? 1500 : 0));
                                        } else {
                                            item.score = 1500; item.votes = 0; item.wins = 0; item.losses = 0;
                                        }
                                        if (!item.links) item.links = item.link ? [item.link] : [];
                                        if (!item.invalidLinks) item.invalidLinks = [];
                                        if (!item.moods) item.moods = [];
                                    });
                                } else {
                                    importedGame.votes = [];
                                    importedGame.items.forEach(item => {
                                        item.score = 1500; item.votes = 0; item.wins = 0; item.losses = 0;
                                        if (!item.links) item.links = item.link ? [item.link] : [];
                                        if (!item.invalidLinks) item.invalidLinks = [];
                                        if (!item.moods) item.moods = [];
                                    });
                                }
                                games[importedGame.id] = importedGame;
                            } else {
                                if (games[importedGame.id]) {
                                    games[importedGame.id].votes = importedGame.votes || [];
                                    importedGame.items.forEach(importedItem => {
                                        const item = games[importedGame.id].items.find(i => i.id === importedItem.id);
                                        if (item) {
                                            ['score', 'votes', 'wins', 'losses', 'moods'].forEach(prop => 
                                                item[prop] = importedItem[prop] || (prop === 'score' ? 1500 : (prop === 'moods' ? [] : 0)));
                                        }
                                    });
                                }
                            }
                        });
                        localStorage.setItem('games', JSON.stringify(games));
                        syncData();
                        if (isSettings) updateGamesList();
                        else loadStats();
                        alert(`${isSettings ? '設定' : '統計'}匯入成功！`);
                    }
                } catch (error) { alert('匯入失敗：檔案格式錯誤'); }
            };
            reader.readAsText(file);
            event.target.value = '';
        }

        // 清除所有無效連結 - 修改為刪除整行無效連結
        function clearAllInvalidLinks() {
            if (!selectedGameForEdit) { alert('請先選擇要編輯的遊戲'); return; }
            
            if (confirm('確定要刪除所有項目的無效連結嗎？此操作無法復原！')) {
                const game = games[selectedGameForEdit];
                let deletedCount = 0;
                
                game.items.forEach(item => {
                    if (item.invalidLinks && item.invalidLinks.length > 0) {
                        // 從links中刪除所有在invalidLinks中的連結
                        const originalLinkCount = item.links.length;
                        item.links = item.links.filter(link => !item.invalidLinks.includes(link));
                        deletedCount += (originalLinkCount - item.links.length);
                        // 清空invalidLinks
                        item.invalidLinks = [];
                    }
                });
                
                localStorage.setItem('games', JSON.stringify(games));
                syncData();
                updateItemsListWithPagination();
                alert(`已刪除 ${deletedCount} 個無效連結！`);
            }
        }

        // 跨瀏覽器分頁同步
        function syncData() {
            // 發出自定義事件通知其他標籤頁數據已更新
            localStorage.setItem('games_sync', Date.now().toString());
        }

        // 監聽離開頁面事件
        window.addEventListener('beforeunload', function (e) {
            if (isEditing) {
                e.preventDefault();
                e.returnValue = '您正在編輯項目，確定要離開嗎？';
                return e.returnValue;
            }
        });

        // 新增：收起項目管理功能
        function toggleItemsManagement() {
			// 如果正在編輯項目，保存當前編輯內容
            if (isEditing && editingItemId) {
                saveEditingItemData();
            }
            document.getElementById('itemsManagement').classList.add('hidden');
        }

        document.addEventListener('DOMContentLoaded', function() {
            migrateOldData(); updateGamesList(); updateGameSelect();
            createVotingMoodFilter();
            
            // 從localStorage讀取心情篩選邏輯
            votingMoodLogic = localStorage.getItem('votingMoodLogic') || 'and';
            settingsMoodLogic = localStorage.getItem('settingsMoodLogic') || 'and';
            statsMoodLogic = localStorage.getItem('statsMoodLogic') || 'and';
            
            // 設置下拉選單的初始值
            const votingMoodLogicSelect = document.getElementById('votingMoodLogic');
            if (votingMoodLogicSelect) {
                votingMoodLogicSelect.value = votingMoodLogic;
            }
            const settingsMoodLogicSelect = document.getElementById('settingsMoodLogic');
            if (settingsMoodLogicSelect) {
                settingsMoodLogicSelect.value = settingsMoodLogic;
            }
            const statsMoodLogicSelect = document.getElementById('statsMoodLogic');
            if (statsMoodLogicSelect) {
                statsMoodLogicSelect.value = statsMoodLogic;
            }
            
            // 為心情邏輯下拉選單添加事件監聽
            document.getElementById('votingMoodLogic').addEventListener('change', function() {
                votingMoodLogic = this.value;
                localStorage.setItem('votingMoodLogic', votingMoodLogic);
                updateItemCountMax();
            });
            
            document.getElementById('settingsMoodLogic').addEventListener('change', function() {
                settingsMoodLogic = this.value;
                localStorage.setItem('settingsMoodLogic', settingsMoodLogic);
                filterItems();
            });
            
            document.getElementById('statsMoodLogic').addEventListener('change', function() {
                statsMoodLogic = this.value;
                localStorage.setItem('statsMoodLogic', statsMoodLogic);
                loadStats();
            });
            
            // 為設定頁和統計頁添加事件監聽
            document.getElementById('itemFilter').addEventListener('keyup', filterItems);
            document.getElementById('pageSize').addEventListener('change', changePageSize);
            document.getElementById('statsGameSelect').addEventListener('change', loadStats);
            document.getElementById('sortBy').addEventListener('change', loadStats);
            document.getElementById('rankingSearch').addEventListener('keyup', searchRanking);
            document.getElementById('importStatsFile').addEventListener('change', importStats);
            
            if (selectedGameId) {
                document.getElementById('gameSelect').value = selectedGameId;
                updateGameSettings();
            }
            if (selectedExtractMode) document.getElementById('extractMode').value = selectedExtractMode;
            
            // 為itemCount添加Enter鍵事件
            document.getElementById('itemCount').addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    startGame();
                }
            });
            
            // 為keywordFilter添加Enter鍵事件
            document.getElementById('keywordFilter').addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    startGame();
                }
            });
            
            // 修改：保存篩選輸入框內容到localStorage
            document.getElementById('keywordFilter').addEventListener('input', function(e) {
                localStorage.setItem('keywordFilter', e.target.value);
            });
            
            // 監聽storage事件以實現跨分頁同步
            window.addEventListener('storage', function(e) {
                if (e.key === 'games_sync') {
                    // 重新從localStorage加載數據
                    games = JSON.parse(localStorage.getItem('games')) || {};
                    
                    // 更新UI
                    updateGamesList();
                    updateGameSelect();
                    updateStatsGameSelect();
                    
                    // 如果當前在投票頁且正在進行遊戲，重新加載當前對戰組合
                    if (currentGame && currentPair) {
                        // 更新currentGame和currentPair
                        currentGame = games[currentGame.id];
                        if (currentGame) {
                            currentPair = currentPair.map(p => 
                                currentGame.items.find(i => i.id === p.id) || p
                            );
                            loadBothVideos();
                            createMoodButtons();
                            if (statsVisible) updateItemStats();
                        }
                    }
                    
                    // 如果當前在統計頁，重新載入統計
                    if (document.getElementById('stats').classList.contains('active')) {
                        loadStats();
                    }
                }
            });
        });
    </script>
</body>
</html>

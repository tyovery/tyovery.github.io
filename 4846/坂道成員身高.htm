<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>坂道成員身高統計</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Microsoft JhengHei', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }
        
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            // -webkit-text-fill-color: transparent;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            transition: transform 0.3s;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-title {
            font-size: 0.9em;
            opacity: 0.9;
            margin-bottom: 5px;
        }
        
        .stat-value {
            font-size: 2em;
            font-weight: bold;
        }
        
        .chart-container {
            position: relative;
            margin-bottom: 40px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 15px;
            height: 480px;
        }
        
        .chart-container.small {
            height: 380px;
        }
        
        .chart-wrapper {
            position: relative;
            height: 400px;
        }
        
        .chart-wrapper.small {
            height: 300px;
        }
        
        canvas {
            max-height: 400px !important;
        }
        
        .chart-title {
            text-align: center;
            color: #555;
            margin-bottom: 20px;
            font-size: 1.3em;
        }
        
        .tabs {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        
        .tab-button {
            padding: 12px 25px;
            margin: 5px;
            border: none;
            background: #f0f0f0;
            color: #666;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 1em;
        }
        
        .tab-button.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            transform: scale(1.05);
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .table-container {
            overflow-x: auto;
            margin-top: 20px;
            max-height: 600px;
            overflow-y: auto;
            position: relative;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }
        
        thead {
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        
        th {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            font-weight: 600;
        }
        
        tbody tr:hover {
            background: #f5f5f5;
        }
        
        .period-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            h1 {
                font-size: 1.8em;
            }
            
            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }
            
            .chart-container {
                height: 350px;
            }
            
            .chart-wrapper {
                height: 300px;
            }
            
            canvas {
                max-height: 300px !important;
            }
            
            .period-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>
			<font color="#9400d3">◢</font><font color="#ffb6c1">◢</font><font color="#87ceeb">◢</font>
			<font color="#964bc2">坂道成員身高統計</font>
			📊
		</h1>
        
        <!-- 統計參數 -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-title">總人數</div>
                <div class="stat-value" id="totalCount">-</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">平均身高</div>
                <div class="stat-value" id="meanHeight">-</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">中位數</div>
                <div class="stat-value" id="medianHeight">-</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">標準差</div>
                <div class="stat-value" id="stdDev">-</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">最高身高</div>
                <div class="stat-value" id="maxHeight">-</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">最低身高</div>
                <div class="stat-value" id="minHeight">-</div>
            </div>
        </div>
        
        <!-- 標籤頁 -->
        <div class="tabs">
            <button class="tab-button active" onclick="showTab('overview', this)">總覽</button>
            <button class="tab-button" onclick="showTab('byGroup', this)">按團體</button>
            <button class="tab-button" onclick="showTab('byPeriod', this)">按期別</button>
            <button class="tab-button" onclick="showTab('distribution', this)">分布圖</button>
            <button class="tab-button" onclick="showTab('ranking', this)">排名表</button>
        </div>
        
        <!-- 總覽 -->
        <div id="overview" class="tab-content active">
            <div class="chart-container">
                <h3 class="chart-title">身高分布直方圖</h3>
                <div class="chart-wrapper">
                    <canvas id="histogramChart" width="800" height="400"></canvas>
                </div>
            </div>
        </div>
        
        <!-- 按團體分析 -->
        <div id="byGroup" class="tab-content">
            <div class="chart-container">
                <h3 class="chart-title">各團平均身高</h3>
                <div class="chart-wrapper">
                    <canvas id="groupChart"></canvas>
                </div>
            </div>
            <div class="chart-container">
                <h3 class="chart-title">各團身高箱形圖</h3>
                <div class="chart-wrapper">
                    <canvas id="boxChart"></canvas>
                </div>
            </div>
        </div>
        
        <!-- 按期別分析 -->
        <div id="byPeriod" class="tab-content">
            <div class="period-grid">
                <div class="chart-container small">
                    <h3 class="chart-title">乃木坂46 各期別平均身高</h3>
                    <div class="chart-wrapper small">
                        <canvas id="nogizakaPeriodChart"></canvas>
                    </div>
                </div>
                <div class="chart-container small">
                    <h3 class="chart-title">櫻坂46 各期別平均身高</h3>
                    <div class="chart-wrapper small">
                        <canvas id="sakurazakaPeriodChart"></canvas>
                    </div>
                </div>
                <div class="chart-container small">
                    <h3 class="chart-title">日向坂46 各期別平均身高</h3>
                    <div class="chart-wrapper small">
                        <canvas id="hinatazakaPeriodChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 分布圖 -->
        <div id="distribution" class="tab-content">
            <div class="chart-container">
                <h3 class="chart-title">身高區間分布</h3>
                <div class="chart-wrapper">
                    <canvas id="pieChart"></canvas>
                </div>
            </div>
        </div>
        
        <!-- 排名表 -->
        <div id="ranking" class="tab-content">
            <div class="table-container">
                <table id="rankingTable">
                    <thead>
                        <tr>
                            <th>排名</th>
                            <th>姓名</th>
                            <th>團體</th>
                            <th>期別</th>
                            <th>身高(cm)</th>
                        </tr>
                    </thead>
                    <tbody id="rankingBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <script>
        // 儲存所有圖表實例
        const charts = {};
        
        // 原始資料 - 已在姓名中加入空格分隔
        const rawData = `團體	加入時期	成員	Height(cm)
櫻坂46	1期	土生 瑞穂	171.6
日向坂46	3期	髙橋 未来虹	170.6
乃木坂46	3期	梅澤 美波	170.0
櫻坂46	4期	目黒 陽色	169.4
櫻坂46	1期	志田 愛佳	169.0
櫻坂46	2期	松平 璃子	169.0
櫻坂46	2期	山﨑 天	168.4
日向坂46	1期	佐々木 久美	168.3
櫻坂46	3期	村山 美羽	168.0
乃木坂46	1期	宮澤 成良	168.0
日向坂46	2期	濱岸 ひより	167.5
櫻坂46	1期	渡邉 理佐	167.0
櫻坂46	2期	関 有美子	167.0
櫻坂46	3期	的野 美青	167.0
乃木坂46	3期	中村 麗乃	167.0
乃木坂46	4期	松尾 美佑	167.0
櫻坂46	4期	勝又 春	167.0
櫻坂46	1期	渡辺 梨加	166.5
櫻坂46	2期	藤吉 夏鈴	166.0
乃木坂46	2期	伊藤 純奈	166.0
乃木坂46	4期	賀喜 遥香	166.0
乃木坂46	5期	五百城 茉央	166.0
乃木坂46	6期	海邉 朱莉	166.0
乃木坂46	1期	斎藤 ちはる	166.0
日向坂46	5期	鶴崎 仁香	166.0
日向坂46	1期	佐々木 美玲	165.7
日向坂46	2期	富田 鈴花	165.2
乃木坂46	2期	新内 眞衣	165.0
乃木坂46	4期	金川 紗耶	165.0
乃木坂46	4期	北川 悠理	165.0
乃木坂46	4期	弓木 奈於	165.0
乃木坂46	2期	西川 七海	165.0
櫻坂46	1期	菅井 友香	165.0
櫻坂46	3期	小島 凪紗	165.0
日向坂46	4期	清水 理央	165.0
日向坂46	4期	宮地 すみれ	165.0
日向坂46	4期	小西 夏菜実	164.8
乃木坂46	4期	遠藤 さくら	164.0
乃木坂46	2期	相楽 伊織	164.0
乃木坂46	4期	清宮 レイ	164.0
乃木坂46	5期	冨里 奈央	164.0
乃木坂46	4期	早川 聖来	164.0
乃木坂46	4期	林 瑠奈	164.0
乃木坂46	1期	松村 沙友理	164.0
乃木坂46	2期	山﨑 怜奈	164.0
乃木坂46	6期	大越 ひなの	164.0
櫻坂46	4期	山田 桃実	164.0
日向坂46	5期	高井 俐香	164.0
櫻坂46	1期	守屋 茜	163.5
櫻坂46	2期	遠藤 光莉	163.3
乃木坂46	1期	衛藤 美彩	163.0
乃木坂46	2期	佐々木 琴子	163.0
乃木坂46	1期	能條 愛未	163.0
乃木坂46	1期	橋本 奈々未	163.0
乃木坂46	4期	黒見 明香	163.0
乃木坂46	2期	米徳 京花	163.0
櫻坂46	2期	大園 玲	163.0
櫻坂46	2期	井上 梨名	163.0
櫻坂46	2期	田村 保乃	163.0
櫻坂46	3期	小田倉 麗奈	163.0
櫻坂46	3期	向井 純葉	163.0
日向坂46	2期	金村 美玖	163.0
日向坂46	3期	上村 ひなの	163.0
日向坂46	5期	大田 美月	163.0
日向坂46	1期	井口 眞緒	163.0
櫻坂46	1期	平手 友梨奈	163.0
櫻坂46	1期	原田 まゆ	163.0
櫻坂46	1期	石森 虹花	162.7
日向坂46	3期	森本 茉莉	162.4
櫻坂46	1期	織田 奈那	162.0
櫻坂46	3期	中嶋 優月	162.0
櫻坂46	4期	松本 和子	162.0
日向坂46	1期	高本 彩花	162.0
乃木坂46	1期	白石 麻衣	162.0
乃木坂46	1期	高山 一実	162.0
乃木坂46	1期	深川 麻衣	162.0
乃木坂46	2期	堀 未央奈	162.0
乃木坂46	交換留學生	松井 玲奈	162.0
乃木坂46	1期	大和 里菜	162.0
乃木坂46	5期	池田 瑛紗	162.0
日向坂46	2期	小坂 菜緒	161.5
櫻坂46	2期	大沼 晶保	161.5
乃木坂46	3期	久保 史緒里	161.0
乃木坂46	1期	川後 陽菜	161.0
乃木坂46	3期	阪口 珠美	161.0
乃木坂46	3期	佐藤 楓	161.0
乃木坂46	2期	鈴木 絢音	161.0
乃木坂46	1期	中元 日芽香	161.0
乃木坂46	1期	樋口 日奈	161.0
乃木坂46	3期	吉田 綾乃クリスティー	161.0
乃木坂46	1期	和田 まあや	161.0
乃木坂46	6期	矢田 萌華	161.0
櫻坂46	1期	佐藤 詩織	161.0
櫻坂46	1期	小林 由依	161.0
日向坂46	4期	山下 葉留花	160.6
日向坂46	1期	加藤 史帆	160.5
日向坂46	4期	藤嶌 果歩	160.4
乃木坂46	1期	生田 絵梨花	160.0
乃木坂46	1期	柏 幸奈	160.0
乃木坂46	4期	佐藤 璃果	160.0
乃木坂46	4期	柴田 柚菜	160.0
乃木坂46	4期	田村 真佑	160.0
乃木坂46	4期	筒井 あやめ	160.0
乃木坂46	3期	山下 美月	160.0
乃木坂46	6期	愛宕 心響	160.0
日向坂46	5期	坂井 新奈	160.0
乃木坂46	5期	岡本 姫奈	160.0
櫻坂46	2期	松田 里奈	159.5
乃木坂46	5期	井上 和	158.0
日向坂46	5期	佐藤 優羽	159.4
日向坂46	2期	宮田 愛萌	159.3
日向坂46	5期	松尾 桜	159.2
櫻坂46	3期	石森 璃花	159.0
櫻坂46	4期	山川 宇衣	159.0
乃木坂46	3期	岩本 蓮加	159.0
櫻坂46	1期	米谷 奈々未	159.0
櫻坂46	1.5期	長濱 ねる	159.0
乃木坂46	1期	永島 聖羅	159.0
乃木坂46	1期	西野 七瀬	159.0
日向坂46	5期	片山 紗希	159.0
日向坂46	4期	平尾 帆夏	158.5
櫻坂46	1期	小池 美波	158.5
櫻坂46	2期	武元 唯衣	158.5
乃木坂46	5期	菅原 咲月	158.5
日向坂46	4期	正源司 陽子	158.4
櫻坂46	2期	増本 綺良	158.4
日向坂46	2期	渡邉 美穂	158.2
櫻坂46	1期	齋藤 冬優花	158.0
乃木坂46	1期	伊藤 万理華	158.0
乃木坂46	2期	北野 日奈子	158.0
乃木坂46	1期	川村 真洋	158.0
乃木坂46	1期	中田 花奈	158.0
櫻坂46	1期	長沢 菜々香	158.0
櫻坂46	1期	鈴木 泉帆	158.0
乃木坂46	1期	齋藤 飛鳥	158.0
乃木坂46	2期	矢田 里沙子	158.0
日向坂46	4期	平岡 海月	157.9
乃木坂46	1期	若月 佑美	157.5
日向坂46	1期	潮 紗理菜	157.5
日向坂46	2期	松田 好花	157.5
日向坂46	1期	高瀬 愛奈	157.2
乃木坂46	5期	奥田 いろは	157.0
乃木坂46	1期	斉藤 優里	157.0
乃木坂46	1期	桜井 玲香	157.0
乃木坂46	5期	中西 アルノ	157.0
日向坂46	1期	柿崎 芽実	157.0
日向坂46	2期	丹生 明里	157.0
乃木坂46	6期	鈴木 佑捺	157.0
乃木坂46	6期	長嶋 凛桜	157.0
櫻坂46	4期	佐藤 愛桜	157.0
櫻坂46	4期	中川 智尋	157.0
櫻坂46	1期	尾関 梨香	156.5
日向坂46	4期	岸 帆夏	156.5
乃木坂46	1期	安藤 美雲	156.0
乃木坂46	5期	一ノ瀬 美空	156.0
乃木坂46	1期	井上 小百合	156.0
乃木坂46	3期	大園 桃子	156.0
日向坂46	1期	影山 優佳	156.0
櫻坂46	1期	原田 葵	156.0
櫻坂46	3期	村井 優	156.0
櫻坂46	1期	鈴本 美愉	156.0
乃木坂46	4期	掛橋 沙耶香	156.0
乃木坂46	6期	川端 晃菜	156.0
乃木坂46	6期	増田 三莉音	156.0
乃木坂46	6期	森平 麗心	156.0
櫻坂46	4期	浅井 恋乃未	156.0
櫻坂46	4期	稲熊 ひな	156.0
乃木坂46	5期	川﨑 桜	155.0
乃木坂46	2期	寺田 蘭世	155.0
乃木坂46	1期	星野 みなみ	155.0
乃木坂46	6期	小津 玲奈	155.0
日向坂46	1期	齊藤 京子	155.0
櫻坂46	3期	遠藤 理子	155.0
櫻坂46	2期	幸阪 茉里乃	154.5
日向坂46	1期	東村 芽依	154.5
日向坂46	2期	河田 陽菜	154.5
日向坂46	4期	竹内 希来里	154.5
乃木坂46	1.5期	秋元 真夏	154.0
乃木坂46	2期	伊藤 かりん	154.0
乃木坂46	3期	伊藤 理々杏	154.0
乃木坂46	5期	小川 彩	154.0
櫻坂46	2期	守屋 麗奈	154.0
日向坂46	4期	渡辺 莉奈	154.0
日向坂46	5期	下田 衣珠季	154.0
櫻坂46	1期	上村 莉菜	153.5
日向坂46	4期	石塚 瑶季	153.5
乃木坂46	1期	生駒 里奈	153.0
乃木坂46	1期	市來 玲奈	153.0
乃木坂46	1期	岩瀬 佑美子	153.0
乃木坂46	4期	矢久保 美緒	153.0
乃木坂46	2期	渡辺 みり愛	153.0
日向坂46	5期	大野 愛実	153.0
日向坂46	5期	蔵盛 妃那乃	153.0
乃木坂46	3期	与田 祐希	153.0
櫻坂46	1期	今泉 佑唯	153.0
乃木坂46	6期	瀬戸口 心月	153.0
日向坂46	3期	山口 陽世	152.5
櫻坂46	3期	山下 瞳月	152.0
乃木坂46	3期	向井 葉月	152.0
櫻坂46	3期	谷口 愛季	151.0
櫻坂46	2期	森田 ひかる	150.5
乃木坂46	1期	畠中 清羅	150.0
乃木坂46	1期	伊藤 寧々	149.0
乃木坂46	1期	吉本 彩華	147.0`;

/* // 計數
let conut_nogi = 0 ;
let conut_sakura = 0 ;
let conut_hinata = 0 ;
while(rawData.include('乃木坂'))
{
	let i = indexOf('乃木坂') ;
	~i && ++ conut_nogi ;
	rawData.
}
console.log();
*/


        // 解析資料
        function parseData() {
            const lines = rawData.trim().split('\n');
            const data = [];
            const uniqueMembers = new Set();
            
            for (let i = 1; i < lines.length; i++) {
                const parts = lines[i].split('\t');
                if (parts.length === 4) {
                    // 處理團體名稱
                    let group = parts[0];
                    if (group.includes('欅坂46')) {
                        group = group.replace('欅坂46', '櫻坂46');
                    }
                    if (group.includes('けやき坂46')) {
                        group = group.replace('けやき坂46', '日向坂46');
                    }
                    group = group.split('/')[0];
                    
                    // 處理期別（將1.5期合併到1期）
                    let period = parts[1];
                    if (period === '1.5期') {
                        period = '1期';
                    }
                    
                    const memberKey = `${group}_${parts[2]}`;
                    if (!uniqueMembers.has(memberKey)) {
                        uniqueMembers.add(memberKey);
                        data.push({
                            group: group,
                            period: period,
                            name: parts[2], // 直接使用已包含空格的姓名
                            height: parseFloat(parts[3])
                        });
                    }
                }
            }
            return data;
        }

        const data = parseData();

        // 計算統計參數
        function calculateStats(heights) {
            const n = heights.length;
            const mean = heights.reduce((a, b) => a + b, 0) / n;
            const sorted = [...heights].sort((a, b) => a - b);
            const median = n % 2 === 0 ? 
                (sorted[n/2 - 1] + sorted[n/2]) / 2 : 
                sorted[Math.floor(n/2)];
            const variance = heights.reduce((acc, h) => acc + Math.pow(h - mean, 2), 0) / n;
            const stdDev = Math.sqrt(variance);
            
            return {
                count: n,
                mean: mean.toFixed(2),
                median: median.toFixed(2),
                stdDev: stdDev.toFixed(2),
                min: Math.min(...heights).toFixed(1),
                max: Math.max(...heights).toFixed(1)
            };
        }

        // 顯示總體統計
        const heights = data.map(d => d.height);
        const stats = calculateStats(heights);
        document.getElementById('totalCount').textContent = stats.count;
        document.getElementById('meanHeight').textContent = stats.mean + ' cm';
        document.getElementById('medianHeight').textContent = stats.median + ' cm';
        document.getElementById('stdDev').textContent = stats.stdDev + ' cm';
        document.getElementById('minHeight').textContent = stats.min + ' cm';
        document.getElementById('maxHeight').textContent = stats.max + ' cm';

        // 重寫直方圖函數
        function createHistogram() {
            // 確保 canvas 存在
            const canvas = document.getElementById('histogramChart');
            if (!canvas) {
                console.error('Canvas element histogramChart not found');
                setTimeout(createHistogram, 500);
                return;
            }
            
            // 準備數據
            const bins = {
				'147-149': 0,
                '149-151': 0,
                '151-153': 0,
                '153-155': 0,
                '155-157': 0,
                '157-159': 0,
                '159-161': 0,
                '161-163': 0,
                '163-165': 0,
                '165-167': 0,
                '167-169': 0,
                '169-171': 0,
                '171-173': 0
            };
            
            // 計算每個區間的人數
            heights.forEach(h => {
                if (h >= 147 && h < 149) bins['147-149']++;
				else if (h >= 149 && h < 151) bins['149-151']++;
                else if (h >= 151 && h < 153) bins['151-153']++;
                else if (h >= 153 && h < 155) bins['153-155']++;
                else if (h >= 155 && h < 157) bins['155-157']++;
                else if (h >= 157 && h < 159) bins['157-159']++;
                else if (h >= 159 && h < 161) bins['159-161']++;
                else if (h >= 161 && h < 163) bins['161-163']++;
                else if (h >= 163 && h < 165) bins['163-165']++;
                else if (h >= 165 && h < 167) bins['165-167']++;
                else if (h >= 167 && h < 169) bins['167-169']++;
                else if (h >= 169 && h < 171) bins['169-171']++;
                else if (h >= 171 && h < 173) bins['171-173']++;
            });
            
            // 銷毀舊圖表
            if (charts.histogram) {
                charts.histogram.destroy();
                charts.histogram = null;
            }
            
            // 創建新圖表
            const ctx = canvas.getContext('2d');
            charts.histogram = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(bins),
                    datasets: [{
                        label: '人數',
                        data: Object.values(bins),
                        backgroundColor: 'rgba(102, 126, 234, 0.7)',
                        borderColor: 'rgba(102, 126, 234, 1)',
                        borderWidth: 2,
                        barPercentage: 0.9,
                        categoryPercentage: 1.0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return '人數: ' + context.parsed.y + ' 人';
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            min: 0,
                            max: 40,
                            ticks: {
                                stepSize: 10
                            },
                            title: {
                                display: true,
                                text: '人數'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: '身高區間 (cm)'
                            }
                        }
                    }
                }
            });
        }

        // 建立團體比較圖
        function createGroupChart() {
            const ctx = document.getElementById('groupChart');
            if (!ctx) return;
            
            const groupStats = {};
            
            data.forEach(d => {
                if (!groupStats[d.group]) {
                    groupStats[d.group] = [];
                }
                groupStats[d.group].push(d.height);
            });
            
            // 指定順序：乃木坂46、櫻坂46、日向坂46
            const orderedGroups = ['乃木坂46', '櫻坂46', '日向坂46'];
            const labels = orderedGroups.filter(g => groupStats[g]);
            const means = labels.map(g => 
                (groupStats[g].reduce((a, b) => a + b, 0) / groupStats[g].length).toFixed(2)
            );
            const counts = labels.map(g => groupStats[g].length);
            
            // 銷毀舊圖表
            if (charts.group) {
                charts.group.destroy();
            }
            
            charts.group = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: '平均身高 (cm)',
                        data: means,
                        backgroundColor: [
                            'rgba(148, 0, 211, 0.7)',  // 乃木坂46 - 紫色
                            'rgba(255, 182, 193, 0.7)', // 櫻坂46 - 粉色
                            'rgba(135, 206, 235, 0.7)'  // 日向坂46 - 天藍色
                        ],
                        borderColor: [
                            'rgba(148, 0, 211, 1)',
                            'rgba(255, 182, 193, 1)',
                            'rgba(135, 206, 235, 1)'
                        ],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        datalabels: {
                            anchor: 'end',
                            align: 'top',
                            formatter: (value, ctx) => {
                                return value + ' cm\n(n=' + counts[ctx.dataIndex] + ')';
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            min: 155,
							max: 162,
                            title: {
                                display: true,
                                text: '平均身高 (cm)'
                            }
                        }
                    }
                }
            });
        }

        // 建立箱形圖（簡化版）
        function createBoxChart() {
            const ctx = document.getElementById('boxChart');
            if (!ctx) return;
            
            const groupData = {};
            
            data.forEach(d => {
                if (!groupData[d.group]) {
                    groupData[d.group] = [];
                }
                groupData[d.group].push(d.height);
            });
            
            // 指定順序
            const orderedGroups = ['乃木坂46', '櫻坂46', '日向坂46'];
            const labels = orderedGroups.filter(g => groupData[g]);
            
            const boxData = labels.map(group => {
                const sorted = groupData[group].sort((a, b) => a - b);
                const q1 = sorted[Math.floor(sorted.length * 0.25)];
                const median = sorted[Math.floor(sorted.length * 0.5)];
                const q3 = sorted[Math.floor(sorted.length * 0.75)];
                const min = sorted[0];
                const max = sorted[sorted.length - 1];
                
                return {
                    min: min.toFixed(1),
                    q1: q1.toFixed(1),
                    median: median.toFixed(1),
                    q3: q3.toFixed(1),
                    max: max.toFixed(1)
                };
            });
            
            // 銷毀舊圖表
            if (charts.box) {
                charts.box.destroy();
            }
            
            // 使用長條圖模擬箱形圖
            charts.box = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: '最小值',
                            data: boxData.map(d => d.min),
                            backgroundColor: 'rgba(255, 99, 132, 0.3)'
                        },
                        {
                            label: 'Q1',
                            data: boxData.map(d => d.q1),
                            backgroundColor: 'rgba(54, 162, 235, 0.3)'
                        },
                        {
                            label: '中位數',
                            data: boxData.map(d => d.median),
                            backgroundColor: 'rgba(255, 206, 86, 0.3)'
                        },
                        {
                            label: 'Q3',
                            data: boxData.map(d => d.q3),
                            backgroundColor: 'rgba(75, 192, 192, 0.3)'
                        },
                        {
                            label: '最大值',
                            data: boxData.map(d => d.max),
                            backgroundColor: 'rgba(153, 102, 255, 0.3)'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false,
                            min: 145,
                            title: {
                                display: true,
                                text: '身高 (cm)'
                            }
                        }
                    }
                }
            });
        }

        // 建立各團體期別分析圖
        function createPeriodChartByGroup(group, canvasId, color) {
            const ctx = document.getElementById(canvasId);
            if (!ctx) return;
            
            const periodStats = {};
            
            // 過濾該團體且不包含交換留學生的資料
            const groupData = data.filter(d => d.group === group && !d.period.includes('交換'));
            
            groupData.forEach(d => {
                const period = d.period;
                if (!periodStats[period]) {
                    periodStats[period] = [];
                }
                periodStats[period].push(d.height);
            });
            
            // 排序期別
            const sortedPeriods = Object.keys(periodStats).sort((a, b) => {
                const getNumValue = (str) => {
                    const num = parseInt(str.replace(/[^\d]/g, ''));
                    return isNaN(num) ? 1000 : num;
                };
                return getNumValue(a) - getNumValue(b);
            });
            
            const labels = sortedPeriods.map(p => {
                const num = p.replace(/[^\d]/g, '');
                return num ? `${num}期` : p;
            });
            
            const means = sortedPeriods.map(p => 
                (periodStats[p].reduce((a, b) => a + b, 0) / periodStats[p].length).toFixed(2)
            );
            
            const counts = sortedPeriods.map(p => periodStats[p].length);
            
            // 銷毀舊圖表
            if (charts[canvasId]) {
                charts[canvasId].destroy();
            }
            
            charts[canvasId] = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: '平均身高',
                        data: means,
                        borderColor: color,
                        backgroundColor: color.replace('1)', '0.2)'),
                        tension: 0.1,
                        fill: true,
                        pointRadius: 5,
                        pointHoverRadius: 7
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        datalabels: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                afterLabel: function(context) {
                                    return '人數: ' + counts[context.dataIndex] + ' 人';
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            min: 150,
                            max: 170,
                            title: {
                                display: true,
                                text: '平均身高 (cm)'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: '期別'
                            }
                        }
                    }
                }
            });
        }

        // 建立圓餅圖
        function createPieChart() {
            const ctx = document.getElementById('pieChart');
            if (!ctx) return;
            
            const ranges = {
				'145-150 cm': 0,
                '150-155 cm': 0,
                '155-160 cm': 0,
                '160-165 cm': 0,
                '165-170 cm': 0,
                '170+ cm': 0
            };
            
            heights.forEach(h => {
                if (h < 150) ranges['145-150 cm']++;
				else if (h < 155) ranges['150-155 cm']++;
                else if (h < 160) ranges['155-160 cm']++;
                else if (h < 165) ranges['160-165 cm']++;
                else if (h < 170) ranges['165-170 cm']++;
                else ranges['170+ cm']++;
            });
            
            // 銷毀舊圖表
            if (charts.pie) {
                charts.pie.destroy();
            }
            
            charts.pie = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(ranges),
                    datasets: [{
                        data: Object.values(ranges),
                        backgroundColor: [
							'rgba(127, 99, 132, 0.7)',
                            'rgba(255, 99, 132, 0.7)',
                            'rgba(54, 162, 235, 0.7)',
                            'rgba(255, 206, 86, 0.7)',
                            'rgba(75, 192, 192, 0.7)',
                            'rgba(153, 102, 255, 0.7)'
                        ],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right'
                        }
                    }
                }
            });
        }

        // 建立排名表
        function createRankingTable() {
            const sortedData = [...data].sort((a, b) => b.height - a.height);
            const tbody = document.getElementById('rankingBody');
            tbody.innerHTML = '';
            
            sortedData.forEach((member, index) => {
                const row = tbody.insertRow();
                row.insertCell(0).textContent = index + 1;
                row.insertCell(1).textContent = member.name;
                row.insertCell(2).textContent = member.group;
                row.insertCell(3).textContent = member.period;
                row.insertCell(4).textContent = member.height.toFixed(1);
            });
        }

        // 標籤切換功能
        function showTab(tabName, button) {
            const tabs = document.querySelectorAll('.tab-content');
            const buttons = document.querySelectorAll('.tab-button');
            
            tabs.forEach(tab => {
                tab.classList.remove('active');
            });
            buttons.forEach(btn => {
                btn.classList.remove('active');
            });
            
            document.getElementById(tabName).classList.add('active');
            button.classList.add('active');
            
            // 延遲載入圖表以確保顯示正確
            setTimeout(() => {
                if (tabName === 'overview') {
                    createHistogram();
                }
                if (tabName === 'byGroup') {
                    createGroupChart();
                    createBoxChart();
                }
                if (tabName === 'byPeriod') {
                    createPeriodChartByGroup('乃木坂46', 'nogizakaPeriodChart', 'rgba(148, 0, 211, 1)');
                    createPeriodChartByGroup('櫻坂46', 'sakurazakaPeriodChart', 'rgba(255, 182, 193, 1)');
                    createPeriodChartByGroup('日向坂46', 'hinatazakaPeriodChart', 'rgba(135, 206, 235, 1)');
                }
                if (tabName === 'distribution') {
                    createPieChart();
                }
            }, 100);
        }

        // 初始化
        document.addEventListener('DOMContentLoaded', function() {
            createRankingTable();
            // 延遲創建直方圖，確保 DOM 完全載入
            setTimeout(() => {
                createHistogram();
            }, 200);
        });
    </script>
</body>
</html>

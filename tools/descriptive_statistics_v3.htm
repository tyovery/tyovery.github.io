<html lang="zh-Hant-HK">
<head>
<title>分布描述 Descriptive Statistics</title>
<style type="text/css">
div.pop{line-height: 100%;}
div.info{line-height: 150%;}
body
{
	background-color: #FFFFFF;
	color: #000000;
}
p
{
	line-height: 100%;
}
a
{
	text-decoration: none;
}
thead tr th
{
	position: sticky;
	top: 0;
}
th
{
	background-color: white;
}
</style>
</head>
<body>
<script src="math.js"></script>
<script>

var pop = [] , poplist = [] ; // data set , data set 表格

var size , sum , mean , mean_geo , mean_har , dev2sum , vari , sd , md , mode , cv , se;
// 樣本數,加總,期望值,幾何平均數,調和平均數,差方和,變異數,標準差,平均差,眾數,變異係數,標準誤
var mean_fix , dev2sum_fix , sd_fix , se_fix ; // 約數
var fix_d = 6 ; // 約數小數位

var median , q1 , q3 ; // 四分位數
var mid_hinge , mean_mri ; // 中樞紐 , 三均值
var mean_iq ; // 四分平均數

var min , max , mid_range , range_half=[] , range , range_c , range_b , iqr , qd  ;
// 最小值,最大值,中程數,半距,全距,全距係數,平均間距,四分位距,四分位差

// 置信區間(z)
var z_99_2 , z_99_2_mean = [] ;
var z_99_1 , z_99_1_mean = [] ;
var z_95_2 , z_95_2_mean = [] ;
var z_95_1 , z_95_1_mean = [] ;
var z_90_2 , z_90_2_mean = [] ;
var z_90_1 , z_90_1_mean = [] ;

// 置信區間(t)
var t_99_2_table = [63.656741,9.924843,5.840909,4.604095,4.032143,3.707428,3.499483,3.355387,3.249836,3.169273,3.105807,3.05454,3.012276,2.976843,2.946713,2.920782,2.898231,2.87844,2.860935,2.84534,2.83136,2.818756,2.807336,2.79694,2.787436,2.778715,2.770683,2.763262,2.756386,2.749996,2.744042,2.738481,2.733277,2.728394,2.723806,2.719485,2.715409,2.711558,2.707913,2.704459,2.701181,2.698066,2.695102,2.692278,2.689585,2.687013,2.684556,2.682204,2.679952,2.677793,2.675722,2.673734,2.671823,2.669985,2.668216,2.666512,2.66487,2.663287,2.661759,2.660283,2.658857,2.657479,2.656145,2.654854,2.653604,2.652394,2.65122,2.650081,2.648977,2.647905,2.646863,2.645852,2.644869,2.643913,2.642983,2.642078,2.641198,2.64034,2.639505,2.638691,2.637897,2.637123,2.636369,2.635632,2.634914,2.634212,2.633527,2.632858,2.632204,2.631565,2.63094,2.63033,2.629732,2.629148,2.628576,2.628016,2.627468,2.626931,2.626405,2.625891,2.625386,2.624891,2.624407,2.623932,2.623465,2.623008,2.62256,2.62212,2.621688,2.621265,2.620849,2.62044,2.620039,2.619645,2.619258,2.618878,2.618504,2.618137,2.617776,2.617421,2.617072,2.616729,2.616392,2.61606,2.615733,2.615412,2.615096,2.614785,2.614479,2.614177,2.61388,2.613588,2.6133,2.613017,2.612738,2.612463,2.612192,2.611925,2.611662,2.611403,2.611147,2.610895,2.610647,2.610402,2.610161,2.609923,2.609688,2.609456,2.609228,2.609003,2.60878,2.608561,2.608344,2.608131,2.60792,2.607712,2.607506,2.607304,2.607103,2.606906,2.606711,2.606518,2.606328,2.60614,2.605954,2.60577,2.605589,2.60541,2.605233,2.605058,2.604886,2.604715,2.604546,2.604379,2.604215,2.604052,2.603891,2.603731,2.603574,2.603418,2.603264,2.603112,2.602961,2.602813,2.602665,2.60252,2.602376,2.602233,2.602092,2.601952,2.601814,2.601678,2.601543,2.601409,2.601276,2.601145,2.601016,2.600887,2.60076,2.600634,2.60051,2.600387,2.600265,2.600144,2.600024,2.599906,2.599788,2.599672,2.599557,2.599443,2.59933,2.599218,2.599108,2.598998,2.598889,2.598782,2.598675,2.598569,2.598465,2.598361,2.598258,2.598156,2.598055,2.597955,2.597856,2.597758,2.597661,2.597564,2.597468,2.597374,2.59728,2.597186,2.597094,2.597002,2.596912,2.596822,2.596732,2.596644,2.596556,2.596469,2.596383,2.596297,2.596212,2.596128,2.596045,2.595962,2.59588,2.595799,2.595718,2.595638,2.595558,2.595479,2.595401,2.595323,2.595246,2.59517,2.595094,2.595019,2.594945,2.59487,2.594797,2.594724,2.594652,2.59458,2.594509,2.594438,2.594368,2.594298,2.594229,2.594161,2.594092,2.594025,2.593958,2.593891,2.593825,2.593759,2.593694,2.59363,2.593565,2.593502,2.593438,2.593376,2.593313,2.593251,2.59319,2.593129,2.593068,2.593008,2.592948,2.592888,2.592829,2.592771,2.592713,2.592655,2.592598,2.592541,2.592484,2.592428,2.592372,2.592316] , t_99_2 , t_99_2_mean = [] ;
var t_99_1_table = [31.820516,6.964557,4.540703,3.746947,3.364930,3.142668,2.997952,2.896459,2.821438,2.763769,2.718079,2.680998,2.650309,2.624494,2.602480,2.583487,2.566934,2.552380,2.539483,2.527977,2.517648,2.508325,2.499867,2.492159,2.485107,2.478630,2.472660,2.467140,2.462021,2.457262,2.452824,2.448678,2.444794,2.441150,2.437723,2.434494,2.431447,2.428568,2.425841,2.423257,2.420803,2.418470,2.416250,2.414134,2.412116,2.410188,2.408345,2.406581,2.404892,2.403272,2.401718,2.400225,2.398790,2.397410,2.396081,2.394801,2.393568,2.392377,2.391229,2.390119,2.389047,2.388011,2.387008,2.386037,2.385097,2.384186,2.383302,2.382446,2.381615,2.380807,2.380024,2.379262,2.378522,2.377802,2.377102,2.376420,2.375757,2.375111,2.374482,2.373868,2.373270,2.372687,2.372119,2.371564,2.371022,2.370493,2.369977,2.369472,2.368979,2.368497,2.368026,2.367566,2.367115,2.366674,2.366243,2.365821,2.365407,2.365002,2.364606,2.364217,2.363837,2.363464,2.363098,2.362739,2.362388,2.362043,2.361704,2.361372,2.361046,2.360726,2.360412,2.360104,2.359801,2.359504,2.359212,2.358924,2.358642,2.358365,2.358093,2.357825,2.357561,2.357302,2.357047,2.356797,2.356550,2.356307,2.356069,2.355834,2.355602,2.355375,2.355150,2.354930,2.354712,2.354498,2.354287,2.354079,2.353875,2.353673,2.353474,2.353278,2.353085,2.352895,2.352707,2.352522,2.352340,2.352160,2.351983,2.351808,2.351635,2.351465,2.351297,2.351131,2.350967,2.350806,2.350646,2.350489,2.350334,2.350180,2.350029,2.349880,2.349732,2.349586,2.349442,2.349300,2.349160,2.349021,2.348884,2.348749,2.348615,2.348483,2.348352,2.348223,2.348096,2.347970,2.347845,2.347722,2.347600,2.347479,2.347360,2.347243,2.347126,2.347011,2.346897,2.346785,2.346673,2.346563,2.346454,2.346346,2.346240,2.346134,2.346030,2.345926,2.345824,2.345723,2.345623,2.345524,2.345425,2.345328,2.345232,2.345137,2.345043,2.344950,2.344857,2.344766,2.344675,2.344586,2.344497,2.344409,2.344322,2.344236,2.344150,2.344066,2.343982,2.343899,2.343817,2.343735,2.343655,2.343575,2.343496,2.343417,2.343339,2.343262,2.343186,2.343110,2.343035,2.342961,2.342887,2.342814,2.342742,2.342670,2.342599,2.342528,2.342458,2.342389,2.342320,2.342252,2.342185,2.342118,2.342051,2.341985,2.341920,2.341855,2.341791,2.341728,2.341664,2.341602,2.341540,2.341478,2.341417,2.341356,2.341296,2.341236,2.341177,2.341118,2.341060,2.341002,2.340945,2.340888,2.340831,2.340775,2.340720,2.340665,2.340610,2.340556,2.340502,2.340448,2.340395,2.340342,2.340290,2.340238,2.340187,2.340135,2.340085,2.340034,2.339984,2.339934,2.339885,2.339836,2.339788,2.339739,2.339691,2.339644,2.339597,2.339550,2.339503,2.339457,2.339411,2.339365,2.339320,2.339275,2.339230,2.339186,2.339142,2.339098,2.339055,2.339012,2.338969,2.338926,2.338884,2.338842] , t_99_1 , t_99_1_mean = [] ;
var t_95_2_table = [12.706205,4.302653,3.182446,2.776445,2.570582,2.446912,2.364624,2.306004,2.262157,2.228139,2.200985,2.178813,2.160369,2.144787,2.131450,2.119905,2.109816,2.100922,2.093024,2.085963,2.079614,2.073873,2.068658,2.063899,2.059539,2.055529,2.051831,2.048407,2.045230,2.042272,2.039513,2.036933,2.034515,2.032245,2.030108,2.028094,2.026192,2.024394,2.022691,2.021075,2.019541,2.018082,2.016692,2.015368,2.014103,2.012896,2.011741,2.010635,2.009575,2.008559,2.007584,2.006647,2.005746,2.004879,2.004045,2.003241,2.002465,2.001717,2.000995,2.000298,1.999624,1.998972,1.998341,1.997730,1.997138,1.996564,1.996008,1.995469,1.994945,1.994437,1.993943,1.993464,1.992997,1.992543,1.992102,1.991673,1.991254,1.990847,1.990450,1.990063,1.989686,1.989319,1.988960,1.988610,1.988268,1.987934,1.987608,1.987290,1.986979,1.986675,1.986377,1.986086,1.985802,1.985523,1.985251,1.984984,1.984723,1.984467,1.984217,1.983972,1.983731,1.983495,1.983264,1.983038,1.982815,1.982597,1.982383,1.982173,1.981967,1.981765,1.981567,1.981372,1.981180,1.980992,1.980808,1.980626,1.980448,1.980272,1.980100,1.979930,1.979764,1.979600,1.979439,1.979280,1.979124,1.978971,1.978820,1.978671,1.978524,1.978380,1.978239,1.978099,1.977961,1.977826,1.977692,1.977561,1.977431,1.977304,1.977178,1.977054,1.976931,1.976811,1.976692,1.976575,1.976460,1.976346,1.976233,1.976122,1.976013,1.975905,1.975799,1.975694,1.975590,1.975488,1.975387,1.975288,1.975189,1.975092,1.974996,1.974902,1.974808,1.974716,1.974625,1.974535,1.974446,1.974358,1.974271,1.974185,1.974100,1.974017,1.973934,1.973852,1.973771,1.973691,1.973612,1.973534,1.973457,1.973381,1.973305,1.973231,1.973157,1.973084,1.973012,1.972941,1.972870,1.972800,1.972731,1.972663,1.972595,1.972528,1.972462,1.972396,1.972332,1.972268,1.972204,1.972141,1.972079,1.972017,1.971957,1.971896,1.971837,1.971777,1.971719,1.971661,1.971603,1.971547,1.971490,1.971435,1.971379,1.971325,1.971271,1.971217,1.971164,1.971111,1.971059,1.971007,1.970956,1.970906,1.970855,1.970806,1.970756,1.970707,1.970659,1.970611,1.970563,1.970516,1.970470,1.970423,1.970377,1.970332,1.970287,1.970242,1.970198,1.970154,1.970110,1.970067,1.970024,1.969982,1.969939,1.969898,1.969856,1.969815,1.969774,1.969734,1.969694,1.969654,1.969615,1.969576,1.969537,1.969498,1.969460,1.969422,1.969385,1.969348,1.969311,1.969274,1.969237,1.969201,1.969166,1.969130,1.969095,1.969060,1.969025,1.968990,1.968956,1.968922,1.968889,1.968855,1.968822,1.968789,1.968756,1.968724,1.968692,1.968660,1.968628,1.968596,1.968565,1.968534,1.968503,1.968472,1.968442,1.968412,1.968382,1.968352,1.968323,1.968293,1.968264,1.968235,1.968206,1.968178,1.968150,1.968121,1.968093,1.968066,1.968038,1.968011,1.967984,1.967957,1.967930,1.967903] , t_95_2 , t_95_2_mean = [] ;
var t_95_1_table = [6.313752,2.919986,2.353363,2.131847,2.015048,1.943180,1.894579,1.859548,1.833113,1.812461,1.795885,1.782288,1.770933,1.761310,1.753050,1.745884,1.739607,1.734064,1.729133,1.724718,1.720743,1.717144,1.713872,1.710882,1.708141,1.705618,1.703288,1.701131,1.699127,1.697261,1.695519,1.693889,1.692360,1.690924,1.689572,1.688298,1.687094,1.685954,1.684875,1.683851,1.682878,1.681952,1.681071,1.680230,1.679427,1.678660,1.677927,1.677224,1.676551,1.675905,1.675285,1.674689,1.674116,1.673565,1.673034,1.672522,1.672029,1.671553,1.671093,1.670649,1.670219,1.669804,1.669402,1.669013,1.668636,1.668271,1.667916,1.667572,1.667239,1.666914,1.666600,1.666294,1.665996,1.665707,1.665425,1.665151,1.664885,1.664625,1.664371,1.664125,1.663884,1.663649,1.663420,1.663197,1.662978,1.662765,1.662557,1.662354,1.662155,1.661961,1.661771,1.661585,1.661404,1.661226,1.661052,1.660881,1.660715,1.660551,1.660391,1.660234,1.660081,1.659930,1.659782,1.659637,1.659495,1.659356,1.659219,1.659085,1.658953,1.658824,1.658697,1.658573,1.658450,1.658330,1.658212,1.658096,1.657982,1.657870,1.657759,1.657651,1.657544,1.657439,1.657336,1.657235,1.657135,1.657037,1.656940,1.656845,1.656752,1.656659,1.656569,1.656479,1.656391,1.656305,1.656219,1.656135,1.656052,1.655970,1.655890,1.655811,1.655732,1.655655,1.655579,1.655504,1.655430,1.655357,1.655285,1.655215,1.655145,1.655076,1.655007,1.654940,1.654874,1.654808,1.654744,1.654680,1.654617,1.654555,1.654494,1.654433,1.654373,1.654314,1.654256,1.654198,1.654141,1.654085,1.654029,1.653974,1.653920,1.653866,1.653813,1.653761,1.653709,1.653658,1.653607,1.653557,1.653508,1.653459,1.653411,1.653363,1.653316,1.653269,1.653223,1.653177,1.653132,1.653087,1.653043,1.652999,1.652956,1.652913,1.652871,1.652829,1.652787,1.652746,1.652705,1.652665,1.652625,1.652586,1.652547,1.652508,1.652470,1.652432,1.652394,1.652357,1.652321,1.652284,1.652248,1.652212,1.652177,1.652142,1.652107,1.652073,1.652039,1.652005,1.651972,1.651939,1.651906,1.651873,1.651841,1.651809,1.651778,1.651746,1.651715,1.651685,1.651654,1.651624,1.651594,1.651564,1.651535,1.651506,1.651477,1.651448,1.651420,1.651391,1.651364,1.651336,1.651308,1.651281,1.651254,1.651227,1.651201,1.651175,1.651148,1.651123,1.651097,1.651071,1.651046,1.651021,1.650996,1.650971,1.650947,1.650923,1.650899,1.650875,1.650851,1.650828,1.650804,1.650781,1.650758,1.650735,1.650713,1.650690,1.650668,1.650646,1.650624,1.650602,1.650581,1.650559,1.650538,1.650517,1.650496,1.650475,1.650454,1.650434,1.650413,1.650393,1.650373,1.650353,1.650333,1.650314,1.650294,1.650275,1.650256,1.650237,1.650218,1.650199,1.650180,1.650162,1.650143,1.650125,1.650107,1.650089,1.650071,1.650053,1.650035,1.650018,1.650000,1.649983,1.649966,1.649949] , t_95_1 , t_95_1_mean = [] ;
var t_90_2_table = t_95_1_table , t_90_2 , t_90_2_mean = [] ;
var t_90_1_table = [3.077684,1.885618,1.637744,1.533206,1.475884,1.439756,1.414924,1.396815,1.383029,1.372184,1.36343,1.356217,1.350171,1.34503,1.340606,1.336757,1.333379,1.330391,1.327728,1.325341,1.323188,1.321237,1.31946,1.317836,1.316345,1.314972,1.313703,1.312527,1.311434,1.310415,1.309464,1.308573,1.307737,1.306952,1.306212,1.305514,1.304854,1.30423,1.303639,1.303077,1.302543,1.302035,1.301552,1.30109,1.300649,1.300228,1.299825,1.299439,1.299069,1.298714,1.298373,1.298045,1.29773,1.297426,1.297134,1.296853,1.296581,1.296319,1.296066,1.295821,1.295585,1.295356,1.295134,1.29492,1.294712,1.294511,1.294315,1.294126,1.293942,1.293763,1.293589,1.293421,1.293256,1.293097,1.292941,1.29279,1.292643,1.2925,1.29236,1.292224,1.292091,1.291961,1.291835,1.291711,1.291591,1.291473,1.291358,1.291246,1.291136,1.291029,1.290924,1.290821,1.290721,1.290623,1.290527,1.290432,1.29034,1.29025,1.290161,1.290075,1.28999,1.289907,1.289825,1.289745,1.289666,1.289589,1.289514,1.289439,1.289367,1.289295,1.289225,1.289156,1.289088,1.289022,1.288957,1.288892,1.288829,1.288767,1.288706,1.288646,1.288587,1.288529,1.288472,1.288416,1.288361,1.288307,1.288253,1.2882,1.288149,1.288098,1.288047,1.287998,1.287949,1.287901,1.287854,1.287807,1.287762,1.287716,1.287672,1.287628,1.287585,1.287542,1.2875,1.287458,1.287417,1.287377,1.287337,1.287298,1.287259,1.287221,1.287183,1.287146,1.287109,1.287073,1.287037,1.287002,1.286967,1.286933,1.286899,1.286865,1.286832,1.286799,1.286767,1.286735,1.286703,1.286672,1.286641,1.286611,1.286581,1.286551,1.286522,1.286493,1.286464,1.286436,1.286408,1.28638,1.286353,1.286326,1.286299,1.286272,1.286246,1.28622,1.286195,1.286169,1.286144,1.28612,1.286095,1.286071,1.286047,1.286023,1.286,1.285976,1.285953,1.285931,1.285908,1.285886,1.285864,1.285842,1.28582,1.285799,1.285778,1.285757,1.285736,1.285715,1.285695,1.285675,1.285655,1.285635,1.285615,1.285596,1.285577,1.285558,1.285539,1.28552,1.285502,1.285483,1.285465,1.285447,1.285429,1.285411,1.285394,1.285377,1.285359,1.285342,1.285325,1.285309,1.285292,1.285276,1.285259,1.285243,1.285227,1.285211,1.285196,1.28518,1.285164,1.285149,1.285134,1.285119,1.285104,1.285089,1.285074,1.28506,1.285045,1.285031,1.285017,1.285002,1.284988,1.284975,1.284961,1.284947,1.284933,1.28492,1.284907,1.284893,1.28488,1.284867,1.284854,1.284841,1.284829,1.284816,1.284804,1.284791,1.284779,1.284767,1.284754,1.284742,1.28473,1.284718,1.284707,1.284695,1.284683,1.284672,1.28466,1.284649,1.284638,1.284626,1.284615,1.284604,1.284593,1.284582,1.284572,1.284561,1.28455,1.28454,1.284529,1.284519,1.284508,1.284498,1.284488,1.284478,1.284468,1.284458,1.284448,1.284438,1.284428,1.284418,1.284409,1.284399,1.284389,1.28438] , t_90_1 , t_90_1_mean = [] ;

// 單次機率估計
var firstHit_mean , firstHit_median , firstHit_mode , firstHit_mean_geo , firstHit_mean_har ;
// 算術平均比例 , 中位數比例 , 眾數比例 , 幾何平均比例 , 調和平均比例

// 說明
var help_cenTen ; // 集中趨勢
var help_firstHit ; // 單次機率估計
var help_disper ; // 分散程度
var help_samDist ; // 抽樣分布
var help_exportData ; // 導出數據

function inputClear()
{
	pop = [] ;
	// inputValue.value = "" ;
	inputSub() ;
}

function popAdd() // 手動加入樣本到母體
{
	if(inputValue.value.length>0)
	{
		var txt = inputValue.value + "" ;

		// 清理
		/*
		txt = txt.replace(/epi|pie/ig,""); // e , pi
		txt = txt.replace(/e/ig,","+Math.E+","); // e
		txt = txt.replace(/pi/ig,","+Math.PI+","); // pi
		*/
		txt = txt.replace(/\s+|[a-z]/ig,""); // 清除(空格,拉丁字母)
		txt = txt.replace(/;|，|、|；/g,","); // 分隔號
		
		// 數字轉換
		txt = txt.replace(/０/g,"0");
		txt = txt.replace(/１/g,"1");
		txt = txt.replace(/２/g,"2");
		txt = txt.replace(/３/g,"3");
		txt = txt.replace(/４/g,"4");
		txt = txt.replace(/５/g,"5");
		txt = txt.replace(/６/g,"6");
		txt = txt.replace(/７/g,"7");
		txt = txt.replace(/８/g,"8");
		txt = txt.replace(/９/g,"9");

		// 分析分組
		for(var k=0 ; k<txt.length ; k++)
		{
			if(txt.slice(k,k+1) == "[")
			{
				for(var j=k+1 ; j<txt.length ; j++)
				{
					if(txt.slice(j,j+1) == "]")
					{
						// alert( txt.slice(k,j+1) );
						pop.push( txt.slice(k,j+1) );
						txt = txt.slice(0,k) + txt.slice(j+1) ;
						// alert(txt);
						k--;
						break;
					}
				}
			}
		}
		
		// 加到母體
		pop.push(...txt.split(","));
	}
}

function popMinus()
{
	pop.shift();
	pop.pop();
	inputSub();
}

function ctrl_click(id,frequency) // 控制button (行數,頻數)
{
	// alert(typeof id);
	var checker = id.split("_") ;
	// alert(checker);
	if(checker[0] == "ctrl")
	{
		var k = checker[2]*1 ; // 第幾行
		if(checker[1] == "add") // +1
		{
			pop.push(poplist[k][0]);
		}
		else if(checker[1] == "del") // -1
		{
			for(var j=0 ; j<pop.length ; j++)
			{
				if(pop[j] == poplist[k][0])
				{
					pop.splice(j,1);
					break;
				}
			}
		}
		else if(checker[1] == "edit") // 自定
		{
			var f = eval(frequency).toFixed(0) ;
			if(f>=0)
			{
				if(f > poplist[k][1]) // 增加
				{
					for(var n=0 ; n < f - poplist[k][1] ; n++)
					{
						pop.push(poplist[k][0]);
					}
				}
				else if(f < poplist[k][1]) // 減少
				{
					for(var j=0 ; j<pop.length ; j++)
					{
						if(pop[j] == poplist[k][0])
						{
							pop.splice(j,poplist[k][1] - f);
							break;
						}
					}
				}
			}
		}
		inputSub("stay");
	}
}

function inputSub(parameter)
{
	// 分析參數
	if(typeof parameter == "undefined") var parameters = [] ;
	else var parameters = (parameter+"").split(",") ;

	var stay = 0 ; // 頁面位置停留(不移至最底)
	for(var p = 0 ; p < parameters.length ; p++)
	{
		if(parameters[p] == "stay")
		{
			stay = 1;
			break;
		}
	}

	// 清理非數字元素
	// alert(pop.join("\n"));
	for(var n = 0 ; n < pop.length ; n++)
	{
		pop[n] += "";
		
		// 檢查是否為分組數據
		if(pop[n].slice(0,1) == "[")
		{
			var grouped = 1;
			alert(pop.join("\n"));
		}
		else var grouped = 0;

		// 處理 多於一個小數點 的狀況
		var array = pop[n].split(".") ;
		if(array.length>2) pop[n] = array.shift()+"."+array.join("");
		/*
		pop[n] = pop[n].replace(/e/ig,","+Math.E+","); // e
		pop[n] = pop[n].replace(/pi/ig,","+Math.PI+","); // pi
		pop[n] = pop[n].replace(/\ |[a-z]/ig,""); // 清除
		*/
		pop[n] = eval(pop[n]) ; // 運算
		pop[n] *= 1 ; // 化為數字
		if( pop[n].length < 1 || !(pop[n]>=0 || pop[n]<0) )
		{
			pop.splice(n,1) ;
			n-- ;
		}
	}
	
	pop.sort((a,b)=>a-b); // 排序

	size = pop.length ; // 樣本數
	
	sum = 0 ; // 加總
	for(var k=0 ; k<size ; k++)
	{
		sum += pop[k]*1 ;
	}

	// 期望值 , 算術平均數
	if(size>0)
	{
		mean = sum / size ;
		mean_fix = mean.toFixed(fix_d) ;
	}
	else
	{
		mean = "-" ;
		mean_fix = "-" ;
	}
	
	// 幾何平均數
	if(size>0)
	{
		mean_geo = 1 ;
		for(var k=0 ; k<size ; k++)
		{
			mean_geo *= pop[k]**(1/size) ;
		}
		// mean_geo = mean_geo**(1/size) ;
		if(!(mean_geo>=0||mean_geo<0)) mean_geo = "無法計算" ;
	}
	else mean_geo = "-" ;
	
	// 調和平均數
	if(size>0)
	{
		mean_har = 0 ;
		for(var k=0 ; k<size ; k++)
		{
			mean_har += 1/pop[k] ;
		}
		mean_har = size/mean_har ;
	}
	else mean_har = "-" ;
	
	// 平均差
	if(size>0)
	{	
		var mdSum = 0 ;
		for(var n=0; n<pop.length ; n++)
		{
			mdSum += Math.abs(pop[n]-mean) ;
		}
		md = mdSum/size ; // population or sample
	}
	else md = "-" ;

	// 差方和
	if(size>0)
	{
		dev2sum = 0 ;
		for(var n=0; n<pop.length ; n++)
		{
			dev2sum += (pop[n]-mean)**2 ;
		}
		dev2sum_fix = dev2sum.toFixed(fix_d) ;
	}
	else
	{
		dev2sum = "-" ;
		dev2sum_fix = "-" ;
	}

	// 變異數
	if(size>0)
	{
		if(dataSet_sample.checked) vari = dev2sum / (size-1) ; // sample
		else vari = dev2sum / size ; // population
	}
	else vari = "-" ;
	
	// 標準差
	if(size>0)
	{
		sd = Math.sqrt(vari) ;
		sd_fix = sd.toFixed(fix_d) ;
	}
	else
	{
		sd = "-" ;
		sd_fix = "-" ;
	}

	// 變異係數
	if(size>0)
	{
		cv = sd/mean ;
	}
	else cv = "-" ;
	
	// 標準誤
	if(size>0)
	{
		se = Math.sqrt(vari/size) ;
		se_fix = se.toFixed(fix_d) ;
	}
	else
	{
		se = "-" ;
		se_fix = "-" ;
	}
	
	// 四分位數 ( q1 , median , q3 )
	var L , R , pos ; // 左數列 , 右數列 , 位置
	if(size>0)
	{
		// 中位數
		if(pop.length%2==1)
		{
			pos = (pop.length-1)/2 ;
			median = pop[pos] ;
			L = [...pop.slice(0,pos)] ;
			R = [...pop.slice(pos+1)] ;
		}
		else
		{
			pos = pop.length/2 ;
			median = ( pop[pos-1]*1 + pop[pos]*1 ) / 2 ;
			L = [...pop.slice(0,pos)] ;
			R = [...pop.slice(pos)] ;
		}
		
		// Q1 , Q3
		if(L.length>0)
		{
			if(L.length%2==1)
			{
				pos = (L.length-1)/2 ;
				q1 = L[pos] ;
				q3 = R[pos] ;
			}
			else
			{
				pos = L.length/2 ;
				q1 = ( L[pos-1]*1 + L[pos]*1 ) / 2 ;
				q3 = ( R[pos-1]*1 + R[pos]*1 ) / 2 ;
			}
			
			// 四分平均數
			mean_iq = 0 ;
			for(var k = pos ; k < size - pos ; k++ ) mean_iq += pop[k] ;
			mean_iq /= size - pos*2 ;
		}
		else
		{
			q1 = "-" ;
			q3 = "-" ;
			mean_iq = "-" ;
		}
	}
	else
	{
		median = "-" ;
		q1 = "-" ;
		q3 = "-" ;
		mean_iq = "-" ;
	}
	
	// 中樞紐 mid_hinge
	if(size>0 && (q1>=0||q1<0)) mid_hinge = ( q1 + q3 ) / 2 ;
	else mid_hinge = "-" ;

	// 三均值 mean_mri
	if(size>0 && (q1>=0||q1<0)) mean_mri = ( median*2 + q1 + q3 ) / 4 ;
	else mean_mri = "-" ;

	// 眾數
	if(size>0)
	{
		mode = [] ; // 眾數[元素,數量,平均值]
		var check = [...new Set(pop)] ; // 樣本(不重複)
		var count = [] ; // 記錄樣本出現次數
		for(var n=0 ; n<check.length ; n++)
		{
			count[n] = 0 ;
			for(var m=0 ; m<pop.length ; m++)
			{
				if(pop[m] == check[n]) count[n] ++ ;
			}
			if(n>0)
			{
				if(count[n] > mode[1])
				{
					mode[0] = [check[n]] ; // 元素
					mode[1] = count[n] ; // 數量
				}
				else if(count[n] == mode[1])
				{
					mode[0].push(check[n]) ; // 元素
				}
			}
			else
			{
				mode[0] = [check[0]] ; // 元素
				mode[1] = count[0] ; // 數量
			}
		}
		// 眾數平均值
		mode[2] = 0 ;
		for(var k=0 ; k < mode[0].length ; k ++)
		{
			mode[2] += mode[0][k] ;
		}
		mode[2] /= mode[0].length ;
	}
	else mode = [["-"],0,"-"] ;
	
	// 最小值
	if(pop.length>0) min = pop[0];
	else min= "-" ;
		
	// 最大值
	if(pop.length>0) max = pop[pop.length-1];
	else max= "-" ;
	
	// 中程數
	if(pop.length>0) mid_range = (min + max) / 2 ;
	else mid_range = " - " ;

	// 半距
	if(pop.length>0)
	{
		range_half[0] = median - pop[0] ; // 前半距
		range_half[1] = pop[pop.length-1] - median ; // 後半距
	}
	else range_half = [" - "," - "] ;
	
	// 全距
	if(pop.length>0) range = pop[pop.length-1] - pop[0] ;
	else range = " - " ;
	
	// 全距係數
	if(pop.length>0) range_c = range / ( pop[pop.length-1] + pop[0] ) ;
	else range_c = " - " ;

	// 平均間距
	if(pop.length>1) range_b = range / ( pop.length - 1 ) ;
	else range_b = " - " ;
	
	// 四分位距
	if(pop.length>1) iqr = q3-q1 ;
	else iqr = " - " ;
	
	// 四分位差
	if(pop.length>1) qd = iqr/2 ;
	else qd = " - " ;
	
	// 置信區間
	if( ( dataSet_sample.checked && size>1 ) || ( dataSet_population.checked && size>0 ) )
	{
		// z
		z_99_2 = (2.575829 * se).toFixed(6) ;
		z_99_1 = (2.326348 * se).toFixed(6) ;
		z_95_2 = (1.959964 * se).toFixed(6) ;
		z_95_1 = (1.644854 * se).toFixed(6) ;
		z_90_2 = (1.644854 * se).toFixed(6) ;
		z_90_1 = (1.281552 * se).toFixed(6) ;
		
		// z 算術平均數
		z_99_2_mean = [(mean - z_99_2*1).toFixed(6) , (mean + z_99_2*1).toFixed(6)] ;
		z_99_1_mean = [(mean - z_99_1*1).toFixed(6) , (mean + z_99_1*1).toFixed(6)] ;
		z_95_2_mean = [(mean - z_95_2*1).toFixed(6) , (mean + z_95_2*1).toFixed(6)] ;
		z_95_1_mean = [(mean - z_95_1*1).toFixed(6) , (mean + z_95_1*1).toFixed(6)] ;
		z_90_2_mean = [(mean - z_90_2*1).toFixed(6) , (mean + z_90_2*1).toFixed(6)] ;
		z_90_1_mean = [(mean - z_90_1*1).toFixed(6) , (mean + z_90_1*1).toFixed(6)] ;

		// t
		t_99_2 = (t_99_2_table[size-2] * se).toFixed(6) ;
		t_99_1 = (t_99_1_table[size-2] * se).toFixed(6) ;
		t_95_2 = (t_95_2_table[size-2] * se).toFixed(6) ;
		t_95_1 = (t_95_1_table[size-2] * se).toFixed(6) ;
		t_90_2 = (t_90_2_table[size-2] * se).toFixed(6) ;
		t_90_1 = (t_90_1_table[size-2] * se).toFixed(6) ;

		// t 算術平均數
		t_99_2_mean = [(mean - t_99_2*1).toFixed(6) , (mean + t_99_2*1).toFixed(6)] ;
		t_99_1_mean = [(mean - t_99_1*1).toFixed(6) , (mean + t_99_1*1).toFixed(6)] ;
		t_95_2_mean = [(mean - t_95_2*1).toFixed(6) , (mean + t_95_2*1).toFixed(6)] ;
		t_95_1_mean = [(mean - t_95_1*1).toFixed(6) , (mean + t_95_1*1).toFixed(6)] ;
		t_90_2_mean = [(mean - t_90_2*1).toFixed(6) , (mean + t_90_2*1).toFixed(6)] ;
		t_90_1_mean = [(mean - t_90_1*1).toFixed(6) , (mean + t_90_1*1).toFixed(6)] ;

	}
	else
	{
		// z
		z_99_2 = "無法估計" ;
		z_99_1 = "無法估計" ;
		z_95_2 = "無法估計" ;
		z_95_1 = "無法估計" ;
		z_90_2 = "無法估計" ;
		z_90_1 = "無法估計" ;
		
		// z 算術平均數
		z_99_2_mean = ["無法估計"] ;
		z_99_1_mean = ["無法估計"] ;
		z_95_2_mean = ["無法估計"] ;
		z_95_1_mean = ["無法估計"] ;
		z_90_2_mean = ["無法估計"] ;
		z_90_1_mean = ["無法估計"] ;
		
		// t
		t_99_2 = "無法估計" ;
		t_99_1 = "無法估計" ;
		t_95_2 = "無法估計" ;
		t_95_1 = "無法估計" ;
		t_90_2 = "無法估計" ;
		t_90_1 = "無法估計" ;
		
		// t 算術平均數
		t_99_2_mean = ["無法估計"] ;
		t_99_1_mean = ["無法估計"] ;
		t_95_2_mean = ["無法估計"] ;
		t_95_1_mean = ["無法估計"] ;
		t_90_2_mean = ["無法估計"] ;
		t_90_1_mean = ["無法估計"] ;
	}
	
	// 轉成以頻數表示
	poplist = [] ; // [ 0:數據 , 1:頻數 , 2:累積頻數 , 3:離差 ] 
	var poplist_match ;
	for(var k = 0 ; k<pop.length ; k++)
	{
		poplist_match = 0;
		for(var j = 0 ; j<poplist.length ; j++)
		{
			if(pop[k] == poplist[j][0]) // 已有
			{
				poplist[j][1] ++ ;
				poplist[j][2] ++ ;
				poplist_match ++ ;
				break;
			}
		}
		if(!poplist_match) // 新加
		{
			if(poplist.length>=1) 
			{
				poplist.push([pop[k],1,poplist[poplist.length-1][2]+1,pop[k]-mean]);
			}
			else
			{
				poplist.push([pop[k],1,1,pop[k]-mean]);
			}
		}
	}
	// alert(poplist.join("\n"));
	
	// 單次機率估計(算術平均數比例)
	if(size>0)
	{
		firstHit_mean = size / sum ;
	}
	else firstHit_mean = "-" ;
	
	// 單次機率估計(中位數比例)
	if(size>0)
	{
		firstHit_median = 1/median ;
	}
	else firstHit_median = "-" ;
	
	// 單次機率估計(眾數比例)
	if(size>0)
	{
		//if(mode[0].length == 1)
		firstHit_mode = 1/mode[2] ;
		// else firstHit_mode = "眾數不唯一" ;
	}
	else firstHit_mode = "-" ;

	// 單次機率估計(幾何平均數比例)
	if(size>0)
	{
		if(mean_geo>=0||mean_geo<0)
		{
			firstHit_mean_geo = 1 ;
			for(var k = 0 ; k< poplist.length ; k ++)
			{
				firstHit_mean_geo /= poplist[k][0]**(poplist[k][1]/size) ;
			}
		}
		else firstHit_mean_geo = "無法估計" ;
	}
	else firstHit_mean_geo = "-" ;
	
	
	// 單次機率估計(調和平均數比例)
	if(size>0)
	{
		firstHit_mean_har = 0 ;
		for(var k = 0 ; k< poplist.length ; k ++)
		{
			firstHit_mean_har += poplist[k][1]/poplist[k][0] ;
		}
		firstHit_mean_har /= size ;
	}
	else firstHit_mean_har = "-" ;

	// 表格輸出 - 頭部
	var txt2htm = "<p>"+(dataSet_sample.checked ? "樣本數據 ( Sample" : "母體數據 ( Population") + " Data Set )</p>" + '<table id="dataTable" border="1px" cellspacing="1px" cellpadding="5px" style="margin-top: -12px; background-color: #FFFFFF; text-align: center; color: #000000">';
	txt2htm += '<thead><tr>';
	txt2htm += '<th>控制項</th>';
	txt2htm += '<th>x<br />數據</th>';
	txt2htm += '<th>y<br />頻數</th>';
	txt2htm += '<th>&#931;y<br />累積頻數</th>';
	txt2htm += '<th>y/'+(dataSet_sample.checked?'n':'N')+'<br />比例</th>';
	txt2htm += '<th>(&#931;y)/'+(dataSet_sample.checked?'n':'N')+'<br />累積比例</th>';
	txt2htm += '<th>xy<br />加權</th>';
	txt2htm += '<th>z-score<br />標準分</th>';
	txt2htm += '<th>Sampling z<br />抽樣標準分</th>';
	txt2htm += '<th>'+(dataSet_sample.checked?'x-x&#772;':'x-&#956;')+'<br />離差</th>';
	txt2htm += '<th>'+(dataSet_sample.checked?'(x-x&#772;)':'(x-&#956;)')+'<sup>2</sup><br />離差平方</th>';
	txt2htm += '</tr></thead><tbody>';

	// 表格輸出 - 軀幹
	for(var k = 0 ; k<poplist.length ; k++)
	{
		// 累積比例
		var PobiSum = (poplist[k][2]/size*100).toFixed(2) ;
		
		// 控制
		txt2htm += '<tr>\
		<td><input id="ctrl_edit_'+k+'" type="button" value="修改頻數" onClick="ctrl_click(this.id,prompt(\'頻數更改為：\'));" />\
		<input id="ctrl_del_'+k+'" type="button" value="-1" onClick="ctrl_click(this.id);" />\
		<input id="ctrl_add_'+k+'" type="button" value="+1" onClick="ctrl_click(this.id);" /></td>';
		
		// 數據(x)
		txt2htm += (poplist[k][0]==median?'<td style="background-color: #00AF3F;">':
		poplist[k][1]==mode[1]?'<td style="background-color: #FF3F00;">':'<td>')+poplist[k][0]+'</td>';
		
		// 頻數(y)
		txt2htm += (poplist[k][1]==mode[1]?'<td style="background-color: #FF3F00;">':'<td>')+poplist[k][1]+'</td>';
		
		// 累積頻數
		txt2htm += '<td>'+poplist[k][2]+'</td>';
		
		// 比例
		txt2htm += (poplist[k][1]==mode[1]?'<td style="background-color: #FF3F00;">':'<td>')+(poplist[k][1]/size*100).toFixed(2)+'%</td>';
		
		// 累積比例
		txt2htm += (PobiSum>75?'<td style="background-color: #545454;color: #DFDFDF;">':
		PobiSum>50?'<td style="background-color: #7F7F7F;color: #DFDFDF;">':
		PobiSum>25?'<td style="background-color: #AAAAAA;">':
		'<td style="background-color: #D5D5D5;">')+PobiSum+'%</td>';
		
		// 加權(xy)
		txt2htm += '<td>'+poplist[k][0]*poplist[k][1]+'</td>';
		
		// 標準分
		txt2htm += '<td>'+(sd>0 ? ((poplist[k][0]-mean)/sd).toFixed(6) : ' - ')+'</td>';

		// 抽樣標準分
		txt2htm += '<td>'+(se>0 ? ((poplist[k][0]-mean)/se).toFixed(6) : ' - ')+'</td>';
		
		// 離差
		txt2htm += '<td>'+(poplist[k][3]).toFixed(6)+'</td>';
		
		// 離差平方
		txt2htm += '<td>'+(poplist[k][3]**2).toFixed(6)+'</td>';
		
		txt2htm += '</tr>';
	}

	// 表格輸出 - 尾部
	txt2htm += '<tr>';
	txt2htm += '<td><input type="button" value="v 其他控制項 v" \
	onClick="inputValue.focus();inputValue.select();" /></td>';
	txt2htm += '<td>Range<br />= '+range+'</td>';
	txt2htm += '<td></td>';
	txt2htm += '<td>'+(dataSet_sample.checked?'n':'N')+'<br />= '+size+'</td>';
	txt2htm += '<td></td>';
	txt2htm += '<td></td>';
	txt2htm += '<td>&#931;xy<br />= '+sum+'</td>';
	txt2htm += '<td>'+(dataSet_sample.checked?'s':'&#963;')+'<br />= '+(sd>=0?sd_fix:' - ')+'</td>';
	txt2htm += '<td>'+(dataSet_sample.checked?'s':'&#963;')+'/&#8730;n<br />= '+(se>=0?se_fix:' - ')+'</td>';
	txt2htm += '<td>'+(dataSet_sample.checked?'x&#772;':'&#956;')+'<br />= '+mean_fix+'</td>';
	txt2htm += '<td>&#931;'+(dataSet_sample.checked?'(x-x&#772;)':'(x-&#956;)')+'<sup>2</sup>y<br />= '+dev2sum_fix+'</td>';
	txt2htm += '</tr>';

	// 詳細參數輸出
	txt2htm +='</tbody><tbody></tbody></table>';
	DisplayAreaPop.innerHTML = txt2htm ;
	// DisplayAreaPop.innerHTML += pop.join(" , ") + "<br />" ;

	DisplayArea.innerHTML = "數據量 ( N / n / Total Frequency / Data Size )：" + size + "<br />" ;
	DisplayArea.innerHTML += "加總 ( Sum )：" + sum + "<br />" ;

	// 集中趨勢
	DisplayArea.innerHTML += "<br />< 集中趨勢 >" ;
	help_cenTen = "反映數據的集中狀況，或可理解為長遠回報。\n\n" ;
	help_cenTen += "每個數據都對「算術平均數」有貢獻。\n" ;
	help_cenTen += "好處是根據力度強；壞處是易受極端值影響。\n\n" ;
	help_cenTen += "「中位數」以數據大小順序為基準，故不易受極端值影響。\n" ;
	help_cenTen += "可是對於集中於兩端的數據，不能表達其集中性。\n\n" ;
	help_cenTen += "「眾數」是出現得最多的數字，有利於表達具有明確集中處的數據。";
	help_cenTen += "然而對於較平均的分布，不是很好的參考。" ;
	DisplayArea.innerHTML += ' <input type="button" value="?" onClick="alert(help_cenTen);"/><br />' ;
	DisplayArea.innerHTML += "期望值 / 算術平均數 ( &#956; / x&#772; / EV / Mean )：" + mean + "<br />" ;
	DisplayArea.innerHTML += "<span style='color: #00AF3F;'>中位數 ( Median )</span>："+median+"<br />" ;
	DisplayArea.innerHTML += "<span style='color: #FF3F00;'>眾數 ( Mode )</span>：" ;
	if((mode[1]==1 && mode[0].length>10)) // 太多時不顯示眾數
	{
		DisplayArea.innerHTML += "..." ;
	}
	else
	{
		DisplayArea.innerHTML += mode[0].join(" , ") ;
	}
	DisplayArea.innerHTML += " (各有 " + mode[1] + " 個)<br />" ;
	DisplayArea.innerHTML += "眾數平均值 ( Mean of Mode )：" + mode[2] + "<br />" ;
	DisplayArea.innerHTML += "四分平均數 ( Interquartile Mean )：" + mean_iq + "<br />" ;
	DisplayArea.innerHTML += "三均值 ( TM / Mrimean )：" + mean_mri + "<br />" ;
	DisplayArea.innerHTML += "中樞紐 ( Midhinge )：" + mid_hinge + "<br />" ;
	DisplayArea.innerHTML += "中程數 ( Midrange )：" + mid_range + "<br />" ;
	DisplayArea.innerHTML += "幾何平均數 ( Geometric mean )：" + mean_geo + "<br />" ;
	DisplayArea.innerHTML += "調和平均數 ( Harmonic mean )：" + mean_har + "<br />" ;

	// 單次機率估計
	DisplayArea.innerHTML += "<br />< 單次機率估計 >" ;
	help_firstHit = "x 表示成功間距。即是，自上次成功後，接下來第 x 次試驗成功。\n\n";
	help_firstHit += "這些數值用以估計單次的成功機率(p)。\n" ;
	help_firstHit += "其估計值為集中趨勢的倒數。" ;
	DisplayArea.innerHTML += ' <input type="button" value="?" onClick="alert(help_firstHit);"/><br />' ;
	DisplayArea.innerHTML += "算術平均數比例："+firstHit_mean+"<br />" ;
	DisplayArea.innerHTML += "中位數比例："+firstHit_median+"<br />" ;
	DisplayArea.innerHTML += "眾數比例："+firstHit_mode+"<br />" ;
	DisplayArea.innerHTML += "幾何平均數比例："+firstHit_mean_geo+"<br />" ;
	DisplayArea.innerHTML += "調和平均數比例："+firstHit_mean_har+"<br />" ;

	// 分散程度
	DisplayArea.innerHTML += "<br />< 分散程度 >" ;
	help_disper = "反映數據的分散狀況，或可理解為風險。\n\n" ;
	help_disper += "分散值 或 範圍 越小，代表越集中。\n" ;
	help_disper += "分散值 或 範圍 越大，代表越分散；\n" ;
	help_disper += "(分散值 或 範圍差 最小為0，沒有最大限制。)\n" ;
	DisplayArea.innerHTML += ' <input type="button" value="?" onClick="alert(help_disper);"/><br />' ;
	DisplayArea.innerHTML += "邊界 ( Min , Max )："+min+" , "+max+"<br />" ;
	DisplayArea.innerHTML += "半距 ( Half-Range )："+range_half.join(' , ')+"<br />" ;
	DisplayArea.innerHTML += "全距 ( Range )：" + range + "<br />" ;
	DisplayArea.innerHTML += "全距係數 ( Coefficient of Range )：" + range_c + "<br />" ;
	DisplayArea.innerHTML += "平均間距：" + range_b + "<br />" ;
	DisplayArea.innerHTML += "四分位數 ( Q1 , <span style='color: #00AF3F;'>Q2</span> , Q3 )："+q1+" , "+median+" , "+q3+"<br />" ;
	DisplayArea.innerHTML += "四分位距 ( IQR )："+iqr+"<br />" ;
	DisplayArea.innerHTML += "四分位差 ( QD )："+qd+"<br />" ;
	DisplayArea.innerHTML += "平均差 ( MAD )：" + md + "<br />" ;
	if(dataSet_sample.checked && size==1)
	{
		DisplayArea.innerHTML += "標準差 ( σ / s / SD )：" + "無法估計" + "<br />" ;
		DisplayArea.innerHTML += "變異數 ( σ<sup>2</sup> / s<sup>2</sup> / Var )：" + "無法估計" + "<br />" ;
		DisplayArea.innerHTML += "變異係數 ( CV )：" + "無法估計" + "<br />" ;
	}
	else
	{
		DisplayArea.innerHTML += "標準差 ( σ / s / SD )：" + sd + "<br />" ;
		DisplayArea.innerHTML += "變異數 ( σ<sup>2</sup> / s<sup>2</sup> / Var )：" + vari + "<br />" ;
		DisplayArea.innerHTML += "變異係數 ( CV )：" + cv + "<br />" ;
	}
	
	// 抽樣分布
	DisplayArea.innerHTML += "<br />< 抽樣分布 >" ;
	help_samDist = "用於抽樣估計或抽樣檢驗。\n\n" ;
	help_samDist += "標準誤(Standard Error)，作為抽樣分布的標準差。\n\n" ;
	
	help_samDist += "抽樣估計：\n" ;
	help_samDist += "以「樣本參數」作為「母體參數」的「估計點」，\n" ;
	help_samDist += "兩側張開一定範圍作為「估計區間」，有某機率(置信度)包含「母體參數」。\n\n" ;
	
	help_samDist += "抽樣檢驗：\n" ;
	help_samDist += "以「母體參數」作為「樣本參數」的「估計點」，\n";
	help_samDist += "兩側張開一定範圍作為「估計區間」，「樣本參數」有某機率(置信度)落在這區間內。\n" ;
	help_samDist += "抽取樣本，檢驗「樣本參數」是否落在該區間內。\n\n" ;
	
	help_samDist += "若參數在區間外，代表有顯著性差異。" ;
	DisplayArea.innerHTML += ' <input type="button" value="?" onClick="alert(help_samDist);"/><br />' ;
	if(dataSet_sample.checked && size==1)
	{
		DisplayArea.innerHTML += "標準誤 ( SE )：" + "無法估計" + "<br />" ;
	}
	else
	{
		DisplayArea.innerHTML += "標準誤 ( SE )：" + se + "<br />" ;
	}
	// z
	DisplayArea.innerHTML += "99% 2尾：z &#8776; &#177; 2.575829 , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_99_2+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+z_99_2_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "99% 1尾：z &#8776; &#177; 2.326348 , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_99_1+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+z_99_1_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "95% 2尾：z &#8776; &#177; 1.959964 , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_95_2+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+z_95_2_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "95% 1尾：z &#8776; &#177; 1.644854 , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_95_1+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+z_95_1_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "90% 2尾：z &#8776; &#177; 1.644854 , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_90_2+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+z_90_2_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "90% 1尾：z &#8776; &#177; 1.281552 , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+z_90_1+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+z_90_1_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "<br />" ;
	// t
	DisplayArea.innerHTML += "99% 2尾：t &#8776; &#177; "+t_99_2_table[size-2].toFixed(6)+" , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_99_2+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+t_99_2_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "99% 1尾：t &#8776; &#177; "+t_99_1_table[size-2].toFixed(6)+" , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_99_1+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+t_99_1_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "95% 2尾：t &#8776; &#177; "+t_95_2_table[size-2].toFixed(6)+" , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_95_2+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+t_95_2_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "95% 1尾：t &#8776; &#177; "+t_95_1_table[size-2].toFixed(6)+" , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_95_1+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+t_95_1_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "90% 2尾：t &#8776; &#177; "+t_90_2_table[size-2].toFixed(6)+" , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_90_2+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+t_90_2_mean.join(" , ")+")<br />" ;
	DisplayArea.innerHTML += "90% 1尾：t &#8776; &#177; "+t_90_1_table[size-2].toFixed(6)+" , " ;
	DisplayArea.innerHTML += "置信區間 &#8776; &#177; "+t_90_1+" , " ;
	DisplayArea.innerHTML += "平均值 &#8776; ("+t_90_1_mean.join(" , ")+")<br />" ;

	DisplayArea.innerHTML += "<br />< 模型偏離度 ><br />" ;
	DisplayArea.innerHTML += "均勻分布"+"(未寫)"+"<br />" ;
	DisplayArea.innerHTML += "常態分布"+"(未寫)"+"<br />" ;
	DisplayArea.innerHTML += "帕松分布"+"(未寫)"+"<br />" ;
	DisplayArea.innerHTML += "二項分布"+"(未寫)"+"<br />" ;
	
	if(stay == 0) window.scrollTo(0,document.body.scrollHeight) ; // 滾到最底
}

function inputRandom(input,numSet)
{
	var array = input.split(","); // [最少,最大,個數,出現該數即停止]
	if(array[0]*1>array[1]*1) // 修正範圍
	{
		var buf = array[0] ;
		array[0] = array[1] ;
		array[1] = buf ;
	}

	var RandomNumber ; // 準備產生的隨機數 (未轉換)
	var change = x => eval(inputChange.value + "") ; // 使用者自定的轉換函數 f(x)
	for(var n = 0 ; n < array[2]*1 ; n++)
	{
		// 判斷 整數or實數，產生相應的隨機數
		if(numSet=="int") RandomNumber = Math.floor(Math.random()*(array[1]-array[0]+1)+array[0]*1);
		else RandomNumber = Math.random()*(array[1]-array[0])+array[0]*1;
		
		var output = change(RandomNumber) ; // 經使用者自定函數轉換

		pop.push(output); // 輸出
		
		if(output == array[3]) break ; // 出現特定數字,停止.
	}
	inputSub("stay");
}

function randomDelete(max)
{
	var pos ;
	if(max >= pop.length) pop = [] ; // 全部清空
	else
	{
		for(var n = 0 ; n < max ; n ++)
		{
			pos = Math.floor(Math.random()*pop.length) ; // 隨機決定位置
			pop.splice(pos,1); // 移除
		}
	}
	inputSub(); // 更新統計資料
}

function inputKey()
{
	if(event.keyCode==13)
	{
		popAdd();
		inputSub();
	}
}

function linearCut(parts) // 平均分段
{
	var n = parseInt(parts);
	if(n>0)
	{
		var min = pop[0] ;
		var max = pop[pop.length-1] ;
		var space = range/n ;
		pop = [min,max] ;
			
		for(var i = 1 ; i < n ; i ++ )
		{
			pop.push(min+space*i);
		}
		inputSub() ;
	}
	else alert("請輸入正整數。");
}

function grouping(groupRange) // 分組
{
	var r = groupRange * 1;
	if(r>0)
	{
		var group1st = Math.floor(pop[0]/r); // 第一組
		var groupLast = Math.floor(pop[pop.length-1]/r); // 最後一組
		/*
		for(var k = group1st ; k <= groupLast ; k++)
		{
			
		}
		*/
	}
	else alert("請輸入正數。");

}

function addDist_geo(p,times) // 幾何分布
{
	if(p>=0 && p<=1 && times>0)
	{
		alert("幾何分布\np = "+(p*1)+"\nq = "+(1-p)+"\n產生數據量 = "+times);
		p *= 1 ; times *= 1 ;
		
		for(var k = 0 ; k>=0 ; k ++ )
		{
			f = (1-p)**k * p ;
			f *= times ;
			f = f.toFixed(0) ;
			
			if(f>0)
			{
				for(var j=0 ; j<f ; j++)
				{
					pop.push(k+1);
				}
			}
			else break ;
		}
		inputSub();
	}
}

function addDist_bin(p,n,times) // 二項分布
{
	if(n>=0 && p>=0 && p<=1 && times>0)
	{
		alert("二項分布\np = "+(p*1)+"\nq = "+(1-p)+"\nn = "+n+"\nnp = "+n*p+"\nnq = "+n*(1-p)+"\n產生數據量 = "+times);
		p *= 1 ; n *= 1 ; times *= 1 ;
		var mu = n*p ;

		for(var k = 0 ; k >= 0 ; k ++)
		{
			// 平均值 -k格
			var x = mu.toFixed(0)*1-k ;
			if(x>=0)
			{
				var fL = 1 ;
				for(var i = 0 ; i < x ; i++)
				{
					fL *= p*(n-i)/(x-i) ; // nCx * p^x
					if(i<n-x) fL *= (1-p) ; // * q^(n-x)
				}
				for(var i = 0 ; i < n-2*x ; i ++) // 補剩餘的 q
				{
					fL *= (1-p) ;
				}
				fL *= times ;
				fL = fL.toFixed(0) ;
				if(fL>0)
				{
					for(var j = 0 ; j<fL ; j ++)
					{
						pop.push(x);
					}
				}
			}
			else var fL = 0 ;
			
			// 平均值 +k格
			if(k>0)
			{
				x = mu.toFixed(0)*1+k ;
				if(x<=n)
				{
					var fR = 1 ;
					for(var i = 0 ; i < x ; i++)
					{
						fR *= p*(n-i)/(x-i) ; // nCx * p^x
						if(i<n-x) fR *= (1-p) ; // * q^(n-x)
					}
					for(var i = 0 ; i < n-2*x ; i ++) // 補剩餘的 q
					{
						fR *= (1-p) ;
					}
					fR *= times ;
					fR = fR.toFixed(0) ;
					if(fR>0)
					{
						for(var j = 0 ; j<fR ; j ++)
						{
							pop.push(x);
						}
					}
				}	
				else var fR=0 ;
			}
			else var fR=0 ;

			if(fL+fR<=0) break;
		}
		inputSub();
	}
	else alert("輸入無效。");
}

function addDist_ps(mu,times) // 帕松分布
{
	if( mu>0 && times>0 )
	{
		alert("帕松分布\n平均值 = "+mu+"\n產生數據量 = "+times);
		mu *= 1 ; times *= 1 ;

		for(var k = 0 ; k>=0 ; k++) // 平均值 ±k
		{
			// 平均值 -k格
			var x = mu.toFixed(0)*1-k ;
			if(x>=0)
			{
				// e^(-mu) * mu^x/x! * times
				var fL = Math.exp(-mu) ;
				for(var i=1 ; i<=x ; i++)
				{
					fL *= mu/i ;
				}
				fL *= times ;
				fL = fL.toFixed(0) ;

				if(fL>0)
				{
					for(var j = 0 ; j<fL ; j ++)
					{
						pop.push(x);
					}
				}
			}
			else var fL = 0 ;
			
			// alert("k="+k+"\n\nx="+x+"\nfL="+fL);
			
			// 平均值 +k格
			if(k>0)
			{
				x = mu.toFixed(0)*1+k ;
				
				// e^(-mu) * mu^x/x! * times
				var fR = Math.exp(-mu) ;
				for(var i=1 ; i<=x ; i++)
				{
					fR *= mu/i ;
				}
				fR *= times ;
				fR = fR.toFixed(0) ;
				
				if(fR>0)
				{
					for(var j = 0 ; j<fR ; j ++)
					{
						pop.push(x);
					}
				}
			}
			else var fR=0 ;

			// alert("k="+k+"\n\nx="+x+"\nfR="+fR);
			
			if(fL+fR<=0) break;
		}
		inputSub();
	}
	else alert("輸入無效。");
}

function addDist_norm(mu,sigma,times) // 常態分布
{
	if( (mu>=0 || mu<0) && sigma>0 && times>0 )
	{
		alert("常態分布\n平均值 = "+mu+"\n標準差 = "+sigma+"\n產生數據量 = "+times);
		mu *= 1 ; sigma *= 1 ; times *= 1 ;
		
		for(var k = 0 ; k>=0 ; k++) // 平均值 ±k
		{
			// 平均值 -k格
			var x = mu.toFixed(0)*1-k ;
			var fL = Math.exp(- (((x-mu)/sigma)**2) /2)/(sigma*Math.sqrt(2*Math.PI)) * times ;
			fL = fL.toFixed(0) ;
			if(fL>0)
			{
				for(var j = 0 ; j<fL ; j ++)
				{
					pop.push(x);
				}
			}
			
			// 平均值 +k格
			if(k>0)
			{
				x = mu.toFixed(0)*1+k ;
				var fR = Math.exp(- (((x-mu)/sigma)**2) /2)/(sigma*Math.sqrt(2*Math.PI)) * times ;
				fR = fR.toFixed(0) ;
				if(fR>0)
				{
					for(var j = 0 ; j<fR ; j ++)
					{
						pop.push(x);
					}
				}
			}
			else var fR=0 ;

			if(fL+fR<=0) break;
		}
		inputSub();
	}
	else alert("輸入無效。");
}

function exportData() // 導出數據
{
	export_area.innerHTML = '<textarea id="exportBox" cols="95%" rows="20" >'+pop+'</textarea>' ;
	exportBox.focus();
	exportBox.select();
}
help_exportData = "另可框選表格，直接複製到 Excel 或 Word。" ;

</script>

<center>
<div id="DisplayAreaPop" class="pop"></div><br />
<div id="DisplayArea" class="info"></div>
<br /><br />
<form>
	<span onClick="dataSet_population.checked='checked';inputSub('stay');">
		<input type="radio" name="dataSet" id="dataSet_population" value="population">母體</input>
	</span>
	<span onClick="dataSet_sample.checked='checked';inputSub('stay');">
		<input type="radio" name="dataSet" id="dataSet_sample" value="sample" checked >樣本</input>
	</span>
</form>
<a href="#dataTable"><input type="button" value="^ 移到表格 ^" /></a>
<br /><br />
<input type="button" value="清空輸入框" onClick="inputValue.value='';" />
<input type="button" value="e" onClick="inputValue.value+=',2.718281828459045';" />
<input type="button" value="pi" onClick="inputValue.value+=',3.141592653589793';" />
<input id="inputValue" type="text" value="" size="60" onKeyPress="inputKey();" />
<input type="button" value="加入" onClick="popAdd();inputSub();" />
<br />
<input type="button" value="加入 幾何分布(...)" onClick="addDist_geo(prompt('請輸入單次成功機率(p)。'),prompt('請輸入欲產生的數據量'));" />
<input type="button" value="加入 二項分布(...)" onClick="addDist_bin(prompt('請輸入單次成功機率(p)。'),prompt('請輸入試驗次數(n)。'),prompt('請輸入欲產生的數據量'));" />
<input type="button" value="加入 帕松分布(...)" onClick="addDist_ps(prompt('請輸入平均值。'),prompt('請輸入欲產生的數據量'));" />
<input type="button" value="加入 常態分布(...)" onClick="addDist_norm(prompt('請輸入平均值。'),prompt('請輸入標準差。'),prompt('請輸入欲產生的數據量'));" />
<br /><br />
加入隨機數(最少,最大,個數,目標數字)：
<input id="inputRange" type="text" value="0,1,1000" size="30" />
<input type="button" value="加入整數" onClick="inputRandom(inputRange.value,'int');" />
<input type="button" value="加入實數" onClick="inputRandom(inputRange.value,'real');" />
<br />
<input type="button" value="二項試驗" onClick="inputRange.value='0,1,1000';" />
<input type="button" value="考試" onClick="inputRange.value='0,100,40';" />
<input type="button" value="擲骰子" onClick="inputRange.value='1,6,5';" />
<input type="button" value="撲克牌" onClick="inputRange.value='1,13,13';" />
<br />
轉換函數：f(x) = 
<input id="inputChange" type="text" value="x" size="30" />
<br />
<input type="button" value="緩衝" onClick="inputChange.value='x';" />
<input type="button" value="雙倍" onClick="inputChange.value='x*2';" />
<input type="button" value="平方" onClick="inputChange.value='x**2';" />
<input type="button" value="立方" onClick="inputChange.value='x**3';" />
<br />
<input type="button" value="對數" onClick="inputChange.value='Math.log(x)';" />
<input type="button" value="負對數" onClick="inputChange.value='-Math.log(x)';" />
<input type="button" value="開方" onClick="inputChange.value='x**0.5';" />
<br />
<input type="button" value="早熟" onClick="inputChange.value='(2*x**0.5-x)';" />
<input type="button" value="慢熱" onClick="inputChange.value='(2*(1-(1-x)**0.5)-x)';" />
<br /><br />
修改：
<input type="button" value="平均分段" onClick="linearCut(prompt('分多少段？'));" />
<input type="button" value="分組(未實裝)" onClick="grouping(prompt('每組的間距？'));" />
<br /><br />
隨機移除多少個數據：
<input id="inputDel" type="text" value="10" size="15" />
<input type="button" value="隨機移除" onClick="randomDelete(inputDel.value);" />
<br />
<input type="button" value="移除首尾項" onClick="popMinus();" />
<input type="button" value="全部清空" onClick="inputClear();" />
<br /><br />
<input type="button" value="導出數據" onClick="exportData();" />
<input type="button" value="?" onClick="alert(help_exportData);" />
<br />
<div id="export_area" ></div>
<br /><br /><br />


</center>
</body>
</html>


